
RemoteTestIR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088fc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f8  08008a8c  08008a8c  00018a8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009084  08009084  000227ec  2**0
                  CONTENTS
  4 .ARM          00000000  08009084  08009084  000227ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009084  08009084  000227ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009084  08009084  00019084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009088  08009088  00019088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000027ec  20000000  0800908c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000660  200027ec  0800b878  000227ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002e4c  0800b878  00022e4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000227ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   000166e5  00000000  00000000  0002281c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e8f  00000000  00000000  00038f01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001360  00000000  00000000  0003bd90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001258  00000000  00000000  0003d0f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000182b0  00000000  00000000  0003e348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018c53  00000000  00000000  000565f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e21e  00000000  00000000  0006f24b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fd469  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005964  00000000  00000000  000fd4bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200027ec 	.word	0x200027ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008a74 	.word	0x08008a74

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200027f0 	.word	0x200027f0
 80001cc:	08008a74 	.word	0x08008a74

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <Starting>:
extern uint16_t geheugenplaatsen;
extern uint16_t lengte_signaal[48]; //{1, 2, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0};
extern uint16_t tijd[500];

void Starting()
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
	  printf("\r\n-----------------------------------------------------------------------\r\n");
 8000274:	480e      	ldr	r0, [pc, #56]	; (80002b0 <Starting+0x40>)
 8000276:	f007 fc7f 	bl	8007b78 <puts>
	  printf("  ######  ########    ###    ########  ######## #### ##    ##  ######\r\n");
 800027a:	480e      	ldr	r0, [pc, #56]	; (80002b4 <Starting+0x44>)
 800027c:	f007 fc7c 	bl	8007b78 <puts>
	  printf(" ##    ##    ##      ## ##   ##     ##    ##     ##  ###   ## ##    ##\r\n");
 8000280:	480d      	ldr	r0, [pc, #52]	; (80002b8 <Starting+0x48>)
 8000282:	f007 fc79 	bl	8007b78 <puts>
	  printf(" ##          ##     ##   ##  ##     ##    ##     ##  ####  ## ## \r\n");
 8000286:	480d      	ldr	r0, [pc, #52]	; (80002bc <Starting+0x4c>)
 8000288:	f007 fc76 	bl	8007b78 <puts>
	  printf("  ######     ##    ##     ## ########     ##     ##  ## ## ## ##   #### \r\n");
 800028c:	480c      	ldr	r0, [pc, #48]	; (80002c0 <Starting+0x50>)
 800028e:	f007 fc73 	bl	8007b78 <puts>
	  printf("       ##    ##    ######### ##   ##      ##     ##  ##  #### ##    ##\r\n");
 8000292:	480c      	ldr	r0, [pc, #48]	; (80002c4 <Starting+0x54>)
 8000294:	f007 fc70 	bl	8007b78 <puts>
	  printf(" ##    ##    ##    ##     ## ##    ##     ##     ##  ##   ### ##    ##  \r\n");
 8000298:	480b      	ldr	r0, [pc, #44]	; (80002c8 <Starting+0x58>)
 800029a:	f007 fc6d 	bl	8007b78 <puts>
	  printf("  ######     ##    ##     ## ##     ##    ##    #### ##    ##  ######\r\n");
 800029e:	480b      	ldr	r0, [pc, #44]	; (80002cc <Starting+0x5c>)
 80002a0:	f007 fc6a 	bl	8007b78 <puts>
	  printf("-----------------------------------------------------------------------\r\n\r\n");
 80002a4:	480a      	ldr	r0, [pc, #40]	; (80002d0 <Starting+0x60>)
 80002a6:	f007 fc67 	bl	8007b78 <puts>
}
 80002aa:	bf00      	nop
 80002ac:	bd80      	pop	{r7, pc}
 80002ae:	bf00      	nop
 80002b0:	08008a8c 	.word	0x08008a8c
 80002b4:	08008ad8 	.word	0x08008ad8
 80002b8:	08008b20 	.word	0x08008b20
 80002bc:	08008b68 	.word	0x08008b68
 80002c0:	08008bac 	.word	0x08008bac
 80002c4:	08008bf8 	.word	0x08008bf8
 80002c8:	08008c40 	.word	0x08008c40
 80002cc:	08008c8c 	.word	0x08008c8c
 80002d0:	08008cd4 	.word	0x08008cd4

080002d4 <All_Carl_Inits>:
void All_Carl_Inits()
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b082      	sub	sp, #8
 80002d8:	af00      	add	r7, sp, #0
	if(UartScreen == 1)
 80002da:	4b12      	ldr	r3, [pc, #72]	; (8000324 <All_Carl_Inits+0x50>)
 80002dc:	781b      	ldrb	r3, [r3, #0]
 80002de:	2b01      	cmp	r3, #1
 80002e0:	d101      	bne.n	80002e6 <All_Carl_Inits+0x12>
	{
	Starting();
 80002e2:	f7ff ffc5 	bl	8000270 <Starting>
	}
	InitTouch();
 80002e6:	f001 fb13 	bl	8001910 <InitTouch>
	DisplayBegin();
 80002ea:	f000 faa1 	bl	8000830 <DisplayBegin>
	IR_Carrier_OFF();
 80002ee:	f001 f9d1 	bl	8001694 <IR_Carrier_OFF>

	//logo();
	mainscreen();
 80002f2:	f001 f8d9 	bl	80014a8 <mainscreen>
//	WriteToGeheugen(3, 12);
//	DeleteFromGeheugen(3, 11);
//	DeleteFromGeheugen(1, 1);
	//Wat zit er eigenlijk in mijn geheugen?
	for(uint8_t i = 1; i <= 4; i++)
 80002f6:	2301      	movs	r3, #1
 80002f8:	71fb      	strb	r3, [r7, #7]
 80002fa:	e00b      	b.n	8000314 <All_Carl_Inits+0x40>
	{
		uint16_t *tijd;
		for(uint8_t j = 1; j <= 12; j ++)
 80002fc:	2301      	movs	r3, #1
 80002fe:	71bb      	strb	r3, [r7, #6]
 8000300:	e002      	b.n	8000308 <All_Carl_Inits+0x34>
 8000302:	79bb      	ldrb	r3, [r7, #6]
 8000304:	3301      	adds	r3, #1
 8000306:	71bb      	strb	r3, [r7, #6]
 8000308:	79bb      	ldrb	r3, [r7, #6]
 800030a:	2b0c      	cmp	r3, #12
 800030c:	d9f9      	bls.n	8000302 <All_Carl_Inits+0x2e>
	for(uint8_t i = 1; i <= 4; i++)
 800030e:	79fb      	ldrb	r3, [r7, #7]
 8000310:	3301      	adds	r3, #1
 8000312:	71fb      	strb	r3, [r7, #7]
 8000314:	79fb      	ldrb	r3, [r7, #7]
 8000316:	2b04      	cmp	r3, #4
 8000318:	d9f0      	bls.n	80002fc <All_Carl_Inits+0x28>
		{
			//tijd = TakefromGeheugen(i, j);
		}
	}
}
 800031a:	bf00      	nop
 800031c:	bf00      	nop
 800031e:	3708      	adds	r7, #8
 8000320:	46bd      	mov	sp, r7
 8000322:	bd80      	pop	{r7, pc}
 8000324:	20000000 	.word	0x20000000

08000328 <ShowMemory>:

void ShowMemory()
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b082      	sub	sp, #8
 800032c:	af00      	add	r7, sp, #0
	for(uint16_t i = 0; i < 1000; i ++)
 800032e:	2300      	movs	r3, #0
 8000330:	80fb      	strh	r3, [r7, #6]
 8000332:	e00b      	b.n	800034c <ShowMemory+0x24>
		{
	printf("Geheugen plaats %d = %d\r\n ", i, geheugen[i]);
 8000334:	88f9      	ldrh	r1, [r7, #6]
 8000336:	88fb      	ldrh	r3, [r7, #6]
 8000338:	4a09      	ldr	r2, [pc, #36]	; (8000360 <ShowMemory+0x38>)
 800033a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800033e:	461a      	mov	r2, r3
 8000340:	4808      	ldr	r0, [pc, #32]	; (8000364 <ShowMemory+0x3c>)
 8000342:	f007 fb93 	bl	8007a6c <iprintf>
	for(uint16_t i = 0; i < 1000; i ++)
 8000346:	88fb      	ldrh	r3, [r7, #6]
 8000348:	3301      	adds	r3, #1
 800034a:	80fb      	strh	r3, [r7, #6]
 800034c:	88fb      	ldrh	r3, [r7, #6]
 800034e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000352:	d3ef      	bcc.n	8000334 <ShowMemory+0xc>
		}
}
 8000354:	bf00      	nop
 8000356:	bf00      	nop
 8000358:	3708      	adds	r7, #8
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}
 800035e:	bf00      	nop
 8000360:	2000000c 	.word	0x2000000c
 8000364:	08008d20 	.word	0x08008d20

08000368 <WriteToGeheugen>:
void WriteToGeheugen(uint8_t *dev, uint8_t *kn)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	f5ad 5d5b 	sub.w	sp, sp, #14016	; 0x36c0
 800036e:	b084      	sub	sp, #16
 8000370:	af00      	add	r7, sp, #0
 8000372:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
 8000376:	f2a3 63cc 	subw	r3, r3, #1740	; 0x6cc
 800037a:	6018      	str	r0, [r3, #0]
 800037c:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
 8000380:	f5a3 63da 	sub.w	r3, r3, #1744	; 0x6d0
 8000384:	6019      	str	r1, [r3, #0]
	uint8_t device = *dev;
 8000386:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
 800038a:	f2a3 63cc 	subw	r3, r3, #1740	; 0x6cc
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	781b      	ldrb	r3, [r3, #0]
 8000392:	f507 525b 	add.w	r2, r7, #14016	; 0x36c0
 8000396:	f102 0201 	add.w	r2, r2, #1
 800039a:	7013      	strb	r3, [r2, #0]
	uint8_t knop = *kn;
 800039c:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
 80003a0:	f5a3 63da 	sub.w	r3, r3, #1744	; 0x6d0
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	781b      	ldrb	r3, [r3, #0]
 80003a8:	f507 525b 	add.w	r2, r7, #14016	; 0x36c0
 80003ac:	7013      	strb	r3, [r2, #0]
	uint16_t buffer[7000];
	uint16_t bufferwaarde = 0;
 80003ae:	2300      	movs	r3, #0
 80003b0:	f507 525a 	add.w	r2, r7, #13952	; 0x3680
 80003b4:	f102 023e 	add.w	r2, r2, #62	; 0x3e
 80003b8:	8013      	strh	r3, [r2, #0]


	//stel Device 3 knop 4
	//berekening = 2*12 + 3 = 27

	uint8_t berekening = ((device-1) * 12) + knop-1 ; //zoek de plaats van lengte_signaal voor het knopje van het apparaat
 80003ba:	f507 535b 	add.w	r3, r7, #14016	; 0x36c0
 80003be:	f103 0301 	add.w	r3, r3, #1
 80003c2:	781b      	ldrb	r3, [r3, #0]
 80003c4:	461a      	mov	r2, r3
 80003c6:	0052      	lsls	r2, r2, #1
 80003c8:	4413      	add	r3, r2
 80003ca:	009b      	lsls	r3, r3, #2
 80003cc:	b2da      	uxtb	r2, r3
 80003ce:	f507 535b 	add.w	r3, r7, #14016	; 0x36c0
 80003d2:	781b      	ldrb	r3, [r3, #0]
 80003d4:	4413      	add	r3, r2
 80003d6:	b2db      	uxtb	r3, r3
 80003d8:	3b0d      	subs	r3, #13
 80003da:	f507 525a 	add.w	r2, r7, #13952	; 0x3680
 80003de:	f102 023d 	add.w	r2, r2, #61	; 0x3d
 80003e2:	7013      	strb	r3, [r2, #0]

	ShowMemory();
 80003e4:	f7ff ffa0 	bl	8000328 <ShowMemory>
	uint16_t lengte_signaal_ervoor = 0;
 80003e8:	2300      	movs	r3, #0
 80003ea:	f507 525b 	add.w	r2, r7, #14016	; 0x36c0
 80003ee:	f102 020e 	add.w	r2, r2, #14
 80003f2:	8013      	strh	r3, [r2, #0]
	for(uint16_t i = 0; i < berekening; i++)
 80003f4:	2300      	movs	r3, #0
 80003f6:	f507 525b 	add.w	r2, r7, #14016	; 0x36c0
 80003fa:	f102 020c 	add.w	r2, r2, #12
 80003fe:	8013      	strh	r3, [r2, #0]
 8000400:	e01d      	b.n	800043e <WriteToGeheugen+0xd6>
	{
		lengte_signaal_ervoor += lengte_signaal[i];
 8000402:	f507 535b 	add.w	r3, r7, #14016	; 0x36c0
 8000406:	f103 030c 	add.w	r3, r3, #12
 800040a:	881b      	ldrh	r3, [r3, #0]
 800040c:	4a7d      	ldr	r2, [pc, #500]	; (8000604 <WriteToGeheugen+0x29c>)
 800040e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000412:	f507 535b 	add.w	r3, r7, #14016	; 0x36c0
 8000416:	f103 030e 	add.w	r3, r3, #14
 800041a:	881b      	ldrh	r3, [r3, #0]
 800041c:	4413      	add	r3, r2
 800041e:	f507 525b 	add.w	r2, r7, #14016	; 0x36c0
 8000422:	f102 020e 	add.w	r2, r2, #14
 8000426:	8013      	strh	r3, [r2, #0]
	for(uint16_t i = 0; i < berekening; i++)
 8000428:	f507 535b 	add.w	r3, r7, #14016	; 0x36c0
 800042c:	f103 030c 	add.w	r3, r3, #12
 8000430:	881b      	ldrh	r3, [r3, #0]
 8000432:	3301      	adds	r3, #1
 8000434:	f507 525b 	add.w	r2, r7, #14016	; 0x36c0
 8000438:	f102 020c 	add.w	r2, r2, #12
 800043c:	8013      	strh	r3, [r2, #0]
 800043e:	f507 535a 	add.w	r3, r7, #13952	; 0x3680
 8000442:	f103 033d 	add.w	r3, r3, #61	; 0x3d
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	b29b      	uxth	r3, r3
 800044a:	f507 525b 	add.w	r2, r7, #14016	; 0x36c0
 800044e:	f102 020c 	add.w	r2, r2, #12
 8000452:	8812      	ldrh	r2, [r2, #0]
 8000454:	429a      	cmp	r2, r3
 8000456:	d3d4      	bcc.n	8000402 <WriteToGeheugen+0x9a>
	}
	uint16_t lengte_signaal_erna = 0;
 8000458:	2300      	movs	r3, #0
 800045a:	f507 525b 	add.w	r2, r7, #14016	; 0x36c0
 800045e:	f102 020a 	add.w	r2, r2, #10
 8000462:	8013      	strh	r3, [r2, #0]
	for(uint16_t i = berekening +1; i <= 48; i++)
 8000464:	f507 535a 	add.w	r3, r7, #13952	; 0x3680
 8000468:	f103 033d 	add.w	r3, r3, #61	; 0x3d
 800046c:	781b      	ldrb	r3, [r3, #0]
 800046e:	b29b      	uxth	r3, r3
 8000470:	3301      	adds	r3, #1
 8000472:	f507 525b 	add.w	r2, r7, #14016	; 0x36c0
 8000476:	f102 0208 	add.w	r2, r2, #8
 800047a:	8013      	strh	r3, [r2, #0]
 800047c:	e01d      	b.n	80004ba <WriteToGeheugen+0x152>
	{
		lengte_signaal_erna += lengte_signaal[i];
 800047e:	f507 535b 	add.w	r3, r7, #14016	; 0x36c0
 8000482:	f103 0308 	add.w	r3, r3, #8
 8000486:	881b      	ldrh	r3, [r3, #0]
 8000488:	4a5e      	ldr	r2, [pc, #376]	; (8000604 <WriteToGeheugen+0x29c>)
 800048a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800048e:	f507 535b 	add.w	r3, r7, #14016	; 0x36c0
 8000492:	f103 030a 	add.w	r3, r3, #10
 8000496:	881b      	ldrh	r3, [r3, #0]
 8000498:	4413      	add	r3, r2
 800049a:	f507 525b 	add.w	r2, r7, #14016	; 0x36c0
 800049e:	f102 020a 	add.w	r2, r2, #10
 80004a2:	8013      	strh	r3, [r2, #0]
	for(uint16_t i = berekening +1; i <= 48; i++)
 80004a4:	f507 535b 	add.w	r3, r7, #14016	; 0x36c0
 80004a8:	f103 0308 	add.w	r3, r3, #8
 80004ac:	881b      	ldrh	r3, [r3, #0]
 80004ae:	3301      	adds	r3, #1
 80004b0:	f507 525b 	add.w	r2, r7, #14016	; 0x36c0
 80004b4:	f102 0208 	add.w	r2, r2, #8
 80004b8:	8013      	strh	r3, [r2, #0]
 80004ba:	f507 535b 	add.w	r3, r7, #14016	; 0x36c0
 80004be:	f103 0308 	add.w	r3, r3, #8
 80004c2:	881b      	ldrh	r3, [r3, #0]
 80004c4:	2b30      	cmp	r3, #48	; 0x30
 80004c6:	d9da      	bls.n	800047e <WriteToGeheugen+0x116>
	}
	printf("lengte ervoor = %d, lengte erna =%d\r\n", lengte_signaal_ervoor, lengte_signaal_erna);
 80004c8:	f507 535b 	add.w	r3, r7, #14016	; 0x36c0
 80004cc:	f103 030e 	add.w	r3, r3, #14
 80004d0:	881b      	ldrh	r3, [r3, #0]
 80004d2:	f507 525b 	add.w	r2, r7, #14016	; 0x36c0
 80004d6:	f102 020a 	add.w	r2, r2, #10
 80004da:	8812      	ldrh	r2, [r2, #0]
 80004dc:	4619      	mov	r1, r3
 80004de:	484a      	ldr	r0, [pc, #296]	; (8000608 <WriteToGeheugen+0x2a0>)
 80004e0:	f007 fac4 	bl	8007a6c <iprintf>
	//eerst gaan we de buffer clearen
	for(uint16_t i = 0; i < 7000; i++)
 80004e4:	2300      	movs	r3, #0
 80004e6:	f507 525b 	add.w	r2, r7, #14016	; 0x36c0
 80004ea:	f102 0206 	add.w	r2, r2, #6
 80004ee:	8013      	strh	r3, [r2, #0]
 80004f0:	e016      	b.n	8000520 <WriteToGeheugen+0x1b8>
	{
		buffer[i]=0;
 80004f2:	f507 535b 	add.w	r3, r7, #14016	; 0x36c0
 80004f6:	f103 0306 	add.w	r3, r3, #6
 80004fa:	881a      	ldrh	r2, [r3, #0]
 80004fc:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
 8000500:	f2a3 63c4 	subw	r3, r3, #1732	; 0x6c4
 8000504:	2100      	movs	r1, #0
 8000506:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(uint16_t i = 0; i < 7000; i++)
 800050a:	f507 535b 	add.w	r3, r7, #14016	; 0x36c0
 800050e:	f103 0306 	add.w	r3, r3, #6
 8000512:	881b      	ldrh	r3, [r3, #0]
 8000514:	3301      	adds	r3, #1
 8000516:	f507 525b 	add.w	r2, r7, #14016	; 0x36c0
 800051a:	f102 0206 	add.w	r2, r2, #6
 800051e:	8013      	strh	r3, [r2, #0]
 8000520:	f507 535b 	add.w	r3, r7, #14016	; 0x36c0
 8000524:	f103 0306 	add.w	r3, r3, #6
 8000528:	881b      	ldrh	r3, [r3, #0]
 800052a:	f641 3257 	movw	r2, #6999	; 0x1b57
 800052e:	4293      	cmp	r3, r2
 8000530:	d9df      	bls.n	80004f2 <WriteToGeheugen+0x18a>
	}
	//nu gaan we het achterste deel bufferen,
	//zodat we het signaal van de knop ervoor kunnen zetten
	for(uint16_t i = 0; i <= lengte_signaal_erna; i++)
 8000532:	2300      	movs	r3, #0
 8000534:	f507 525b 	add.w	r2, r7, #14016	; 0x36c0
 8000538:	f102 0204 	add.w	r2, r2, #4
 800053c:	8013      	strh	r3, [r2, #0]
 800053e:	e024      	b.n	800058a <WriteToGeheugen+0x222>
	{
		buffer[i]= geheugen[lengte_signaal_ervoor+1+i];
 8000540:	f507 535b 	add.w	r3, r7, #14016	; 0x36c0
 8000544:	f103 030e 	add.w	r3, r3, #14
 8000548:	881b      	ldrh	r3, [r3, #0]
 800054a:	1c5a      	adds	r2, r3, #1
 800054c:	f507 535b 	add.w	r3, r7, #14016	; 0x36c0
 8000550:	f103 0304 	add.w	r3, r3, #4
 8000554:	881b      	ldrh	r3, [r3, #0]
 8000556:	4413      	add	r3, r2
 8000558:	f507 525b 	add.w	r2, r7, #14016	; 0x36c0
 800055c:	f102 0204 	add.w	r2, r2, #4
 8000560:	8812      	ldrh	r2, [r2, #0]
 8000562:	492a      	ldr	r1, [pc, #168]	; (800060c <WriteToGeheugen+0x2a4>)
 8000564:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8000568:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
 800056c:	f2a3 63c4 	subw	r3, r3, #1732	; 0x6c4
 8000570:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(uint16_t i = 0; i <= lengte_signaal_erna; i++)
 8000574:	f507 535b 	add.w	r3, r7, #14016	; 0x36c0
 8000578:	f103 0304 	add.w	r3, r3, #4
 800057c:	881b      	ldrh	r3, [r3, #0]
 800057e:	3301      	adds	r3, #1
 8000580:	f507 525b 	add.w	r2, r7, #14016	; 0x36c0
 8000584:	f102 0204 	add.w	r2, r2, #4
 8000588:	8013      	strh	r3, [r2, #0]
 800058a:	f507 535b 	add.w	r3, r7, #14016	; 0x36c0
 800058e:	f103 0304 	add.w	r3, r3, #4
 8000592:	881a      	ldrh	r2, [r3, #0]
 8000594:	f507 535b 	add.w	r3, r7, #14016	; 0x36c0
 8000598:	f103 030a 	add.w	r3, r3, #10
 800059c:	881b      	ldrh	r3, [r3, #0]
 800059e:	429a      	cmp	r2, r3
 80005a0:	d9ce      	bls.n	8000540 <WriteToGeheugen+0x1d8>
	}
	//nu gaan we het achterste deel clearen in het geheugen
	for(uint16_t i = lengte_signaal_ervoor+1; i < 7000; i++)
 80005a2:	f507 535b 	add.w	r3, r7, #14016	; 0x36c0
 80005a6:	f103 030e 	add.w	r3, r3, #14
 80005aa:	881b      	ldrh	r3, [r3, #0]
 80005ac:	3301      	adds	r3, #1
 80005ae:	f507 525b 	add.w	r2, r7, #14016	; 0x36c0
 80005b2:	f102 0202 	add.w	r2, r2, #2
 80005b6:	8013      	strh	r3, [r2, #0]
 80005b8:	e013      	b.n	80005e2 <WriteToGeheugen+0x27a>
	{
		geheugen[i]=0;
 80005ba:	f507 535b 	add.w	r3, r7, #14016	; 0x36c0
 80005be:	f103 0302 	add.w	r3, r3, #2
 80005c2:	881b      	ldrh	r3, [r3, #0]
 80005c4:	4a11      	ldr	r2, [pc, #68]	; (800060c <WriteToGeheugen+0x2a4>)
 80005c6:	2100      	movs	r1, #0
 80005c8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint16_t i = lengte_signaal_ervoor+1; i < 7000; i++)
 80005cc:	f507 535b 	add.w	r3, r7, #14016	; 0x36c0
 80005d0:	f103 0302 	add.w	r3, r3, #2
 80005d4:	881b      	ldrh	r3, [r3, #0]
 80005d6:	3301      	adds	r3, #1
 80005d8:	f507 525b 	add.w	r2, r7, #14016	; 0x36c0
 80005dc:	f102 0202 	add.w	r2, r2, #2
 80005e0:	8013      	strh	r3, [r2, #0]
 80005e2:	f507 535b 	add.w	r3, r7, #14016	; 0x36c0
 80005e6:	f103 0302 	add.w	r3, r3, #2
 80005ea:	881b      	ldrh	r3, [r3, #0]
 80005ec:	f641 3257 	movw	r2, #6999	; 0x1b57
 80005f0:	4293      	cmp	r3, r2
 80005f2:	d9e2      	bls.n	80005ba <WriteToGeheugen+0x252>
	}
	ShowMemory();
 80005f4:	f7ff fe98 	bl	8000328 <ShowMemory>

	printf("geheugenplaatsen %d\r\n", geheugenplaatsen);

*/

}
 80005f8:	bf00      	nop
 80005fa:	f507 575b 	add.w	r7, r7, #14016	; 0x36c0
 80005fe:	3710      	adds	r7, #16
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	2000271c 	.word	0x2000271c
 8000608:	08008d3c 	.word	0x08008d3c
 800060c:	2000000c 	.word	0x2000000c

08000610 <TakefromGeheugen>:
	printf("geheugenplaatsen = %d geheugen = %d\n\r", geheugenplaatsen, controle);
	}
}
*/
void TakefromGeheugen(uint8_t *dev, uint8_t *kn, uint16_t *DataFromGeheugen, uint8_t *controle)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b088      	sub	sp, #32
 8000614:	af00      	add	r7, sp, #0
 8000616:	60f8      	str	r0, [r7, #12]
 8000618:	60b9      	str	r1, [r7, #8]
 800061a:	607a      	str	r2, [r7, #4]
 800061c:	603b      	str	r3, [r7, #0]
		uint8_t device = *dev;
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	75fb      	strb	r3, [r7, #23]
		uint8_t knop = *kn;
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	75bb      	strb	r3, [r7, #22]
		uint16_t plaatservoor = 0;
 800062a:	2300      	movs	r3, #0
 800062c:	83fb      	strh	r3, [r7, #30]
		uint8_t berekening = ((device-1) * 12) + knop-1 ;
 800062e:	7dfb      	ldrb	r3, [r7, #23]
 8000630:	461a      	mov	r2, r3
 8000632:	0052      	lsls	r2, r2, #1
 8000634:	4413      	add	r3, r2
 8000636:	009b      	lsls	r3, r3, #2
 8000638:	b2da      	uxtb	r2, r3
 800063a:	7dbb      	ldrb	r3, [r7, #22]
 800063c:	4413      	add	r3, r2
 800063e:	b2db      	uxtb	r3, r3
 8000640:	3b0d      	subs	r3, #13
 8000642:	757b      	strb	r3, [r7, #21]
		if(lengte_signaal[berekening] == 0)
 8000644:	7d7b      	ldrb	r3, [r7, #21]
 8000646:	4a23      	ldr	r2, [pc, #140]	; (80006d4 <TakefromGeheugen+0xc4>)
 8000648:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d109      	bne.n	8000664 <TakefromGeheugen+0x54>
		{
			printf("device: %d knop: %d is niet ingesteld!\r\n", device, knop);
 8000650:	7dfb      	ldrb	r3, [r7, #23]
 8000652:	7dba      	ldrb	r2, [r7, #22]
 8000654:	4619      	mov	r1, r3
 8000656:	4820      	ldr	r0, [pc, #128]	; (80006d8 <TakefromGeheugen+0xc8>)
 8000658:	f007 fa08 	bl	8007a6c <iprintf>
			*controle=0;
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	2200      	movs	r2, #0
 8000660:	701a      	strb	r2, [r3, #0]
				//printf("%d ", DataFromGeheugen[index]);
				index++;
			}
			//printf("\r\n");
		}
}
 8000662:	e032      	b.n	80006ca <TakefromGeheugen+0xba>
			*controle=1;
 8000664:	683b      	ldr	r3, [r7, #0]
 8000666:	2201      	movs	r2, #1
 8000668:	701a      	strb	r2, [r3, #0]
			for(uint8_t i = 0; i < berekening; i++)
 800066a:	2300      	movs	r3, #0
 800066c:	777b      	strb	r3, [r7, #29]
 800066e:	e009      	b.n	8000684 <TakefromGeheugen+0x74>
				plaatservoor += lengte_signaal[i];
 8000670:	7f7b      	ldrb	r3, [r7, #29]
 8000672:	4a18      	ldr	r2, [pc, #96]	; (80006d4 <TakefromGeheugen+0xc4>)
 8000674:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000678:	8bfb      	ldrh	r3, [r7, #30]
 800067a:	4413      	add	r3, r2
 800067c:	83fb      	strh	r3, [r7, #30]
			for(uint8_t i = 0; i < berekening; i++)
 800067e:	7f7b      	ldrb	r3, [r7, #29]
 8000680:	3301      	adds	r3, #1
 8000682:	777b      	strb	r3, [r7, #29]
 8000684:	7f7a      	ldrb	r2, [r7, #29]
 8000686:	7d7b      	ldrb	r3, [r7, #21]
 8000688:	429a      	cmp	r2, r3
 800068a:	d3f1      	bcc.n	8000670 <TakefromGeheugen+0x60>
			uint16_t plaatserna = plaatservoor + lengte_signaal[berekening];
 800068c:	7d7b      	ldrb	r3, [r7, #21]
 800068e:	4a11      	ldr	r2, [pc, #68]	; (80006d4 <TakefromGeheugen+0xc4>)
 8000690:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000694:	8bfb      	ldrh	r3, [r7, #30]
 8000696:	4413      	add	r3, r2
 8000698:	827b      	strh	r3, [r7, #18]
			uint16_t index = 0;
 800069a:	2300      	movs	r3, #0
 800069c:	837b      	strh	r3, [r7, #26]
			for(uint16_t i = plaatservoor; i < plaatserna; i++)
 800069e:	8bfb      	ldrh	r3, [r7, #30]
 80006a0:	833b      	strh	r3, [r7, #24]
 80006a2:	e00e      	b.n	80006c2 <TakefromGeheugen+0xb2>
				DataFromGeheugen[index] = geheugen[i];
 80006a4:	8b3a      	ldrh	r2, [r7, #24]
 80006a6:	8b7b      	ldrh	r3, [r7, #26]
 80006a8:	005b      	lsls	r3, r3, #1
 80006aa:	6879      	ldr	r1, [r7, #4]
 80006ac:	440b      	add	r3, r1
 80006ae:	490b      	ldr	r1, [pc, #44]	; (80006dc <TakefromGeheugen+0xcc>)
 80006b0:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80006b4:	801a      	strh	r2, [r3, #0]
				index++;
 80006b6:	8b7b      	ldrh	r3, [r7, #26]
 80006b8:	3301      	adds	r3, #1
 80006ba:	837b      	strh	r3, [r7, #26]
			for(uint16_t i = plaatservoor; i < plaatserna; i++)
 80006bc:	8b3b      	ldrh	r3, [r7, #24]
 80006be:	3301      	adds	r3, #1
 80006c0:	833b      	strh	r3, [r7, #24]
 80006c2:	8b3a      	ldrh	r2, [r7, #24]
 80006c4:	8a7b      	ldrh	r3, [r7, #18]
 80006c6:	429a      	cmp	r2, r3
 80006c8:	d3ec      	bcc.n	80006a4 <TakefromGeheugen+0x94>
}
 80006ca:	bf00      	nop
 80006cc:	3720      	adds	r7, #32
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	2000271c 	.word	0x2000271c
 80006d8:	08008d64 	.word	0x08008d64
 80006dc:	2000000c 	.word	0x2000000c

080006e0 <whilelus>:
uint16_t Yvalue = 363;
uint16_t OldX = 0;
uint16_t OldY = 0;

uint8_t tijden = 0;
void whilelus(){
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af02      	add	r7, sp, #8

	Touch(&aanraak, &Xvalue, &Yvalue);
 80006e6:	4a2c      	ldr	r2, [pc, #176]	; (8000798 <whilelus+0xb8>)
 80006e8:	492c      	ldr	r1, [pc, #176]	; (800079c <whilelus+0xbc>)
 80006ea:	482d      	ldr	r0, [pc, #180]	; (80007a0 <whilelus+0xc0>)
 80006ec:	f001 f93c 	bl	8001968 <Touch>

	if((OldX != Xvalue && OldY != Yvalue))
 80006f0:	4b2c      	ldr	r3, [pc, #176]	; (80007a4 <whilelus+0xc4>)
 80006f2:	881a      	ldrh	r2, [r3, #0]
 80006f4:	4b29      	ldr	r3, [pc, #164]	; (800079c <whilelus+0xbc>)
 80006f6:	881b      	ldrh	r3, [r3, #0]
 80006f8:	429a      	cmp	r2, r3
 80006fa:	d049      	beq.n	8000790 <whilelus+0xb0>
 80006fc:	4b2a      	ldr	r3, [pc, #168]	; (80007a8 <whilelus+0xc8>)
 80006fe:	881a      	ldrh	r2, [r3, #0]
 8000700:	4b25      	ldr	r3, [pc, #148]	; (8000798 <whilelus+0xb8>)
 8000702:	881b      	ldrh	r3, [r3, #0]
 8000704:	429a      	cmp	r2, r3
 8000706:	d043      	beq.n	8000790 <whilelus+0xb0>
	{
		OldX = Xvalue;
 8000708:	4b24      	ldr	r3, [pc, #144]	; (800079c <whilelus+0xbc>)
 800070a:	881a      	ldrh	r2, [r3, #0]
 800070c:	4b25      	ldr	r3, [pc, #148]	; (80007a4 <whilelus+0xc4>)
 800070e:	801a      	strh	r2, [r3, #0]
		OldY = Yvalue;
 8000710:	4b21      	ldr	r3, [pc, #132]	; (8000798 <whilelus+0xb8>)
 8000712:	881a      	ldrh	r2, [r3, #0]
 8000714:	4b24      	ldr	r3, [pc, #144]	; (80007a8 <whilelus+0xc8>)
 8000716:	801a      	strh	r2, [r3, #0]
		ReadDevice(&device, &Xvalue, &Yvalue);
 8000718:	4a1f      	ldr	r2, [pc, #124]	; (8000798 <whilelus+0xb8>)
 800071a:	4920      	ldr	r1, [pc, #128]	; (800079c <whilelus+0xbc>)
 800071c:	4823      	ldr	r0, [pc, #140]	; (80007ac <whilelus+0xcc>)
 800071e:	f001 f9a5 	bl	8001a6c <ReadDevice>
		if(device != OldDevice)
 8000722:	4b22      	ldr	r3, [pc, #136]	; (80007ac <whilelus+0xcc>)
 8000724:	781a      	ldrb	r2, [r3, #0]
 8000726:	4b22      	ldr	r3, [pc, #136]	; (80007b0 <whilelus+0xd0>)
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	429a      	cmp	r2, r3
 800072c:	d00d      	beq.n	800074a <whilelus+0x6a>
		{
			OldDevice=device;
 800072e:	4b1f      	ldr	r3, [pc, #124]	; (80007ac <whilelus+0xcc>)
 8000730:	781a      	ldrb	r2, [r3, #0]
 8000732:	4b1f      	ldr	r3, [pc, #124]	; (80007b0 <whilelus+0xd0>)
 8000734:	701a      	strb	r2, [r3, #0]
			DevicePressed(&device);
 8000736:	481d      	ldr	r0, [pc, #116]	; (80007ac <whilelus+0xcc>)
 8000738:	f000 fb3e 	bl	8000db8 <DevicePressed>
			Xvalue = 160; Yvalue = 363; //randomwaarde waar geen knop op staat
 800073c:	4b17      	ldr	r3, [pc, #92]	; (800079c <whilelus+0xbc>)
 800073e:	22a0      	movs	r2, #160	; 0xa0
 8000740:	801a      	strh	r2, [r3, #0]
 8000742:	4b15      	ldr	r3, [pc, #84]	; (8000798 <whilelus+0xb8>)
 8000744:	f240 126b 	movw	r2, #363	; 0x16b
 8000748:	801a      	strh	r2, [r3, #0]
		}
		if(device != 0)
 800074a:	4b18      	ldr	r3, [pc, #96]	; (80007ac <whilelus+0xcc>)
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d01e      	beq.n	8000790 <whilelus+0xb0>
		{
			ReadButton(&button, &Xvalue, &Yvalue);
 8000752:	4a11      	ldr	r2, [pc, #68]	; (8000798 <whilelus+0xb8>)
 8000754:	4911      	ldr	r1, [pc, #68]	; (800079c <whilelus+0xbc>)
 8000756:	4817      	ldr	r0, [pc, #92]	; (80007b4 <whilelus+0xd4>)
 8000758:	f001 f9e2 	bl	8001b20 <ReadButton>
			if(button != 0 && aanraak != 0)
 800075c:	4b15      	ldr	r3, [pc, #84]	; (80007b4 <whilelus+0xd4>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d015      	beq.n	8000790 <whilelus+0xb0>
 8000764:	4b0e      	ldr	r3, [pc, #56]	; (80007a0 <whilelus+0xc0>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d011      	beq.n	8000790 <whilelus+0xb0>
			{
			buttonPressed(&device, &button, &aanraak, &Xvalue, &Yvalue);
 800076c:	4b0a      	ldr	r3, [pc, #40]	; (8000798 <whilelus+0xb8>)
 800076e:	9300      	str	r3, [sp, #0]
 8000770:	4b0a      	ldr	r3, [pc, #40]	; (800079c <whilelus+0xbc>)
 8000772:	4a0b      	ldr	r2, [pc, #44]	; (80007a0 <whilelus+0xc0>)
 8000774:	490f      	ldr	r1, [pc, #60]	; (80007b4 <whilelus+0xd4>)
 8000776:	480d      	ldr	r0, [pc, #52]	; (80007ac <whilelus+0xcc>)
 8000778:	f000 fc5a 	bl	8001030 <buttonPressed>
			Xvalue = 160; Yvalue = 363; //randomwaarde waar geen knop op staat
 800077c:	4b07      	ldr	r3, [pc, #28]	; (800079c <whilelus+0xbc>)
 800077e:	22a0      	movs	r2, #160	; 0xa0
 8000780:	801a      	strh	r2, [r3, #0]
 8000782:	4b05      	ldr	r3, [pc, #20]	; (8000798 <whilelus+0xb8>)
 8000784:	f240 126b 	movw	r2, #363	; 0x16b
 8000788:	801a      	strh	r2, [r3, #0]
			button=0;
 800078a:	4b0a      	ldr	r3, [pc, #40]	; (80007b4 <whilelus+0xd4>)
 800078c:	2200      	movs	r2, #0
 800078e:	701a      	strb	r2, [r3, #0]
			}
		}
	}
}
 8000790:	bf00      	nop
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	20000004 	.word	0x20000004
 800079c:	20000002 	.word	0x20000002
 80007a0:	2000280b 	.word	0x2000280b
 80007a4:	2000280c 	.word	0x2000280c
 80007a8:	2000280e 	.word	0x2000280e
 80007ac:	20002808 	.word	0x20002808
 80007b0:	20002809 	.word	0x20002809
 80007b4:	2000280a 	.word	0x2000280a

080007b8 <CS_HIGH>:
#define ILI9488_GREENYELLOW 	0xAFE5      /* 173, 255,  47 */
#define ILI9488_PINK        			0xF81F

/* Some Easy Functions */ 
void CS_HIGH() //High = The chip is not selected and not accessible pg23
{HAL_GPIO_WritePin(CS_Port, CS_Pin, 1);}
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	2201      	movs	r2, #1
 80007be:	2120      	movs	r1, #32
 80007c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007c4:	f002 fba6 	bl	8002f14 <HAL_GPIO_WritePin>
 80007c8:	bf00      	nop
 80007ca:	bd80      	pop	{r7, pc}

080007cc <CS_LOW>:
void CS_LOW()  //Low = The chip is selected and accessible pg23
{HAL_GPIO_WritePin(CS_Port, CS_Pin, 0);}
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	2200      	movs	r2, #0
 80007d2:	2120      	movs	r1, #32
 80007d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007d8:	f002 fb9c 	bl	8002f14 <HAL_GPIO_WritePin>
 80007dc:	bf00      	nop
 80007de:	bd80      	pop	{r7, pc}

080007e0 <DC_HIGH>:
void DC_HIGH() //High = Parameter pg23
{HAL_GPIO_WritePin(DC_Port, DC_Pin, 1);}
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
 80007e4:	2201      	movs	r2, #1
 80007e6:	2180      	movs	r1, #128	; 0x80
 80007e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ec:	f002 fb92 	bl	8002f14 <HAL_GPIO_WritePin>
 80007f0:	bf00      	nop
 80007f2:	bd80      	pop	{r7, pc}

080007f4 <DC_LOW>:
void DC_LOW()  //Low = command pg23
{HAL_GPIO_WritePin(DC_Port, DC_Pin, 0);}
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	2200      	movs	r2, #0
 80007fa:	2180      	movs	r1, #128	; 0x80
 80007fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000800:	f002 fb88 	bl	8002f14 <HAL_GPIO_WritePin>
 8000804:	bf00      	nop
 8000806:	bd80      	pop	{r7, pc}

08000808 <RST_HIGH>:
void RST_HIGH() 
{HAL_GPIO_WritePin(RST_Port, RST_Pin, 1);}
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
 800080c:	2201      	movs	r2, #1
 800080e:	2140      	movs	r1, #64	; 0x40
 8000810:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000814:	f002 fb7e 	bl	8002f14 <HAL_GPIO_WritePin>
 8000818:	bf00      	nop
 800081a:	bd80      	pop	{r7, pc}

0800081c <RST_LOW>:
void RST_LOW() //initialize with a low input pg23
{HAL_GPIO_WritePin(RST_Port, RST_Pin, 0);}
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
 8000820:	2200      	movs	r2, #0
 8000822:	2140      	movs	r1, #64	; 0x40
 8000824:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000828:	f002 fb74 	bl	8002f14 <HAL_GPIO_WritePin>
 800082c:	bf00      	nop
 800082e:	bd80      	pop	{r7, pc}

08000830 <DisplayBegin>:

//#define TIM_1us htim2

void DisplayBegin(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
	RST_LOW(); //initialize with a low input pg23
 8000834:	f7ff fff2 	bl	800081c <RST_LOW>
	HAL_Delay(500);
 8000838:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800083c:	f002 f8c2 	bl	80029c4 <HAL_Delay>
	RST_HIGH();
 8000840:	f7ff ffe2 	bl	8000808 <RST_HIGH>
	HAL_Delay(500);
 8000844:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000848:	f002 f8bc 	bl	80029c4 <HAL_Delay>
	writecommand(0xE0);
 800084c:	20e0      	movs	r0, #224	; 0xe0
 800084e:	f000 f8bf 	bl	80009d0 <writecommand>
	writedata(0x00);
 8000852:	2000      	movs	r0, #0
 8000854:	f000 f8d8 	bl	8000a08 <writedata>
	writedata(0x03);
 8000858:	2003      	movs	r0, #3
 800085a:	f000 f8d5 	bl	8000a08 <writedata>
	writedata(0x09);
 800085e:	2009      	movs	r0, #9
 8000860:	f000 f8d2 	bl	8000a08 <writedata>
	writedata(0x08);
 8000864:	2008      	movs	r0, #8
 8000866:	f000 f8cf 	bl	8000a08 <writedata>
	writedata(0x16);
 800086a:	2016      	movs	r0, #22
 800086c:	f000 f8cc 	bl	8000a08 <writedata>
	writedata(0x0A);
 8000870:	200a      	movs	r0, #10
 8000872:	f000 f8c9 	bl	8000a08 <writedata>
	writedata(0x3F);
 8000876:	203f      	movs	r0, #63	; 0x3f
 8000878:	f000 f8c6 	bl	8000a08 <writedata>
	writedata(0x78);
 800087c:	2078      	movs	r0, #120	; 0x78
 800087e:	f000 f8c3 	bl	8000a08 <writedata>
	writedata(0x4C);
 8000882:	204c      	movs	r0, #76	; 0x4c
 8000884:	f000 f8c0 	bl	8000a08 <writedata>
	writedata(0x09);
 8000888:	2009      	movs	r0, #9
 800088a:	f000 f8bd 	bl	8000a08 <writedata>
	writedata(0x0A);
 800088e:	200a      	movs	r0, #10
 8000890:	f000 f8ba 	bl	8000a08 <writedata>
	writedata(0x08);
 8000894:	2008      	movs	r0, #8
 8000896:	f000 f8b7 	bl	8000a08 <writedata>
	writedata(0x16);
 800089a:	2016      	movs	r0, #22
 800089c:	f000 f8b4 	bl	8000a08 <writedata>
	writedata(0x1A);
 80008a0:	201a      	movs	r0, #26
 80008a2:	f000 f8b1 	bl	8000a08 <writedata>
	writedata(0x0F);
 80008a6:	200f      	movs	r0, #15
 80008a8:	f000 f8ae 	bl	8000a08 <writedata>

	writecommand(0XE1);
 80008ac:	20e1      	movs	r0, #225	; 0xe1
 80008ae:	f000 f88f 	bl	80009d0 <writecommand>
	writedata(0x00);
 80008b2:	2000      	movs	r0, #0
 80008b4:	f000 f8a8 	bl	8000a08 <writedata>
	writedata(0x16);
 80008b8:	2016      	movs	r0, #22
 80008ba:	f000 f8a5 	bl	8000a08 <writedata>
	writedata(0x19);
 80008be:	2019      	movs	r0, #25
 80008c0:	f000 f8a2 	bl	8000a08 <writedata>
	writedata(0x03);
 80008c4:	2003      	movs	r0, #3
 80008c6:	f000 f89f 	bl	8000a08 <writedata>
	writedata(0x0F);
 80008ca:	200f      	movs	r0, #15
 80008cc:	f000 f89c 	bl	8000a08 <writedata>
	writedata(0x05);
 80008d0:	2005      	movs	r0, #5
 80008d2:	f000 f899 	bl	8000a08 <writedata>
	writedata(0x32);
 80008d6:	2032      	movs	r0, #50	; 0x32
 80008d8:	f000 f896 	bl	8000a08 <writedata>
	writedata(0x45);
 80008dc:	2045      	movs	r0, #69	; 0x45
 80008de:	f000 f893 	bl	8000a08 <writedata>
	writedata(0x46);
 80008e2:	2046      	movs	r0, #70	; 0x46
 80008e4:	f000 f890 	bl	8000a08 <writedata>
	writedata(0x04);
 80008e8:	2004      	movs	r0, #4
 80008ea:	f000 f88d 	bl	8000a08 <writedata>
	writedata(0x0E);
 80008ee:	200e      	movs	r0, #14
 80008f0:	f000 f88a 	bl	8000a08 <writedata>
	writedata(0x0D);
 80008f4:	200d      	movs	r0, #13
 80008f6:	f000 f887 	bl	8000a08 <writedata>
	writedata(0x35);
 80008fa:	2035      	movs	r0, #53	; 0x35
 80008fc:	f000 f884 	bl	8000a08 <writedata>
	writedata(0x37);
 8000900:	2037      	movs	r0, #55	; 0x37
 8000902:	f000 f881 	bl	8000a08 <writedata>
	writedata(0x0F);
 8000906:	200f      	movs	r0, #15
 8000908:	f000 f87e 	bl	8000a08 <writedata>

	writecommand(0XC0);      //Power Control 1 (pg 237)
 800090c:	20c0      	movs	r0, #192	; 0xc0
 800090e:	f000 f85f 	bl	80009d0 <writecommand>
							
	writedata(0x17);    //Vreg1out =  5V zie pg 237
 8000912:	2017      	movs	r0, #23
 8000914:	f000 f878 	bl	8000a08 <writedata>
	writedata(0x15);    //Verg2out = -4.87V zie pg 237
 8000918:	2015      	movs	r0, #21
 800091a:	f000 f875 	bl	8000a08 <writedata>
							//	Input voltage from the set-up circuit (-6 to -4.5V).
							
							//Op de DFR0669 staat een LevelShifter, zodat het op 5V werkt.
							

	writecommand(0xC1);      //Power Control 2 (pg 239)
 800091e:	20c1      	movs	r0, #193	; 0xc1
 8000920:	f000 f856 	bl	80009d0 <writecommand>
	writedata(0x41);    //VGH,VGL
 8000924:	2041      	movs	r0, #65	; 0x41
 8000926:	f000 f86f 	bl	8000a08 <writedata>
						// = 3'h1 = 001
						// 0100 0XXX 
						// 0100 0001 = 41h  (65 decimaal)
						

	writecommand(0xC5);      //VCOM control pg243
 800092a:	20c5      	movs	r0, #197	; 0xc5
 800092c:	f000 f850 	bl	80009d0 <writecommand>
	writedata(0x00);		 //1e parameter standaard 00h
 8000930:	2000      	movs	r0, #0
 8000932:	f000 f869 	bl	8000a08 <writedata>
	writedata(0x12);    	 //VCOM = -1.71    |VCOM| x 2 = VREG = 3.42V
 8000936:	2012      	movs	r0, #18
 8000938:	f000 f866 	bl	8000a08 <writedata>
	writedata(0x80);		// ? 
 800093c:	2080      	movs	r0, #128	; 0x80
 800093e:	f000 f863 	bl	8000a08 <writedata>

	writecommand(0x36);      //Memory Access pg192
 8000942:	2036      	movs	r0, #54	; 0x36
 8000944:	f000 f844 	bl	80009d0 <writecommand>
	writedata(0x48);		//MY = 0				//in vb 0x48
 8000948:	2048      	movs	r0, #72	; 0x48
 800094a:	f000 f85d 	bl	8000a08 <writedata>
							//ML = 0
							//BGR = 0
							//MH = 0
							//=0h

	writecommand(0x3A);		// Interface Pixel Format (RGB 565 standaard 3Ah pg123
 800094e:	203a      	movs	r0, #58	; 0x3a
 8000950:	f000 f83e 	bl	80009d0 <writecommand>
	writedata(0x66); 	  	//pg 200 --> 16bits/pixel = 55 (decimal = 85)
 8000954:	2066      	movs	r0, #102	; 0x66
 8000956:	f000 f857 	bl	8000a08 <writedata>
							//55 = 0101 0101

	writecommand(0XB0);      // Interface Mode Control pg219
 800095a:	20b0      	movs	r0, #176	; 0xb0
 800095c:	f000 f838 	bl	80009d0 <writecommand>
	writedata(0x80);     			 //SDO NOT USE
 8000960:	2080      	movs	r0, #128	; 0x80
 8000962:	f000 f851 	bl	8000a08 <writedata>
									//1000 0000
									//High enable for RGB interface,
									//data fetched at the rising time,
									//and low level sync clock
									
	writecommand(0xB1);      //Frame rate pg 221
 8000966:	20b1      	movs	r0, #177	; 0xb1
 8000968:	f000 f832 	bl	80009d0 <writecommand>
	writedata(0xA0);    //60Hz      NOG UITREKENEN
 800096c:	20a0      	movs	r0, #160	; 0xa0
 800096e:	f000 f84b 	bl	8000a08 <writedata>

	writecommand(0xB4);      //Display Inversion Control  pg 225
 8000972:	20b4      	movs	r0, #180	; 0xb4
 8000974:	f000 f82c 	bl	80009d0 <writecommand>
	writedata(0x02);    //2-dot inversion (standard)
 8000978:	2002      	movs	r0, #2
 800097a:	f000 f845 	bl	8000a08 <writedata>

	writecommand(0XB6); //Display Function Control  RGB/MCU Interface Control pg228
 800097e:	20b6      	movs	r0, #182	; 0xb6
 8000980:	f000 f826 	bl	80009d0 <writecommand>

	writedata(0x02);    //MCU // 1e parameter standard    question Bypass= Memory or Shift register? 
 8000984:	2002      	movs	r0, #2
 8000986:	f000 f83f 	bl	8000a08 <writedata>
	writedata(0x02);    //Source,Gate scan direction so frames at 84ms
 800098a:	2002      	movs	r0, #2
 800098c:	f000 f83c 	bl	8000a08 <writedata>

	writecommand(0XE9);      // Set Image Function pg271 
 8000990:	20e9      	movs	r0, #233	; 0xe9
 8000992:	f000 f81d 	bl	80009d0 <writecommand>
	writedata(0x00);    // Disable 24 bit data
 8000996:	2000      	movs	r0, #0
 8000998:	f000 f836 	bl	8000a08 <writedata>

	writecommand(0xF7);      // Adjust Control   pg 276
 800099c:	20f7      	movs	r0, #247	; 0xf7
 800099e:	f000 f817 	bl	80009d0 <writecommand>
	writedata(0xA9);  //standard 1e parameter
 80009a2:	20a9      	movs	r0, #169	; 0xa9
 80009a4:	f000 f830 	bl	8000a08 <writedata>
	writedata(0x51);  //standard 2e parameter
 80009a8:	2051      	movs	r0, #81	; 0x51
 80009aa:	f000 f82d 	bl	8000a08 <writedata>
	writedata(0x2C);  //standard 3e parameter
 80009ae:	202c      	movs	r0, #44	; 0x2c
 80009b0:	f000 f82a 	bl	8000a08 <writedata>
	writedata(0x82);    // D7 stream, loose   //standard 4e parameter
 80009b4:	2082      	movs	r0, #130	; 0x82
 80009b6:	f000 f827 	bl	8000a08 <writedata>

	writecommand(Display_ExitSleep);    //Exit Sleep
 80009ba:	2011      	movs	r0, #17
 80009bc:	f000 f808 	bl	80009d0 <writecommand>

	HAL_Delay(120);
 80009c0:	2078      	movs	r0, #120	; 0x78
 80009c2:	f001 ffff 	bl	80029c4 <HAL_Delay>

	writecommand(Display_On);    //Display on
 80009c6:	2029      	movs	r0, #41	; 0x29
 80009c8:	f000 f802 	bl	80009d0 <writecommand>


	
}
 80009cc:	bf00      	nop
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <writecommand>:

void writecommand(uint8_t cmdo)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	4603      	mov	r3, r0
 80009d8:	71fb      	strb	r3, [r7, #7]
	uint8_t commando = cmdo;
 80009da:	79fb      	ldrb	r3, [r7, #7]
 80009dc:	73fb      	strb	r3, [r7, #15]
	DC_LOW(); //Low = command pg23
 80009de:	f7ff ff09 	bl	80007f4 <DC_LOW>
	CS_LOW(); //The chip is selected and accessible pg23
 80009e2:	f7ff fef3 	bl	80007cc <CS_LOW>
	HAL_SPI_Transmit(&mySPI, &commando, 1, HAL_MAX_DELAY); //Size = bytes
 80009e6:	f107 010f 	add.w	r1, r7, #15
 80009ea:	f04f 33ff 	mov.w	r3, #4294967295
 80009ee:	2201      	movs	r2, #1
 80009f0:	4804      	ldr	r0, [pc, #16]	; (8000a04 <writecommand+0x34>)
 80009f2:	f004 ffe6 	bl	80059c2 <HAL_SPI_Transmit>
	CS_HIGH(); //The chip is not selected and not accessible pg23
 80009f6:	f7ff fedf 	bl	80007b8 <CS_HIGH>
	


}
 80009fa:	bf00      	nop
 80009fc:	3710      	adds	r7, #16
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	20002c64 	.word	0x20002c64

08000a08 <writedata>:
void writedata(uint8_t dta )
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	71fb      	strb	r3, [r7, #7]
	uint8_t data = dta;
 8000a12:	79fb      	ldrb	r3, [r7, #7]
 8000a14:	73fb      	strb	r3, [r7, #15]
	DC_HIGH(); //High = Parameter pg23
 8000a16:	f7ff fee3 	bl	80007e0 <DC_HIGH>
	CS_LOW(); //The chip is selected and accessible pg23
 8000a1a:	f7ff fed7 	bl	80007cc <CS_LOW>
	HAL_SPI_Transmit(&mySPI, &data, 1, HAL_MAX_DELAY); //Size = bytes
 8000a1e:	f107 010f 	add.w	r1, r7, #15
 8000a22:	f04f 33ff 	mov.w	r3, #4294967295
 8000a26:	2201      	movs	r2, #1
 8000a28:	4804      	ldr	r0, [pc, #16]	; (8000a3c <writedata+0x34>)
 8000a2a:	f004 ffca 	bl	80059c2 <HAL_SPI_Transmit>
	CS_HIGH(); //The chip is not selected and not accessible pg23
 8000a2e:	f7ff fec3 	bl	80007b8 <CS_HIGH>
	//als ik het scherm uitschakel, krijg ik ook geen errors
	//wel leuk om optimistisch te zijn, maar dit doet niks
	//uint8_t StateSpiHulp = HAL_SPI_GetState(&hspi2);
	//uint8_t ErrorSpiHulp = HAL_SPI_GetError(&hspi2);
	//printf("    data: 0x %x Spi_State:%d Error: %d\r\n", dta, StateSpiHulp, ErrorSpiHulp);
}
 8000a32:	bf00      	nop
 8000a34:	3710      	adds	r7, #16
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20002c64 	.word	0x20002c64

08000a40 <setAddrWindow>:
void setAddrWindow(uint16_t x0,uint16_t y0,uint16_t x1,uint16_t y1)
{
 8000a40:	b590      	push	{r4, r7, lr}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	4604      	mov	r4, r0
 8000a48:	4608      	mov	r0, r1
 8000a4a:	4611      	mov	r1, r2
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	4623      	mov	r3, r4
 8000a50:	80fb      	strh	r3, [r7, #6]
 8000a52:	4603      	mov	r3, r0
 8000a54:	80bb      	strh	r3, [r7, #4]
 8000a56:	460b      	mov	r3, r1
 8000a58:	807b      	strh	r3, [r7, #2]
 8000a5a:	4613      	mov	r3, r2
 8000a5c:	803b      	strh	r3, [r7, #0]
	//pg 175 -> Column Address Set = 2Ah
	writecommand(0x2A);
 8000a5e:	202a      	movs	r0, #42	; 0x2a
 8000a60:	f7ff ffb6 	bl	80009d0 <writecommand>
	
	writedata(x0 >> 8); //?
 8000a64:	88fb      	ldrh	r3, [r7, #6]
 8000a66:	0a1b      	lsrs	r3, r3, #8
 8000a68:	b29b      	uxth	r3, r3
 8000a6a:	b2db      	uxtb	r3, r3
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f7ff ffcb 	bl	8000a08 <writedata>
	writedata(x0 & 0xFF);     // XSTART ?
 8000a72:	88fb      	ldrh	r3, [r7, #6]
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	4618      	mov	r0, r3
 8000a78:	f7ff ffc6 	bl	8000a08 <writedata>
	writedata(x1 >> 8); //?
 8000a7c:	887b      	ldrh	r3, [r7, #2]
 8000a7e:	0a1b      	lsrs	r3, r3, #8
 8000a80:	b29b      	uxth	r3, r3
 8000a82:	b2db      	uxtb	r3, r3
 8000a84:	4618      	mov	r0, r3
 8000a86:	f7ff ffbf 	bl	8000a08 <writedata>
	writedata(x1 & 0xFF);     // XEND //?
 8000a8a:	887b      	ldrh	r3, [r7, #2]
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f7ff ffba 	bl	8000a08 <writedata>
	
	//pg 177 -> Page Address Set = 2Bh = Row Address Set 
	writecommand(0x2B); // Row addr set
 8000a94:	202b      	movs	r0, #43	; 0x2b
 8000a96:	f7ff ff9b 	bl	80009d0 <writecommand>
	writedata(y0 >> 8); //?
 8000a9a:	88bb      	ldrh	r3, [r7, #4]
 8000a9c:	0a1b      	lsrs	r3, r3, #8
 8000a9e:	b29b      	uxth	r3, r3
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f7ff ffb0 	bl	8000a08 <writedata>
	writedata(y0 & 0xff);     // YSTART   ?
 8000aa8:	88bb      	ldrh	r3, [r7, #4]
 8000aaa:	b2db      	uxtb	r3, r3
 8000aac:	4618      	mov	r0, r3
 8000aae:	f7ff ffab 	bl	8000a08 <writedata>
	writedata(y1 >> 8); // ?
 8000ab2:	883b      	ldrh	r3, [r7, #0]
 8000ab4:	0a1b      	lsrs	r3, r3, #8
 8000ab6:	b29b      	uxth	r3, r3
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	4618      	mov	r0, r3
 8000abc:	f7ff ffa4 	bl	8000a08 <writedata>
	writedata(y1 & 0xff);     // YEND //?
 8000ac0:	883b      	ldrh	r3, [r7, #0]
 8000ac2:	b2db      	uxtb	r3, r3
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f7ff ff9f 	bl	8000a08 <writedata>
	writecommand(Display_Write_To_RAM);
 8000aca:	202c      	movs	r0, #44	; 0x2c
 8000acc:	f7ff ff80 	bl	80009d0 <writecommand>
	
}
 8000ad0:	bf00      	nop
 8000ad2:	370c      	adds	r7, #12
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd90      	pop	{r4, r7, pc}

08000ad8 <drawPixel>:
void drawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	80fb      	strh	r3, [r7, #6]
 8000ae2:	460b      	mov	r3, r1
 8000ae4:	80bb      	strh	r3, [r7, #4]
 8000ae6:	4613      	mov	r3, r2
 8000ae8:	807b      	strh	r3, [r7, #2]
	setAddrWindow(x, y, x + 1, y + 1);
 8000aea:	88fb      	ldrh	r3, [r7, #6]
 8000aec:	3301      	adds	r3, #1
 8000aee:	b29a      	uxth	r2, r3
 8000af0:	88bb      	ldrh	r3, [r7, #4]
 8000af2:	3301      	adds	r3, #1
 8000af4:	b29b      	uxth	r3, r3
 8000af6:	88b9      	ldrh	r1, [r7, #4]
 8000af8:	88f8      	ldrh	r0, [r7, #6]
 8000afa:	f7ff ffa1 	bl	8000a40 <setAddrWindow>
	DC_HIGH();
 8000afe:	f7ff fe6f 	bl	80007e0 <DC_HIGH>
	CS_LOW();
 8000b02:	f7ff fe63 	bl	80007cc <CS_LOW>
	write16BitColor(color);
 8000b06:	887b      	ldrh	r3, [r7, #2]
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f000 f806 	bl	8000b1a <write16BitColor>
	CS_HIGH();
 8000b0e:	f7ff fe53 	bl	80007b8 <CS_HIGH>
}
 8000b12:	bf00      	nop
 8000b14:	3708      	adds	r7, #8
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}

08000b1a <write16BitColor>:
void DrawVolumebuttonDown()
{

}

void write16BitColor(uint16_t color){
 8000b1a:	b580      	push	{r7, lr}
 8000b1c:	b084      	sub	sp, #16
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	4603      	mov	r3, r0
 8000b22:	80fb      	strh	r3, [r7, #6]
	//565  = rrrr rggg gggb bbbb
	//F800 = 1111 1000 0000 0000 //11 nullekes
	//07E0 = 0000 0111 1110 0000 //5 nulleks
	//001F = 0000 0000 0001 1111
	 uint8_t r = (color >> 8) & 0Xf8; //& 0xF800) >> 11;
 8000b24:	88fb      	ldrh	r3, [r7, #6]
 8000b26:	0a1b      	lsrs	r3, r3, #8
 8000b28:	b29b      	uxth	r3, r3
 8000b2a:	b2db      	uxtb	r3, r3
 8000b2c:	f023 0307 	bic.w	r3, r3, #7
 8000b30:	73fb      	strb	r3, [r7, #15]
	 uint8_t g = (color >> 3) & 0Xfc; //& 0x07E0) >> 5;
 8000b32:	88fb      	ldrh	r3, [r7, #6]
 8000b34:	08db      	lsrs	r3, r3, #3
 8000b36:	b29b      	uxth	r3, r3
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	f023 0303 	bic.w	r3, r3, #3
 8000b3e:	73bb      	strb	r3, [r7, #14]
	 uint8_t b = (color <<3); //& 0x001F;
 8000b40:	88fb      	ldrh	r3, [r7, #6]
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	00db      	lsls	r3, r3, #3
 8000b46:	737b      	strb	r3, [r7, #13]
	 //2^6 = 64  (0 tot 63)
	 //2^5 = 32 (0 tot 31)
	  //r = (r * 255) / 31;
	  //g = (g * 255) / 63;
	  //b = (b * 255) / 31;
	 writedata(r);
 8000b48:	7bfb      	ldrb	r3, [r7, #15]
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f7ff ff5c 	bl	8000a08 <writedata>
	 writedata(g);
 8000b50:	7bbb      	ldrb	r3, [r7, #14]
 8000b52:	4618      	mov	r0, r3
 8000b54:	f7ff ff58 	bl	8000a08 <writedata>
	 writedata(b);
 8000b58:	7b7b      	ldrb	r3, [r7, #13]
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f7ff ff54 	bl	8000a08 <writedata>
	  //HAL_SPI_Transmit(&mySPI, &r, 1, HAL_MAX_DELAY); //Size = bytes
	  //HAL_SPI_Transmit(&mySPI, &g, 1, HAL_MAX_DELAY); //Size = bytes
	  //HAL_SPI_Transmit(&mySPI, &b, 1, HAL_MAX_DELAY); //Size = bytes
}
 8000b60:	bf00      	nop
 8000b62:	3710      	adds	r7, #16
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <DrawRectangle>:



}
void DrawRectangle(uint16_t x, uint16_t y, uint16_t h, uint16_t w, uint16_t color, uint16_t contentcolor, uint8_t border)
{
 8000b68:	b590      	push	{r4, r7, lr}
 8000b6a:	b089      	sub	sp, #36	; 0x24
 8000b6c:	af02      	add	r7, sp, #8
 8000b6e:	4604      	mov	r4, r0
 8000b70:	4608      	mov	r0, r1
 8000b72:	4611      	mov	r1, r2
 8000b74:	461a      	mov	r2, r3
 8000b76:	4623      	mov	r3, r4
 8000b78:	80fb      	strh	r3, [r7, #6]
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	80bb      	strh	r3, [r7, #4]
 8000b7e:	460b      	mov	r3, r1
 8000b80:	807b      	strh	r3, [r7, #2]
 8000b82:	4613      	mov	r3, r2
 8000b84:	803b      	strh	r3, [r7, #0]


	//lijntje horizontaal 1
	for(uint8_t j = 0; j <= border; j++)
 8000b86:	2300      	movs	r3, #0
 8000b88:	75fb      	strb	r3, [r7, #23]
 8000b8a:	e018      	b.n	8000bbe <DrawRectangle+0x56>
	{
		for(uint16_t i = x; i <= (x+w); i++)
 8000b8c:	88fb      	ldrh	r3, [r7, #6]
 8000b8e:	82bb      	strh	r3, [r7, #20]
 8000b90:	e00c      	b.n	8000bac <DrawRectangle+0x44>
		{
			drawPixel(i, y+j, color);
 8000b92:	7dfb      	ldrb	r3, [r7, #23]
 8000b94:	b29a      	uxth	r2, r3
 8000b96:	88bb      	ldrh	r3, [r7, #4]
 8000b98:	4413      	add	r3, r2
 8000b9a:	b299      	uxth	r1, r3
 8000b9c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000b9e:	8abb      	ldrh	r3, [r7, #20]
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff ff99 	bl	8000ad8 <drawPixel>
		for(uint16_t i = x; i <= (x+w); i++)
 8000ba6:	8abb      	ldrh	r3, [r7, #20]
 8000ba8:	3301      	adds	r3, #1
 8000baa:	82bb      	strh	r3, [r7, #20]
 8000bac:	8aba      	ldrh	r2, [r7, #20]
 8000bae:	88f9      	ldrh	r1, [r7, #6]
 8000bb0:	883b      	ldrh	r3, [r7, #0]
 8000bb2:	440b      	add	r3, r1
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	ddec      	ble.n	8000b92 <DrawRectangle+0x2a>
	for(uint8_t j = 0; j <= border; j++)
 8000bb8:	7dfb      	ldrb	r3, [r7, #23]
 8000bba:	3301      	adds	r3, #1
 8000bbc:	75fb      	strb	r3, [r7, #23]
 8000bbe:	7dfa      	ldrb	r2, [r7, #23]
 8000bc0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	d9e1      	bls.n	8000b8c <DrawRectangle+0x24>
		}
	}

//lijntje verticaal 1
for(uint8_t j = 0; j <= border; j++)
 8000bc8:	2300      	movs	r3, #0
 8000bca:	74fb      	strb	r3, [r7, #19]
 8000bcc:	e018      	b.n	8000c00 <DrawRectangle+0x98>
{
	for(uint16_t i = y; i <= (y+h); i++)
 8000bce:	88bb      	ldrh	r3, [r7, #4]
 8000bd0:	823b      	strh	r3, [r7, #16]
 8000bd2:	e00c      	b.n	8000bee <DrawRectangle+0x86>
	{
		drawPixel(x+j, i, color);
 8000bd4:	7cfb      	ldrb	r3, [r7, #19]
 8000bd6:	b29a      	uxth	r2, r3
 8000bd8:	88fb      	ldrh	r3, [r7, #6]
 8000bda:	4413      	add	r3, r2
 8000bdc:	b29b      	uxth	r3, r3
 8000bde:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000be0:	8a39      	ldrh	r1, [r7, #16]
 8000be2:	4618      	mov	r0, r3
 8000be4:	f7ff ff78 	bl	8000ad8 <drawPixel>
	for(uint16_t i = y; i <= (y+h); i++)
 8000be8:	8a3b      	ldrh	r3, [r7, #16]
 8000bea:	3301      	adds	r3, #1
 8000bec:	823b      	strh	r3, [r7, #16]
 8000bee:	8a3a      	ldrh	r2, [r7, #16]
 8000bf0:	88b9      	ldrh	r1, [r7, #4]
 8000bf2:	887b      	ldrh	r3, [r7, #2]
 8000bf4:	440b      	add	r3, r1
 8000bf6:	429a      	cmp	r2, r3
 8000bf8:	ddec      	ble.n	8000bd4 <DrawRectangle+0x6c>
for(uint8_t j = 0; j <= border; j++)
 8000bfa:	7cfb      	ldrb	r3, [r7, #19]
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	74fb      	strb	r3, [r7, #19]
 8000c00:	7cfa      	ldrb	r2, [r7, #19]
 8000c02:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000c06:	429a      	cmp	r2, r3
 8000c08:	d9e1      	bls.n	8000bce <DrawRectangle+0x66>
	}
}
//lijntje verticaal 2
for(uint8_t j = 0; j <= border; j++)
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	73fb      	strb	r3, [r7, #15]
 8000c0e:	e01b      	b.n	8000c48 <DrawRectangle+0xe0>
{
	for(uint16_t i = y; i <= (y+h); i++)
 8000c10:	88bb      	ldrh	r3, [r7, #4]
 8000c12:	81bb      	strh	r3, [r7, #12]
 8000c14:	e00f      	b.n	8000c36 <DrawRectangle+0xce>
	{
		drawPixel((x+w)-j, i, color);
 8000c16:	88fa      	ldrh	r2, [r7, #6]
 8000c18:	883b      	ldrh	r3, [r7, #0]
 8000c1a:	4413      	add	r3, r2
 8000c1c:	b29a      	uxth	r2, r3
 8000c1e:	7bfb      	ldrb	r3, [r7, #15]
 8000c20:	b29b      	uxth	r3, r3
 8000c22:	1ad3      	subs	r3, r2, r3
 8000c24:	b29b      	uxth	r3, r3
 8000c26:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000c28:	89b9      	ldrh	r1, [r7, #12]
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f7ff ff54 	bl	8000ad8 <drawPixel>
	for(uint16_t i = y; i <= (y+h); i++)
 8000c30:	89bb      	ldrh	r3, [r7, #12]
 8000c32:	3301      	adds	r3, #1
 8000c34:	81bb      	strh	r3, [r7, #12]
 8000c36:	89ba      	ldrh	r2, [r7, #12]
 8000c38:	88b9      	ldrh	r1, [r7, #4]
 8000c3a:	887b      	ldrh	r3, [r7, #2]
 8000c3c:	440b      	add	r3, r1
 8000c3e:	429a      	cmp	r2, r3
 8000c40:	dde9      	ble.n	8000c16 <DrawRectangle+0xae>
for(uint8_t j = 0; j <= border; j++)
 8000c42:	7bfb      	ldrb	r3, [r7, #15]
 8000c44:	3301      	adds	r3, #1
 8000c46:	73fb      	strb	r3, [r7, #15]
 8000c48:	7bfa      	ldrb	r2, [r7, #15]
 8000c4a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000c4e:	429a      	cmp	r2, r3
 8000c50:	d9de      	bls.n	8000c10 <DrawRectangle+0xa8>
	}
}

//lijntje horizontaal 2
for(uint8_t j = 0; j <= border; j++)
 8000c52:	2300      	movs	r3, #0
 8000c54:	72fb      	strb	r3, [r7, #11]
 8000c56:	e01b      	b.n	8000c90 <DrawRectangle+0x128>
{
	for(uint16_t i = x; i <= (x+w); i++)
 8000c58:	88fb      	ldrh	r3, [r7, #6]
 8000c5a:	813b      	strh	r3, [r7, #8]
 8000c5c:	e00f      	b.n	8000c7e <DrawRectangle+0x116>
	{
		drawPixel(i, (y+h)-j, color);
 8000c5e:	88ba      	ldrh	r2, [r7, #4]
 8000c60:	887b      	ldrh	r3, [r7, #2]
 8000c62:	4413      	add	r3, r2
 8000c64:	b29a      	uxth	r2, r3
 8000c66:	7afb      	ldrb	r3, [r7, #11]
 8000c68:	b29b      	uxth	r3, r3
 8000c6a:	1ad3      	subs	r3, r2, r3
 8000c6c:	b299      	uxth	r1, r3
 8000c6e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000c70:	893b      	ldrh	r3, [r7, #8]
 8000c72:	4618      	mov	r0, r3
 8000c74:	f7ff ff30 	bl	8000ad8 <drawPixel>
	for(uint16_t i = x; i <= (x+w); i++)
 8000c78:	893b      	ldrh	r3, [r7, #8]
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	813b      	strh	r3, [r7, #8]
 8000c7e:	893a      	ldrh	r2, [r7, #8]
 8000c80:	88f9      	ldrh	r1, [r7, #6]
 8000c82:	883b      	ldrh	r3, [r7, #0]
 8000c84:	440b      	add	r3, r1
 8000c86:	429a      	cmp	r2, r3
 8000c88:	dde9      	ble.n	8000c5e <DrawRectangle+0xf6>
for(uint8_t j = 0; j <= border; j++)
 8000c8a:	7afb      	ldrb	r3, [r7, #11]
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	72fb      	strb	r3, [r7, #11]
 8000c90:	7afa      	ldrb	r2, [r7, #11]
 8000c92:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000c96:	429a      	cmp	r2, r3
 8000c98:	d9de      	bls.n	8000c58 <DrawRectangle+0xf0>
	}
}
//contentcolor
fillRect(x+border, y+border, w-(border*2), h-(border*2), contentcolor);
 8000c9a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000c9e:	b29a      	uxth	r2, r3
 8000ca0:	88fb      	ldrh	r3, [r7, #6]
 8000ca2:	4413      	add	r3, r2
 8000ca4:	b298      	uxth	r0, r3
 8000ca6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000caa:	b29a      	uxth	r2, r3
 8000cac:	88bb      	ldrh	r3, [r7, #4]
 8000cae:	4413      	add	r3, r2
 8000cb0:	b299      	uxth	r1, r3
 8000cb2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000cb6:	b29b      	uxth	r3, r3
 8000cb8:	005b      	lsls	r3, r3, #1
 8000cba:	b29b      	uxth	r3, r3
 8000cbc:	883a      	ldrh	r2, [r7, #0]
 8000cbe:	1ad3      	subs	r3, r2, r3
 8000cc0:	b29c      	uxth	r4, r3
 8000cc2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000cc6:	b29b      	uxth	r3, r3
 8000cc8:	005b      	lsls	r3, r3, #1
 8000cca:	b29b      	uxth	r3, r3
 8000ccc:	887a      	ldrh	r2, [r7, #2]
 8000cce:	1ad3      	subs	r3, r2, r3
 8000cd0:	b29a      	uxth	r2, r3
 8000cd2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000cd4:	9300      	str	r3, [sp, #0]
 8000cd6:	4613      	mov	r3, r2
 8000cd8:	4622      	mov	r2, r4
 8000cda:	f000 f805 	bl	8000ce8 <fillRect>



}
 8000cde:	bf00      	nop
 8000ce0:	371c      	adds	r7, #28
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd90      	pop	{r4, r7, pc}
	...

08000ce8 <fillRect>:
void fillRect(uint16_t x, uint16_t y , uint16_t w , uint16_t h, uint16_t color)
{
 8000ce8:	b590      	push	{r4, r7, lr}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4608      	mov	r0, r1
 8000cf2:	4611      	mov	r1, r2
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	4623      	mov	r3, r4
 8000cf8:	80fb      	strh	r3, [r7, #6]
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	80bb      	strh	r3, [r7, #4]
 8000cfe:	460b      	mov	r3, r1
 8000d00:	807b      	strh	r3, [r7, #2]
 8000d02:	4613      	mov	r3, r2
 8000d04:	803b      	strh	r3, [r7, #0]
	if ((x >= Display_width) || (y >= Display_height))
 8000d06:	4b2a      	ldr	r3, [pc, #168]	; (8000db0 <fillRect+0xc8>)
 8000d08:	881b      	ldrh	r3, [r3, #0]
 8000d0a:	88fa      	ldrh	r2, [r7, #6]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d24a      	bcs.n	8000da6 <fillRect+0xbe>
 8000d10:	4b28      	ldr	r3, [pc, #160]	; (8000db4 <fillRect+0xcc>)
 8000d12:	881b      	ldrh	r3, [r3, #0]
 8000d14:	88ba      	ldrh	r2, [r7, #4]
 8000d16:	429a      	cmp	r2, r3
 8000d18:	d245      	bcs.n	8000da6 <fillRect+0xbe>
		return;
	if ((x + w - 1) >= Display_width)
 8000d1a:	88fa      	ldrh	r2, [r7, #6]
 8000d1c:	887b      	ldrh	r3, [r7, #2]
 8000d1e:	4413      	add	r3, r2
 8000d20:	4a23      	ldr	r2, [pc, #140]	; (8000db0 <fillRect+0xc8>)
 8000d22:	8812      	ldrh	r2, [r2, #0]
 8000d24:	4293      	cmp	r3, r2
 8000d26:	dd04      	ble.n	8000d32 <fillRect+0x4a>
		w = Display_width - x;
 8000d28:	4b21      	ldr	r3, [pc, #132]	; (8000db0 <fillRect+0xc8>)
 8000d2a:	881a      	ldrh	r2, [r3, #0]
 8000d2c:	88fb      	ldrh	r3, [r7, #6]
 8000d2e:	1ad3      	subs	r3, r2, r3
 8000d30:	807b      	strh	r3, [r7, #2]
	if ((y + h - 1) >= Display_height)
 8000d32:	88ba      	ldrh	r2, [r7, #4]
 8000d34:	883b      	ldrh	r3, [r7, #0]
 8000d36:	4413      	add	r3, r2
 8000d38:	4a1e      	ldr	r2, [pc, #120]	; (8000db4 <fillRect+0xcc>)
 8000d3a:	8812      	ldrh	r2, [r2, #0]
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	dd04      	ble.n	8000d4a <fillRect+0x62>
		h = Display_height - y;
 8000d40:	4b1c      	ldr	r3, [pc, #112]	; (8000db4 <fillRect+0xcc>)
 8000d42:	881a      	ldrh	r2, [r3, #0]
 8000d44:	88bb      	ldrh	r3, [r7, #4]
 8000d46:	1ad3      	subs	r3, r2, r3
 8000d48:	803b      	strh	r3, [r7, #0]

	setAddrWindow(x, y, x + w - 1, y + h - 1);
 8000d4a:	88fa      	ldrh	r2, [r7, #6]
 8000d4c:	887b      	ldrh	r3, [r7, #2]
 8000d4e:	4413      	add	r3, r2
 8000d50:	b29b      	uxth	r3, r3
 8000d52:	3b01      	subs	r3, #1
 8000d54:	b29c      	uxth	r4, r3
 8000d56:	88ba      	ldrh	r2, [r7, #4]
 8000d58:	883b      	ldrh	r3, [r7, #0]
 8000d5a:	4413      	add	r3, r2
 8000d5c:	b29b      	uxth	r3, r3
 8000d5e:	3b01      	subs	r3, #1
 8000d60:	b29b      	uxth	r3, r3
 8000d62:	88b9      	ldrh	r1, [r7, #4]
 8000d64:	88f8      	ldrh	r0, [r7, #6]
 8000d66:	4622      	mov	r2, r4
 8000d68:	f7ff fe6a 	bl	8000a40 <setAddrWindow>

	DC_HIGH();
 8000d6c:	f7ff fd38 	bl	80007e0 <DC_HIGH>
	CS_LOW();
 8000d70:	f7ff fd2c 	bl	80007cc <CS_LOW>

	for (y = h; y > 0; y--) {
 8000d74:	883b      	ldrh	r3, [r7, #0]
 8000d76:	80bb      	strh	r3, [r7, #4]
 8000d78:	e00f      	b.n	8000d9a <fillRect+0xb2>
		for (x = w; x > 0; x--) {
 8000d7a:	887b      	ldrh	r3, [r7, #2]
 8000d7c:	80fb      	strh	r3, [r7, #6]
 8000d7e:	e006      	b.n	8000d8e <fillRect+0xa6>

			write16BitColor(color);
 8000d80:	8b3b      	ldrh	r3, [r7, #24]
 8000d82:	4618      	mov	r0, r3
 8000d84:	f7ff fec9 	bl	8000b1a <write16BitColor>
		for (x = w; x > 0; x--) {
 8000d88:	88fb      	ldrh	r3, [r7, #6]
 8000d8a:	3b01      	subs	r3, #1
 8000d8c:	80fb      	strh	r3, [r7, #6]
 8000d8e:	88fb      	ldrh	r3, [r7, #6]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d1f5      	bne.n	8000d80 <fillRect+0x98>
	for (y = h; y > 0; y--) {
 8000d94:	88bb      	ldrh	r3, [r7, #4]
 8000d96:	3b01      	subs	r3, #1
 8000d98:	80bb      	strh	r3, [r7, #4]
 8000d9a:	88bb      	ldrh	r3, [r7, #4]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d1ec      	bne.n	8000d7a <fillRect+0x92>
		}
	}

	CS_HIGH();
 8000da0:	f7ff fd0a 	bl	80007b8 <CS_HIGH>
 8000da4:	e000      	b.n	8000da8 <fillRect+0xc0>
		return;
 8000da6:	bf00      	nop



}
 8000da8:	370c      	adds	r7, #12
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd90      	pop	{r4, r7, pc}
 8000dae:	bf00      	nop
 8000db0:	20000006 	.word	0x20000006
 8000db4:	20000008 	.word	0x20000008

08000db8 <DevicePressed>:


void DevicePressed(uint8_t *apparaat)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b088      	sub	sp, #32
 8000dbc:	af04      	add	r7, sp, #16
 8000dbe:	6078      	str	r0, [r7, #4]
	uint16_t color;
	uint16_t contentcolor;
	uint8_t device = *apparaat;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	72bb      	strb	r3, [r7, #10]
	switch(device)
 8000dc6:	7abb      	ldrb	r3, [r7, #10]
 8000dc8:	3b01      	subs	r3, #1
 8000dca:	2b03      	cmp	r3, #3
 8000dcc:	d819      	bhi.n	8000e02 <DevicePressed+0x4a>
 8000dce:	a201      	add	r2, pc, #4	; (adr r2, 8000dd4 <DevicePressed+0x1c>)
 8000dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dd4:	08000de5 	.word	0x08000de5
 8000dd8:	08000deb 	.word	0x08000deb
 8000ddc:	08000df3 	.word	0x08000df3
 8000de0:	08000dfb 	.word	0x08000dfb
	{
	case 1:
		color = ILI9488_BLUE;
 8000de4:	231f      	movs	r3, #31
 8000de6:	81fb      	strh	r3, [r7, #14]
		break;
 8000de8:	e00c      	b.n	8000e04 <DevicePressed+0x4c>
	case 2:
		color = ILI9488_YELLOW;
 8000dea:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000dee:	81fb      	strh	r3, [r7, #14]
		break;
 8000df0:	e008      	b.n	8000e04 <DevicePressed+0x4c>
	case 3:
		color = ILI9488_GREEN;
 8000df2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000df6:	81fb      	strh	r3, [r7, #14]
		break;
 8000df8:	e004      	b.n	8000e04 <DevicePressed+0x4c>
	case 4:
		color = ILI9488_WHITE;
 8000dfa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dfe:	81fb      	strh	r3, [r7, #14]
		break;
 8000e00:	e000      	b.n	8000e04 <DevicePressed+0x4c>
	default:
		break;
 8000e02:	bf00      	nop
	}
	for(uint8_t knop = 1; knop <= 14; knop++)
 8000e04:	2301      	movs	r3, #1
 8000e06:	72fb      	strb	r3, [r7, #11]
 8000e08:	e107      	b.n	800101a <DevicePressed+0x262>
	{
		if(knop <= 12)
 8000e0a:	7afb      	ldrb	r3, [r7, #11]
 8000e0c:	2b0c      	cmp	r3, #12
 8000e0e:	d81d      	bhi.n	8000e4c <DevicePressed+0x94>
		{
			uint8_t berekening = ((device-1) * 12) + knop-1 ;
 8000e10:	7abb      	ldrb	r3, [r7, #10]
 8000e12:	461a      	mov	r2, r3
 8000e14:	0052      	lsls	r2, r2, #1
 8000e16:	4413      	add	r3, r2
 8000e18:	009b      	lsls	r3, r3, #2
 8000e1a:	b2da      	uxtb	r2, r3
 8000e1c:	7afb      	ldrb	r3, [r7, #11]
 8000e1e:	4413      	add	r3, r2
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	3b0d      	subs	r3, #13
 8000e24:	727b      	strb	r3, [r7, #9]
			if(lengte_signaal[berekening] != 0)
 8000e26:	7a7b      	ldrb	r3, [r7, #9]
 8000e28:	4a80      	ldr	r2, [pc, #512]	; (800102c <DevicePressed+0x274>)
 8000e2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d00a      	beq.n	8000e48 <DevicePressed+0x90>
			{
				if(knop == 1)
 8000e32:	7afb      	ldrb	r3, [r7, #11]
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d103      	bne.n	8000e40 <DevicePressed+0x88>
				{
					contentcolor = ILI9488_RED;
 8000e38:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000e3c:	81bb      	strh	r3, [r7, #12]
 8000e3e:	e005      	b.n	8000e4c <DevicePressed+0x94>
				}
				else
				{
					contentcolor = ILI9488_DARKGREY;
 8000e40:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8000e44:	81bb      	strh	r3, [r7, #12]
 8000e46:	e001      	b.n	8000e4c <DevicePressed+0x94>
				}

			}
			else
			{
			contentcolor = ILI9488_BLACK;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	81bb      	strh	r3, [r7, #12]
			}
		}
		switch(knop)
 8000e4c:	7afb      	ldrb	r3, [r7, #11]
 8000e4e:	3b01      	subs	r3, #1
 8000e50:	2b0d      	cmp	r3, #13
 8000e52:	f200 80de 	bhi.w	8001012 <DevicePressed+0x25a>
 8000e56:	a201      	add	r2, pc, #4	; (adr r2, 8000e5c <DevicePressed+0xa4>)
 8000e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e5c:	08000e95 	.word	0x08000e95
 8000e60:	08000eaf 	.word	0x08000eaf
 8000e64:	08000ec9 	.word	0x08000ec9
 8000e68:	08000ee3 	.word	0x08000ee3
 8000e6c:	08000efd 	.word	0x08000efd
 8000e70:	08000f17 	.word	0x08000f17
 8000e74:	08000f31 	.word	0x08000f31
 8000e78:	08000f4b 	.word	0x08000f4b
 8000e7c:	08000f67 	.word	0x08000f67
 8000e80:	08000f83 	.word	0x08000f83
 8000e84:	08000f9f 	.word	0x08000f9f
 8000e88:	08000fbb 	.word	0x08000fbb
 8000e8c:	08000fd7 	.word	0x08000fd7
 8000e90:	08000ff5 	.word	0x08000ff5
		{
		case 1:
			//Power
			DrawRectangle(23, 50, 75, 75, color, contentcolor, 5);
 8000e94:	2305      	movs	r3, #5
 8000e96:	9302      	str	r3, [sp, #8]
 8000e98:	89bb      	ldrh	r3, [r7, #12]
 8000e9a:	9301      	str	r3, [sp, #4]
 8000e9c:	89fb      	ldrh	r3, [r7, #14]
 8000e9e:	9300      	str	r3, [sp, #0]
 8000ea0:	234b      	movs	r3, #75	; 0x4b
 8000ea2:	224b      	movs	r2, #75	; 0x4b
 8000ea4:	2132      	movs	r1, #50	; 0x32
 8000ea6:	2017      	movs	r0, #23
 8000ea8:	f7ff fe5e 	bl	8000b68 <DrawRectangle>
			break;
 8000eac:	e0b2      	b.n	8001014 <DevicePressed+0x25c>
		case 2:
			//Src
			DrawRectangle(219, 50, 75, 75, color, contentcolor, 5);
 8000eae:	2305      	movs	r3, #5
 8000eb0:	9302      	str	r3, [sp, #8]
 8000eb2:	89bb      	ldrh	r3, [r7, #12]
 8000eb4:	9301      	str	r3, [sp, #4]
 8000eb6:	89fb      	ldrh	r3, [r7, #14]
 8000eb8:	9300      	str	r3, [sp, #0]
 8000eba:	234b      	movs	r3, #75	; 0x4b
 8000ebc:	224b      	movs	r2, #75	; 0x4b
 8000ebe:	2132      	movs	r1, #50	; 0x32
 8000ec0:	20db      	movs	r0, #219	; 0xdb
 8000ec2:	f7ff fe51 	bl	8000b68 <DrawRectangle>
			break;
 8000ec6:	e0a5      	b.n	8001014 <DevicePressed+0x25c>
		case 3:
			//^
			DrawRectangle(121, 80, 75, 75, color, contentcolor, 5);
 8000ec8:	2305      	movs	r3, #5
 8000eca:	9302      	str	r3, [sp, #8]
 8000ecc:	89bb      	ldrh	r3, [r7, #12]
 8000ece:	9301      	str	r3, [sp, #4]
 8000ed0:	89fb      	ldrh	r3, [r7, #14]
 8000ed2:	9300      	str	r3, [sp, #0]
 8000ed4:	234b      	movs	r3, #75	; 0x4b
 8000ed6:	224b      	movs	r2, #75	; 0x4b
 8000ed8:	2150      	movs	r1, #80	; 0x50
 8000eda:	2079      	movs	r0, #121	; 0x79
 8000edc:	f7ff fe44 	bl	8000b68 <DrawRectangle>
			break;
 8000ee0:	e098      	b.n	8001014 <DevicePressed+0x25c>
		case 4:
			//<
			DrawRectangle(23, 165, 75, 75, color, contentcolor, 5);
 8000ee2:	2305      	movs	r3, #5
 8000ee4:	9302      	str	r3, [sp, #8]
 8000ee6:	89bb      	ldrh	r3, [r7, #12]
 8000ee8:	9301      	str	r3, [sp, #4]
 8000eea:	89fb      	ldrh	r3, [r7, #14]
 8000eec:	9300      	str	r3, [sp, #0]
 8000eee:	234b      	movs	r3, #75	; 0x4b
 8000ef0:	224b      	movs	r2, #75	; 0x4b
 8000ef2:	21a5      	movs	r1, #165	; 0xa5
 8000ef4:	2017      	movs	r0, #23
 8000ef6:	f7ff fe37 	bl	8000b68 <DrawRectangle>
			break;
 8000efa:	e08b      	b.n	8001014 <DevicePressed+0x25c>
		case 5:
			//OK
			DrawRectangle(121, 165, 75, 75, color, contentcolor, 5);
 8000efc:	2305      	movs	r3, #5
 8000efe:	9302      	str	r3, [sp, #8]
 8000f00:	89bb      	ldrh	r3, [r7, #12]
 8000f02:	9301      	str	r3, [sp, #4]
 8000f04:	89fb      	ldrh	r3, [r7, #14]
 8000f06:	9300      	str	r3, [sp, #0]
 8000f08:	234b      	movs	r3, #75	; 0x4b
 8000f0a:	224b      	movs	r2, #75	; 0x4b
 8000f0c:	21a5      	movs	r1, #165	; 0xa5
 8000f0e:	2079      	movs	r0, #121	; 0x79
 8000f10:	f7ff fe2a 	bl	8000b68 <DrawRectangle>
			break;
 8000f14:	e07e      	b.n	8001014 <DevicePressed+0x25c>
		case 6:
			//>
			DrawRectangle(219, 165, 75, 75, color, contentcolor, 5);
 8000f16:	2305      	movs	r3, #5
 8000f18:	9302      	str	r3, [sp, #8]
 8000f1a:	89bb      	ldrh	r3, [r7, #12]
 8000f1c:	9301      	str	r3, [sp, #4]
 8000f1e:	89fb      	ldrh	r3, [r7, #14]
 8000f20:	9300      	str	r3, [sp, #0]
 8000f22:	234b      	movs	r3, #75	; 0x4b
 8000f24:	224b      	movs	r2, #75	; 0x4b
 8000f26:	21a5      	movs	r1, #165	; 0xa5
 8000f28:	20db      	movs	r0, #219	; 0xdb
 8000f2a:	f7ff fe1d 	bl	8000b68 <DrawRectangle>
			break;
 8000f2e:	e071      	b.n	8001014 <DevicePressed+0x25c>
		case 7:
			//V
			DrawRectangle(121, 250, 75, 75, color, contentcolor, 5);
 8000f30:	2305      	movs	r3, #5
 8000f32:	9302      	str	r3, [sp, #8]
 8000f34:	89bb      	ldrh	r3, [r7, #12]
 8000f36:	9301      	str	r3, [sp, #4]
 8000f38:	89fb      	ldrh	r3, [r7, #14]
 8000f3a:	9300      	str	r3, [sp, #0]
 8000f3c:	234b      	movs	r3, #75	; 0x4b
 8000f3e:	224b      	movs	r2, #75	; 0x4b
 8000f40:	21fa      	movs	r1, #250	; 0xfa
 8000f42:	2079      	movs	r0, #121	; 0x79
 8000f44:	f7ff fe10 	bl	8000b68 <DrawRectangle>
			break;
 8000f48:	e064      	b.n	8001014 <DevicePressed+0x25c>
		case 8:
			//volume up
				DrawRectangle(23, 298, 75, 75, color, contentcolor, 5);
 8000f4a:	2305      	movs	r3, #5
 8000f4c:	9302      	str	r3, [sp, #8]
 8000f4e:	89bb      	ldrh	r3, [r7, #12]
 8000f50:	9301      	str	r3, [sp, #4]
 8000f52:	89fb      	ldrh	r3, [r7, #14]
 8000f54:	9300      	str	r3, [sp, #0]
 8000f56:	234b      	movs	r3, #75	; 0x4b
 8000f58:	224b      	movs	r2, #75	; 0x4b
 8000f5a:	f44f 7195 	mov.w	r1, #298	; 0x12a
 8000f5e:	2017      	movs	r0, #23
 8000f60:	f7ff fe02 	bl	8000b68 <DrawRectangle>
			break;
 8000f64:	e056      	b.n	8001014 <DevicePressed+0x25c>
		case 9:
			//volume down
				DrawRectangle(23, 393, 75, 75, color, contentcolor, 5);
 8000f66:	2305      	movs	r3, #5
 8000f68:	9302      	str	r3, [sp, #8]
 8000f6a:	89bb      	ldrh	r3, [r7, #12]
 8000f6c:	9301      	str	r3, [sp, #4]
 8000f6e:	89fb      	ldrh	r3, [r7, #14]
 8000f70:	9300      	str	r3, [sp, #0]
 8000f72:	234b      	movs	r3, #75	; 0x4b
 8000f74:	224b      	movs	r2, #75	; 0x4b
 8000f76:	f240 1189 	movw	r1, #393	; 0x189
 8000f7a:	2017      	movs	r0, #23
 8000f7c:	f7ff fdf4 	bl	8000b68 <DrawRectangle>
			break;
 8000f80:	e048      	b.n	8001014 <DevicePressed+0x25c>
		case 10:
			//mute
				DrawRectangle(121, 393, 75, 75, color, contentcolor, 5);
 8000f82:	2305      	movs	r3, #5
 8000f84:	9302      	str	r3, [sp, #8]
 8000f86:	89bb      	ldrh	r3, [r7, #12]
 8000f88:	9301      	str	r3, [sp, #4]
 8000f8a:	89fb      	ldrh	r3, [r7, #14]
 8000f8c:	9300      	str	r3, [sp, #0]
 8000f8e:	234b      	movs	r3, #75	; 0x4b
 8000f90:	224b      	movs	r2, #75	; 0x4b
 8000f92:	f240 1189 	movw	r1, #393	; 0x189
 8000f96:	2079      	movs	r0, #121	; 0x79
 8000f98:	f7ff fde6 	bl	8000b68 <DrawRectangle>
			break;
 8000f9c:	e03a      	b.n	8001014 <DevicePressed+0x25c>
		case 11:
			//channel up
				DrawRectangle(219, 298, 75, 75, color, contentcolor, 5);
 8000f9e:	2305      	movs	r3, #5
 8000fa0:	9302      	str	r3, [sp, #8]
 8000fa2:	89bb      	ldrh	r3, [r7, #12]
 8000fa4:	9301      	str	r3, [sp, #4]
 8000fa6:	89fb      	ldrh	r3, [r7, #14]
 8000fa8:	9300      	str	r3, [sp, #0]
 8000faa:	234b      	movs	r3, #75	; 0x4b
 8000fac:	224b      	movs	r2, #75	; 0x4b
 8000fae:	f44f 7195 	mov.w	r1, #298	; 0x12a
 8000fb2:	20db      	movs	r0, #219	; 0xdb
 8000fb4:	f7ff fdd8 	bl	8000b68 <DrawRectangle>
			break;
 8000fb8:	e02c      	b.n	8001014 <DevicePressed+0x25c>
		case 12:
			//channel down
				DrawRectangle(219, 393, 75, 75, color, contentcolor, 5);
 8000fba:	2305      	movs	r3, #5
 8000fbc:	9302      	str	r3, [sp, #8]
 8000fbe:	89bb      	ldrh	r3, [r7, #12]
 8000fc0:	9301      	str	r3, [sp, #4]
 8000fc2:	89fb      	ldrh	r3, [r7, #14]
 8000fc4:	9300      	str	r3, [sp, #0]
 8000fc6:	234b      	movs	r3, #75	; 0x4b
 8000fc8:	224b      	movs	r2, #75	; 0x4b
 8000fca:	f240 1189 	movw	r1, #393	; 0x189
 8000fce:	20db      	movs	r0, #219	; 0xdb
 8000fd0:	f7ff fdca 	bl	8000b68 <DrawRectangle>
			break;
 8000fd4:	e01e      	b.n	8001014 <DevicePressed+0x25c>
		case 13:
			//Add
				DrawRectangle(23, 245, 48, 75, ILI9488_GREENYELLOW, ILI9488_GREENYELLOW, 0);
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	9302      	str	r3, [sp, #8]
 8000fda:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8000fde:	9301      	str	r3, [sp, #4]
 8000fe0:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8000fe4:	9300      	str	r3, [sp, #0]
 8000fe6:	234b      	movs	r3, #75	; 0x4b
 8000fe8:	2230      	movs	r2, #48	; 0x30
 8000fea:	21f5      	movs	r1, #245	; 0xf5
 8000fec:	2017      	movs	r0, #23
 8000fee:	f7ff fdbb 	bl	8000b68 <DrawRectangle>
			break;
 8000ff2:	e00f      	b.n	8001014 <DevicePressed+0x25c>
		case 14:
			//Delete
					DrawRectangle(219, 245, 48, 75, ILI9488_RED, ILI9488_RED, 0);
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	9302      	str	r3, [sp, #8]
 8000ff8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000ffc:	9301      	str	r3, [sp, #4]
 8000ffe:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001002:	9300      	str	r3, [sp, #0]
 8001004:	234b      	movs	r3, #75	; 0x4b
 8001006:	2230      	movs	r2, #48	; 0x30
 8001008:	21f5      	movs	r1, #245	; 0xf5
 800100a:	20db      	movs	r0, #219	; 0xdb
 800100c:	f7ff fdac 	bl	8000b68 <DrawRectangle>
			break;
 8001010:	e000      	b.n	8001014 <DevicePressed+0x25c>
		default:
			break;
 8001012:	bf00      	nop
	for(uint8_t knop = 1; knop <= 14; knop++)
 8001014:	7afb      	ldrb	r3, [r7, #11]
 8001016:	3301      	adds	r3, #1
 8001018:	72fb      	strb	r3, [r7, #11]
 800101a:	7afb      	ldrb	r3, [r7, #11]
 800101c:	2b0e      	cmp	r3, #14
 800101e:	f67f aef4 	bls.w	8000e0a <DevicePressed+0x52>





}
 8001022:	bf00      	nop
 8001024:	bf00      	nop
 8001026:	3710      	adds	r7, #16
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	2000271c 	.word	0x2000271c

08001030 <buttonPressed>:
void buttonPressed(uint8_t *dev, uint8_t *knop, uint8_t *Sensingtouch, uint16_t *X_w, uint16_t *Y_w)
{
 8001030:	b590      	push	{r4, r7, lr}
 8001032:	f2ad 4d0c 	subw	sp, sp, #1036	; 0x40c
 8001036:	af00      	add	r7, sp, #0
 8001038:	f507 6481 	add.w	r4, r7, #1032	; 0x408
 800103c:	f5a4 747f 	sub.w	r4, r4, #1020	; 0x3fc
 8001040:	6020      	str	r0, [r4, #0]
 8001042:	f507 6081 	add.w	r0, r7, #1032	; 0x408
 8001046:	f5a0 6080 	sub.w	r0, r0, #1024	; 0x400
 800104a:	6001      	str	r1, [r0, #0]
 800104c:	f507 6181 	add.w	r1, r7, #1032	; 0x408
 8001050:	f2a1 4104 	subw	r1, r1, #1028	; 0x404
 8001054:	600a      	str	r2, [r1, #0]
 8001056:	f507 6281 	add.w	r2, r7, #1032	; 0x408
 800105a:	f5a2 6281 	sub.w	r2, r2, #1032	; 0x408
 800105e:	6013      	str	r3, [r2, #0]
uint8_t device = *dev;
 8001060:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8001064:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	f887 3405 	strb.w	r3, [r7, #1029]	; 0x405
uint8_t button = *knop;
 8001070:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8001074:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	f887 3404 	strb.w	r3, [r7, #1028]	; 0x404
uint8_t aanraak = *Sensingtouch;
 8001080:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8001084:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	f887 3403 	strb.w	r3, [r7, #1027]	; 0x403
uint16_t X_waarde = *X_w;
 8001090:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8001094:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	881b      	ldrh	r3, [r3, #0]
 800109c:	f8a7 3400 	strh.w	r3, [r7, #1024]	; 0x400
uint16_t Y_waarde = *Y_w;
 80010a0:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 80010a4:	881b      	ldrh	r3, [r3, #0]
 80010a6:	f8a7 33fe 	strh.w	r3, [r7, #1022]	; 0x3fe

uint8_t controle = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	f887 33fd 	strb.w	r3, [r7, #1021]	; 0x3fd
uint8_t berekening = ((device-1) * 12) + button-1 ;
 80010b0:	f897 3405 	ldrb.w	r3, [r7, #1029]	; 0x405
 80010b4:	461a      	mov	r2, r3
 80010b6:	0052      	lsls	r2, r2, #1
 80010b8:	4413      	add	r3, r2
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	b2da      	uxtb	r2, r3
 80010be:	f897 3404 	ldrb.w	r3, [r7, #1028]	; 0x404
 80010c2:	4413      	add	r3, r2
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	3b0d      	subs	r3, #13
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	f887 33fc 	strb.w	r3, [r7, #1020]	; 0x3fc
	 if(button >= 13) //Is de knop een ADD/Delete button?
 80010ce:	f897 3404 	ldrb.w	r3, [r7, #1028]	; 0x404
 80010d2:	2b0c      	cmp	r3, #12
 80010d4:	f240 80aa 	bls.w	800122c <buttonPressed+0x1fc>
	 {
		 switch(button)
 80010d8:	f897 3404 	ldrb.w	r3, [r7, #1028]	; 0x404
 80010dc:	2b0d      	cmp	r3, #13
 80010de:	d003      	beq.n	80010e8 <buttonPressed+0xb8>
 80010e0:	2b0e      	cmp	r3, #14
 80010e2:	f000 80a5 	beq.w	8001230 <buttonPressed+0x200>
			 	 printf("button %d , duw op een knop van de andere afstandsbediening, die je wilt instellen\r\n", button);
			 	 IR_Read();
*/
			 break;
		 default:
			 break;
 80010e6:	e0a4      	b.n	8001232 <buttonPressed+0x202>
			 button = 0;
 80010e8:	2300      	movs	r3, #0
 80010ea:	f887 3404 	strb.w	r3, [r7, #1028]	; 0x404
			 cleartijd();
 80010ee:	f000 fa35 	bl	800155c <cleartijd>
			 X_waarde = 160; Y_waarde = 363;
 80010f2:	23a0      	movs	r3, #160	; 0xa0
 80010f4:	f8a7 3400 	strh.w	r3, [r7, #1024]	; 0x400
 80010f8:	f240 136b 	movw	r3, #363	; 0x16b
 80010fc:	f8a7 33fe 	strh.w	r3, [r7, #1022]	; 0x3fe
			 printf("button %d , duw op een knop van de andere afstandsbediening, die je wilt instellen\r\n", button);
 8001100:	f897 3404 	ldrb.w	r3, [r7, #1028]	; 0x404
 8001104:	4619      	mov	r1, r3
 8001106:	486b      	ldr	r0, [pc, #428]	; (80012b4 <buttonPressed+0x284>)
 8001108:	f006 fcb0 	bl	8007a6c <iprintf>
			 while(button == 0)
 800110c:	e02f      	b.n	800116e <buttonPressed+0x13e>
				 Touch(&aanraak, &X_waarde, &Y_waarde);
 800110e:	f207 32fe 	addw	r2, r7, #1022	; 0x3fe
 8001112:	f507 6180 	add.w	r1, r7, #1024	; 0x400
 8001116:	f207 4303 	addw	r3, r7, #1027	; 0x403
 800111a:	4618      	mov	r0, r3
 800111c:	f000 fc24 	bl	8001968 <Touch>
				 ReadButton(&button, &X_waarde, &Y_waarde);
 8001120:	f207 32fe 	addw	r2, r7, #1022	; 0x3fe
 8001124:	f507 6180 	add.w	r1, r7, #1024	; 0x400
 8001128:	f207 4304 	addw	r3, r7, #1028	; 0x404
 800112c:	4618      	mov	r0, r3
 800112e:	f000 fcf7 	bl	8001b20 <ReadButton>
				 berekening = ((device-1) * 12) + button-1;
 8001132:	f897 3405 	ldrb.w	r3, [r7, #1029]	; 0x405
 8001136:	461a      	mov	r2, r3
 8001138:	0052      	lsls	r2, r2, #1
 800113a:	4413      	add	r3, r2
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	b2da      	uxtb	r2, r3
 8001140:	f897 3404 	ldrb.w	r3, [r7, #1028]	; 0x404
 8001144:	4413      	add	r3, r2
 8001146:	b2db      	uxtb	r3, r3
 8001148:	3b0d      	subs	r3, #13
 800114a:	b2db      	uxtb	r3, r3
 800114c:	f887 33fc 	strb.w	r3, [r7, #1020]	; 0x3fc
				 if(button > 12 || lengte_signaal[berekening] != 0 ) //als add/delete knop ingesteld is, of als knop al ingesteld is
 8001150:	f897 3404 	ldrb.w	r3, [r7, #1028]	; 0x404
 8001154:	2b0c      	cmp	r3, #12
 8001156:	d807      	bhi.n	8001168 <buttonPressed+0x138>
 8001158:	f897 33fc 	ldrb.w	r3, [r7, #1020]	; 0x3fc
 800115c:	461a      	mov	r2, r3
 800115e:	4b56      	ldr	r3, [pc, #344]	; (80012b8 <buttonPressed+0x288>)
 8001160:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d002      	beq.n	800116e <buttonPressed+0x13e>
					 button=0;
 8001168:	2300      	movs	r3, #0
 800116a:	f887 3404 	strb.w	r3, [r7, #1028]	; 0x404
			 while(button == 0)
 800116e:	f897 3404 	ldrb.w	r3, [r7, #1028]	; 0x404
 8001172:	2b00      	cmp	r3, #0
 8001174:	d0cb      	beq.n	800110e <buttonPressed+0xde>
			 berekening = ((device-1) * 12) + button-1;
 8001176:	f897 3405 	ldrb.w	r3, [r7, #1029]	; 0x405
 800117a:	461a      	mov	r2, r3
 800117c:	0052      	lsls	r2, r2, #1
 800117e:	4413      	add	r3, r2
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	b2da      	uxtb	r2, r3
 8001184:	f897 3404 	ldrb.w	r3, [r7, #1028]	; 0x404
 8001188:	4413      	add	r3, r2
 800118a:	b2db      	uxtb	r3, r3
 800118c:	3b0d      	subs	r3, #13
 800118e:	b2db      	uxtb	r3, r3
 8001190:	f887 33fc 	strb.w	r3, [r7, #1020]	; 0x3fc
			 ColorToSelectedbutton(&button, &device, 0x07E0);
 8001194:	f207 4105 	addw	r1, r7, #1029	; 0x405
 8001198:	f207 4304 	addw	r3, r7, #1028	; 0x404
 800119c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80011a0:	4618      	mov	r0, r3
 80011a2:	f000 f88f 	bl	80012c4 <ColorToSelectedbutton>
			 IR_Read();
 80011a6:	f000 fa87 	bl	80016b8 <IR_Read>
			 uint8_t nosignal = 0; //In het begin gaan we er vanuit dat er geen signaal is
 80011aa:	2300      	movs	r3, #0
 80011ac:	f887 33fb 	strb.w	r3, [r7, #1019]	; 0x3fb
			 uint8_t lengte_signaal_gevonden = 0; //In het begin gaan we er vanuit dat er nog geen lengte van het signaal gevonden is
 80011b0:	2300      	movs	r3, #0
 80011b2:	f887 33fa 	strb.w	r3, [r7, #1018]	; 0x3fa
			 while((nosignal != 2) && (nosignal != 4))
 80011b6:	e008      	b.n	80011ca <buttonPressed+0x19a>
			 IR_UNDERSTAND(&berekening, &nosignal, &lengte_signaal_gevonden);
 80011b8:	f207 32fa 	addw	r2, r7, #1018	; 0x3fa
 80011bc:	f207 31fb 	addw	r1, r7, #1019	; 0x3fb
 80011c0:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 80011c4:	4618      	mov	r0, r3
 80011c6:	f000 fa83 	bl	80016d0 <IR_UNDERSTAND>
			 while((nosignal != 2) && (nosignal != 4))
 80011ca:	f897 33fb 	ldrb.w	r3, [r7, #1019]	; 0x3fb
 80011ce:	2b02      	cmp	r3, #2
 80011d0:	d003      	beq.n	80011da <buttonPressed+0x1aa>
 80011d2:	f897 33fb 	ldrb.w	r3, [r7, #1019]	; 0x3fb
 80011d6:	2b04      	cmp	r3, #4
 80011d8:	d1ee      	bne.n	80011b8 <buttonPressed+0x188>
			 IR_READ_flag = 0;
 80011da:	4b38      	ldr	r3, [pc, #224]	; (80012bc <buttonPressed+0x28c>)
 80011dc:	2200      	movs	r2, #0
 80011de:	701a      	strb	r2, [r3, #0]
			 if(nosignal == 2)
 80011e0:	f897 33fb 	ldrb.w	r3, [r7, #1019]	; 0x3fb
 80011e4:	2b02      	cmp	r3, #2
 80011e6:	d111      	bne.n	800120c <buttonPressed+0x1dc>
				 WriteToGeheugen(&device,&button);
 80011e8:	f207 4204 	addw	r2, r7, #1028	; 0x404
 80011ec:	f207 4305 	addw	r3, r7, #1029	; 0x405
 80011f0:	4611      	mov	r1, r2
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff f8b8 	bl	8000368 <WriteToGeheugen>
			 	 ColorToSelectedbutton(&button, &device, 0x7BEF);
 80011f8:	f207 4105 	addw	r1, r7, #1029	; 0x405
 80011fc:	f207 4304 	addw	r3, r7, #1028	; 0x404
 8001200:	f647 32ef 	movw	r2, #31727	; 0x7bef
 8001204:	4618      	mov	r0, r3
 8001206:	f000 f85d 	bl	80012c4 <ColorToSelectedbutton>
 800120a:	e007      	b.n	800121c <buttonPressed+0x1ec>
				 ColorToSelectedbutton(&button, &device, 0x0000);
 800120c:	f207 4105 	addw	r1, r7, #1029	; 0x405
 8001210:	f207 4304 	addw	r3, r7, #1028	; 0x404
 8001214:	2200      	movs	r2, #0
 8001216:	4618      	mov	r0, r3
 8001218:	f000 f854 	bl	80012c4 <ColorToSelectedbutton>
			 *knop=0;
 800121c:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8001220:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	2200      	movs	r2, #0
 8001228:	701a      	strb	r2, [r3, #0]
			 break;
 800122a:	e002      	b.n	8001232 <buttonPressed+0x202>
		 }
	 }
 800122c:	bf00      	nop
 800122e:	e000      	b.n	8001232 <buttonPressed+0x202>
			 break;
 8001230:	bf00      	nop
	 if(button>0 && button < 13)
 8001232:	f897 3404 	ldrb.w	r3, [r7, #1028]	; 0x404
 8001236:	2b00      	cmp	r3, #0
 8001238:	d036      	beq.n	80012a8 <buttonPressed+0x278>
 800123a:	f897 3404 	ldrb.w	r3, [r7, #1028]	; 0x404
 800123e:	2b0c      	cmp	r3, #12
 8001240:	d832      	bhi.n	80012a8 <buttonPressed+0x278>
	 {
		 //Heeft ingeduwde knop tijdswaarden? Ja dan is controle = 1
		 uint16_t tijd_geheugen[500];
		 TakefromGeheugen(&device, &button, &tijd_geheugen, &controle);
 8001242:	f207 33fd 	addw	r3, r7, #1021	; 0x3fd
 8001246:	f107 0210 	add.w	r2, r7, #16
 800124a:	f207 4104 	addw	r1, r7, #1028	; 0x404
 800124e:	f207 4005 	addw	r0, r7, #1029	; 0x405
 8001252:	f7ff f9dd 	bl	8000610 <TakefromGeheugen>
		 if(controle == 0)
 8001256:	f897 33fd 	ldrb.w	r3, [r7, #1021]	; 0x3fd
 800125a:	2b00      	cmp	r3, #0
 800125c:	d105      	bne.n	800126a <buttonPressed+0x23a>
		 {
			 printf("knop is niet ingesteld\r\n");
 800125e:	4818      	ldr	r0, [pc, #96]	; (80012c0 <buttonPressed+0x290>)
 8001260:	f006 fc8a 	bl	8007b78 <puts>
			 ShowMemory();
 8001264:	f7ff f860 	bl	8000328 <ShowMemory>

		 }


	 }
}
 8001268:	e01e      	b.n	80012a8 <buttonPressed+0x278>
			 	 	 uint16_t lensignaal = lengte_signaal[berekening];
 800126a:	f897 33fc 	ldrb.w	r3, [r7, #1020]	; 0x3fc
 800126e:	461a      	mov	r2, r3
 8001270:	4b11      	ldr	r3, [pc, #68]	; (80012b8 <buttonPressed+0x288>)
 8001272:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001276:	f8a7 3406 	strh.w	r3, [r7, #1030]	; 0x406
			 	 	 VibrateStart();
 800127a:	f000 fd09 	bl	8001c90 <VibrateStart>
					 IR_sent(&tijd_geheugen, lensignaal);
 800127e:	f8b7 2406 	ldrh.w	r2, [r7, #1030]	; 0x406
 8001282:	f107 0310 	add.w	r3, r7, #16
 8001286:	4611      	mov	r1, r2
 8001288:	4618      	mov	r0, r3
 800128a:	f000 fae1 	bl	8001850 <IR_sent>
					 HAL_Delay(500);
 800128e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001292:	f001 fb97 	bl	80029c4 <HAL_Delay>
					 VibrateStop();
 8001296:	f000 fd0f 	bl	8001cb8 <VibrateStop>
					 *knop = 0;
 800129a:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800129e:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2200      	movs	r2, #0
 80012a6:	701a      	strb	r2, [r3, #0]
}
 80012a8:	bf00      	nop
 80012aa:	f207 470c 	addw	r7, r7, #1036	; 0x40c
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd90      	pop	{r4, r7, pc}
 80012b2:	bf00      	nop
 80012b4:	08008d90 	.word	0x08008d90
 80012b8:	2000271c 	.word	0x2000271c
 80012bc:	20002812 	.word	0x20002812
 80012c0:	08008de8 	.word	0x08008de8

080012c4 <ColorToSelectedbutton>:
void ColorToSelectedbutton(uint8_t *button, uint8_t *device, uint16_t color)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b08a      	sub	sp, #40	; 0x28
 80012c8:	af04      	add	r7, sp, #16
 80012ca:	60f8      	str	r0, [r7, #12]
 80012cc:	60b9      	str	r1, [r7, #8]
 80012ce:	4613      	mov	r3, r2
 80012d0:	80fb      	strh	r3, [r7, #6]
	uint8_t knop = *button;
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	757b      	strb	r3, [r7, #21]
	uint16_t bordercolor;
	uint8_t apparaat = *device;
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	753b      	strb	r3, [r7, #20]
	switch(apparaat)
 80012de:	7d3b      	ldrb	r3, [r7, #20]
 80012e0:	3b01      	subs	r3, #1
 80012e2:	2b03      	cmp	r3, #3
 80012e4:	d819      	bhi.n	800131a <ColorToSelectedbutton+0x56>
 80012e6:	a201      	add	r2, pc, #4	; (adr r2, 80012ec <ColorToSelectedbutton+0x28>)
 80012e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012ec:	080012fd 	.word	0x080012fd
 80012f0:	08001303 	.word	0x08001303
 80012f4:	0800130b 	.word	0x0800130b
 80012f8:	08001313 	.word	0x08001313
			{
	case 1:
		bordercolor = ILI9488_BLUE;
 80012fc:	231f      	movs	r3, #31
 80012fe:	82fb      	strh	r3, [r7, #22]
		break;
 8001300:	e00c      	b.n	800131c <ColorToSelectedbutton+0x58>
	case 2:
		bordercolor = ILI9488_YELLOW;
 8001302:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001306:	82fb      	strh	r3, [r7, #22]
		break;
 8001308:	e008      	b.n	800131c <ColorToSelectedbutton+0x58>
	case 3:
		bordercolor = ILI9488_GREEN;
 800130a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800130e:	82fb      	strh	r3, [r7, #22]
		break;
 8001310:	e004      	b.n	800131c <ColorToSelectedbutton+0x58>
	case 4:
		bordercolor = ILI9488_WHITE;
 8001312:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001316:	82fb      	strh	r3, [r7, #22]
		break;
 8001318:	e000      	b.n	800131c <ColorToSelectedbutton+0x58>
	default:
		break;
 800131a:	bf00      	nop
	}

	switch(knop)
 800131c:	7d7b      	ldrb	r3, [r7, #21]
 800131e:	3b01      	subs	r3, #1
 8001320:	2b0b      	cmp	r3, #11
 8001322:	f200 80bc 	bhi.w	800149e <ColorToSelectedbutton+0x1da>
 8001326:	a201      	add	r2, pc, #4	; (adr r2, 800132c <ColorToSelectedbutton+0x68>)
 8001328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800132c:	0800135d 	.word	0x0800135d
 8001330:	08001377 	.word	0x08001377
 8001334:	08001391 	.word	0x08001391
 8001338:	080013ab 	.word	0x080013ab
 800133c:	080013c5 	.word	0x080013c5
 8001340:	080013df 	.word	0x080013df
 8001344:	080013f9 	.word	0x080013f9
 8001348:	08001413 	.word	0x08001413
 800134c:	0800142f 	.word	0x0800142f
 8001350:	0800144b 	.word	0x0800144b
 8001354:	08001467 	.word	0x08001467
 8001358:	08001483 	.word	0x08001483
			{
			case 1:
				//Power
				DrawRectangle(23, 50, 75, 75, bordercolor, color, 5);
 800135c:	2305      	movs	r3, #5
 800135e:	9302      	str	r3, [sp, #8]
 8001360:	88fb      	ldrh	r3, [r7, #6]
 8001362:	9301      	str	r3, [sp, #4]
 8001364:	8afb      	ldrh	r3, [r7, #22]
 8001366:	9300      	str	r3, [sp, #0]
 8001368:	234b      	movs	r3, #75	; 0x4b
 800136a:	224b      	movs	r2, #75	; 0x4b
 800136c:	2132      	movs	r1, #50	; 0x32
 800136e:	2017      	movs	r0, #23
 8001370:	f7ff fbfa 	bl	8000b68 <DrawRectangle>
				break;
 8001374:	e094      	b.n	80014a0 <ColorToSelectedbutton+0x1dc>
			case 2:
				//Src
				DrawRectangle(219, 50, 75, 75, bordercolor, color, 5);
 8001376:	2305      	movs	r3, #5
 8001378:	9302      	str	r3, [sp, #8]
 800137a:	88fb      	ldrh	r3, [r7, #6]
 800137c:	9301      	str	r3, [sp, #4]
 800137e:	8afb      	ldrh	r3, [r7, #22]
 8001380:	9300      	str	r3, [sp, #0]
 8001382:	234b      	movs	r3, #75	; 0x4b
 8001384:	224b      	movs	r2, #75	; 0x4b
 8001386:	2132      	movs	r1, #50	; 0x32
 8001388:	20db      	movs	r0, #219	; 0xdb
 800138a:	f7ff fbed 	bl	8000b68 <DrawRectangle>
				break;
 800138e:	e087      	b.n	80014a0 <ColorToSelectedbutton+0x1dc>
			case 3:
				//^
				DrawRectangle(121, 80, 75, 75, bordercolor, color, 5);
 8001390:	2305      	movs	r3, #5
 8001392:	9302      	str	r3, [sp, #8]
 8001394:	88fb      	ldrh	r3, [r7, #6]
 8001396:	9301      	str	r3, [sp, #4]
 8001398:	8afb      	ldrh	r3, [r7, #22]
 800139a:	9300      	str	r3, [sp, #0]
 800139c:	234b      	movs	r3, #75	; 0x4b
 800139e:	224b      	movs	r2, #75	; 0x4b
 80013a0:	2150      	movs	r1, #80	; 0x50
 80013a2:	2079      	movs	r0, #121	; 0x79
 80013a4:	f7ff fbe0 	bl	8000b68 <DrawRectangle>
				break;
 80013a8:	e07a      	b.n	80014a0 <ColorToSelectedbutton+0x1dc>
			case 4:
				//<
				DrawRectangle(23, 165, 75, 75, bordercolor, color, 5);
 80013aa:	2305      	movs	r3, #5
 80013ac:	9302      	str	r3, [sp, #8]
 80013ae:	88fb      	ldrh	r3, [r7, #6]
 80013b0:	9301      	str	r3, [sp, #4]
 80013b2:	8afb      	ldrh	r3, [r7, #22]
 80013b4:	9300      	str	r3, [sp, #0]
 80013b6:	234b      	movs	r3, #75	; 0x4b
 80013b8:	224b      	movs	r2, #75	; 0x4b
 80013ba:	21a5      	movs	r1, #165	; 0xa5
 80013bc:	2017      	movs	r0, #23
 80013be:	f7ff fbd3 	bl	8000b68 <DrawRectangle>
				break;
 80013c2:	e06d      	b.n	80014a0 <ColorToSelectedbutton+0x1dc>
			case 5:
				//OK
				DrawRectangle(121, 165, 75, 75, bordercolor, color, 5);
 80013c4:	2305      	movs	r3, #5
 80013c6:	9302      	str	r3, [sp, #8]
 80013c8:	88fb      	ldrh	r3, [r7, #6]
 80013ca:	9301      	str	r3, [sp, #4]
 80013cc:	8afb      	ldrh	r3, [r7, #22]
 80013ce:	9300      	str	r3, [sp, #0]
 80013d0:	234b      	movs	r3, #75	; 0x4b
 80013d2:	224b      	movs	r2, #75	; 0x4b
 80013d4:	21a5      	movs	r1, #165	; 0xa5
 80013d6:	2079      	movs	r0, #121	; 0x79
 80013d8:	f7ff fbc6 	bl	8000b68 <DrawRectangle>
				break;
 80013dc:	e060      	b.n	80014a0 <ColorToSelectedbutton+0x1dc>
			case 6:
				//>
				DrawRectangle(219, 165, 75, 75, bordercolor, color, 5);
 80013de:	2305      	movs	r3, #5
 80013e0:	9302      	str	r3, [sp, #8]
 80013e2:	88fb      	ldrh	r3, [r7, #6]
 80013e4:	9301      	str	r3, [sp, #4]
 80013e6:	8afb      	ldrh	r3, [r7, #22]
 80013e8:	9300      	str	r3, [sp, #0]
 80013ea:	234b      	movs	r3, #75	; 0x4b
 80013ec:	224b      	movs	r2, #75	; 0x4b
 80013ee:	21a5      	movs	r1, #165	; 0xa5
 80013f0:	20db      	movs	r0, #219	; 0xdb
 80013f2:	f7ff fbb9 	bl	8000b68 <DrawRectangle>
				break;
 80013f6:	e053      	b.n	80014a0 <ColorToSelectedbutton+0x1dc>
			case 7:
				//V
				DrawRectangle(121, 250, 75, 75, bordercolor, color, 5);
 80013f8:	2305      	movs	r3, #5
 80013fa:	9302      	str	r3, [sp, #8]
 80013fc:	88fb      	ldrh	r3, [r7, #6]
 80013fe:	9301      	str	r3, [sp, #4]
 8001400:	8afb      	ldrh	r3, [r7, #22]
 8001402:	9300      	str	r3, [sp, #0]
 8001404:	234b      	movs	r3, #75	; 0x4b
 8001406:	224b      	movs	r2, #75	; 0x4b
 8001408:	21fa      	movs	r1, #250	; 0xfa
 800140a:	2079      	movs	r0, #121	; 0x79
 800140c:	f7ff fbac 	bl	8000b68 <DrawRectangle>
				break;
 8001410:	e046      	b.n	80014a0 <ColorToSelectedbutton+0x1dc>
			case 8:
				//volume up
					DrawRectangle(23, 298, 75, 75, bordercolor, color, 5);
 8001412:	2305      	movs	r3, #5
 8001414:	9302      	str	r3, [sp, #8]
 8001416:	88fb      	ldrh	r3, [r7, #6]
 8001418:	9301      	str	r3, [sp, #4]
 800141a:	8afb      	ldrh	r3, [r7, #22]
 800141c:	9300      	str	r3, [sp, #0]
 800141e:	234b      	movs	r3, #75	; 0x4b
 8001420:	224b      	movs	r2, #75	; 0x4b
 8001422:	f44f 7195 	mov.w	r1, #298	; 0x12a
 8001426:	2017      	movs	r0, #23
 8001428:	f7ff fb9e 	bl	8000b68 <DrawRectangle>
				break;
 800142c:	e038      	b.n	80014a0 <ColorToSelectedbutton+0x1dc>
			case 9:
				//volume down
					DrawRectangle(23, 393, 75, 75, bordercolor, color, 5);
 800142e:	2305      	movs	r3, #5
 8001430:	9302      	str	r3, [sp, #8]
 8001432:	88fb      	ldrh	r3, [r7, #6]
 8001434:	9301      	str	r3, [sp, #4]
 8001436:	8afb      	ldrh	r3, [r7, #22]
 8001438:	9300      	str	r3, [sp, #0]
 800143a:	234b      	movs	r3, #75	; 0x4b
 800143c:	224b      	movs	r2, #75	; 0x4b
 800143e:	f240 1189 	movw	r1, #393	; 0x189
 8001442:	2017      	movs	r0, #23
 8001444:	f7ff fb90 	bl	8000b68 <DrawRectangle>
				break;
 8001448:	e02a      	b.n	80014a0 <ColorToSelectedbutton+0x1dc>
			case 10:
				//mute
					DrawRectangle(121, 393, 75, 75, bordercolor, color, 5);
 800144a:	2305      	movs	r3, #5
 800144c:	9302      	str	r3, [sp, #8]
 800144e:	88fb      	ldrh	r3, [r7, #6]
 8001450:	9301      	str	r3, [sp, #4]
 8001452:	8afb      	ldrh	r3, [r7, #22]
 8001454:	9300      	str	r3, [sp, #0]
 8001456:	234b      	movs	r3, #75	; 0x4b
 8001458:	224b      	movs	r2, #75	; 0x4b
 800145a:	f240 1189 	movw	r1, #393	; 0x189
 800145e:	2079      	movs	r0, #121	; 0x79
 8001460:	f7ff fb82 	bl	8000b68 <DrawRectangle>
				break;
 8001464:	e01c      	b.n	80014a0 <ColorToSelectedbutton+0x1dc>
			case 11:
				//channel up
					DrawRectangle(219, 298, 75, 75, bordercolor, color, 5);
 8001466:	2305      	movs	r3, #5
 8001468:	9302      	str	r3, [sp, #8]
 800146a:	88fb      	ldrh	r3, [r7, #6]
 800146c:	9301      	str	r3, [sp, #4]
 800146e:	8afb      	ldrh	r3, [r7, #22]
 8001470:	9300      	str	r3, [sp, #0]
 8001472:	234b      	movs	r3, #75	; 0x4b
 8001474:	224b      	movs	r2, #75	; 0x4b
 8001476:	f44f 7195 	mov.w	r1, #298	; 0x12a
 800147a:	20db      	movs	r0, #219	; 0xdb
 800147c:	f7ff fb74 	bl	8000b68 <DrawRectangle>
				break;
 8001480:	e00e      	b.n	80014a0 <ColorToSelectedbutton+0x1dc>
			case 12:
				//channel down
					DrawRectangle(219, 393, 75, 75, bordercolor, color, 5);
 8001482:	2305      	movs	r3, #5
 8001484:	9302      	str	r3, [sp, #8]
 8001486:	88fb      	ldrh	r3, [r7, #6]
 8001488:	9301      	str	r3, [sp, #4]
 800148a:	8afb      	ldrh	r3, [r7, #22]
 800148c:	9300      	str	r3, [sp, #0]
 800148e:	234b      	movs	r3, #75	; 0x4b
 8001490:	224b      	movs	r2, #75	; 0x4b
 8001492:	f240 1189 	movw	r1, #393	; 0x189
 8001496:	20db      	movs	r0, #219	; 0xdb
 8001498:	f7ff fb66 	bl	8000b68 <DrawRectangle>
				break;
 800149c:	e000      	b.n	80014a0 <ColorToSelectedbutton+0x1dc>
			default:
				break;
 800149e:	bf00      	nop
			}
}
 80014a0:	bf00      	nop
 80014a2:	3718      	adds	r7, #24
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <mainscreen>:
void mainscreen()
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af04      	add	r7, sp, #16
	if(UartScreen == 1)
 80014ae:	4b28      	ldr	r3, [pc, #160]	; (8001550 <mainscreen+0xa8>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d102      	bne.n	80014bc <mainscreen+0x14>
		{
		printf("Even geduld...\r\n");
 80014b6:	4827      	ldr	r0, [pc, #156]	; (8001554 <mainscreen+0xac>)
 80014b8:	f006 fb5e 	bl	8007b78 <puts>
		}
	fillRect(0, 0, 320, 480, 0x0000);
 80014bc:	2300      	movs	r3, #0
 80014be:	9300      	str	r3, [sp, #0]
 80014c0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80014c4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80014c8:	2100      	movs	r1, #0
 80014ca:	2000      	movs	r0, #0
 80014cc:	f7ff fc0c 	bl	8000ce8 <fillRect>
	//DrawImage(0, 0, POWERBUTTON_DATA_X_PIXEL, POWERBUTTON_DATA_Y_PIXEL, POWERBUTTON_DATA);
	//DrawRectangle(x, y, h, w, color, contentcolor, border)
	DrawRectangle(0, 0, 40, 79, ILI9488_BLUE, ILI9488_BLUE, 0);
 80014d0:	2300      	movs	r3, #0
 80014d2:	9302      	str	r3, [sp, #8]
 80014d4:	231f      	movs	r3, #31
 80014d6:	9301      	str	r3, [sp, #4]
 80014d8:	231f      	movs	r3, #31
 80014da:	9300      	str	r3, [sp, #0]
 80014dc:	234f      	movs	r3, #79	; 0x4f
 80014de:	2228      	movs	r2, #40	; 0x28
 80014e0:	2100      	movs	r1, #0
 80014e2:	2000      	movs	r0, #0
 80014e4:	f7ff fb40 	bl	8000b68 <DrawRectangle>
	DrawRectangle(80, 0, 40, 79, ILI9488_YELLOW, ILI9488_YELLOW, 0);
 80014e8:	2300      	movs	r3, #0
 80014ea:	9302      	str	r3, [sp, #8]
 80014ec:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80014f0:	9301      	str	r3, [sp, #4]
 80014f2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80014f6:	9300      	str	r3, [sp, #0]
 80014f8:	234f      	movs	r3, #79	; 0x4f
 80014fa:	2228      	movs	r2, #40	; 0x28
 80014fc:	2100      	movs	r1, #0
 80014fe:	2050      	movs	r0, #80	; 0x50
 8001500:	f7ff fb32 	bl	8000b68 <DrawRectangle>
	DrawRectangle(160, 0, 40, 79, ILI9488_GREEN, ILI9488_GREEN, 0);
 8001504:	2300      	movs	r3, #0
 8001506:	9302      	str	r3, [sp, #8]
 8001508:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800150c:	9301      	str	r3, [sp, #4]
 800150e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001512:	9300      	str	r3, [sp, #0]
 8001514:	234f      	movs	r3, #79	; 0x4f
 8001516:	2228      	movs	r2, #40	; 0x28
 8001518:	2100      	movs	r1, #0
 800151a:	20a0      	movs	r0, #160	; 0xa0
 800151c:	f7ff fb24 	bl	8000b68 <DrawRectangle>
	DrawRectangle(240, 0, 40, 79, ILI9488_WHITE, ILI9488_WHITE, 0);
 8001520:	2300      	movs	r3, #0
 8001522:	9302      	str	r3, [sp, #8]
 8001524:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001528:	9301      	str	r3, [sp, #4]
 800152a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800152e:	9300      	str	r3, [sp, #0]
 8001530:	234f      	movs	r3, #79	; 0x4f
 8001532:	2228      	movs	r2, #40	; 0x28
 8001534:	2100      	movs	r1, #0
 8001536:	20f0      	movs	r0, #240	; 0xf0
 8001538:	f7ff fb16 	bl	8000b68 <DrawRectangle>

	if(UartScreen == 1)
 800153c:	4b04      	ldr	r3, [pc, #16]	; (8001550 <mainscreen+0xa8>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	2b01      	cmp	r3, #1
 8001542:	d102      	bne.n	800154a <mainscreen+0xa2>
	{
	printf("MainScreen ingeladen\r\n");
 8001544:	4804      	ldr	r0, [pc, #16]	; (8001558 <mainscreen+0xb0>)
 8001546:	f006 fb17 	bl	8007b78 <puts>
	}
}
 800154a:	bf00      	nop
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	20000000 	.word	0x20000000
 8001554:	08008e00 	.word	0x08008e00
 8001558:	08008e10 	.word	0x08008e10

0800155c <cleartijd>:
uint8_t IR_Done = 0;
uint8_t IR_ReadMark = 0;
uint32_t IR_ReadMark_First_time = 0;

void cleartijd()
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
	eerste_flank = 0;
 8001562:	4b16      	ldr	r3, [pc, #88]	; (80015bc <cleartijd+0x60>)
 8001564:	2200      	movs	r2, #0
 8001566:	801a      	strh	r2, [r3, #0]
	eerste_flank_plus_2sec = 0;
 8001568:	4b15      	ldr	r3, [pc, #84]	; (80015c0 <cleartijd+0x64>)
 800156a:	2200      	movs	r2, #0
 800156c:	601a      	str	r2, [r3, #0]
	IR_Done = 0;
 800156e:	4b15      	ldr	r3, [pc, #84]	; (80015c4 <cleartijd+0x68>)
 8001570:	2200      	movs	r2, #0
 8001572:	701a      	strb	r2, [r3, #0]
	pulsecounter = 0;
 8001574:	4b14      	ldr	r3, [pc, #80]	; (80015c8 <cleartijd+0x6c>)
 8001576:	2200      	movs	r2, #0
 8001578:	801a      	strh	r2, [r3, #0]
	IR_ReadMark = 0;
 800157a:	4b14      	ldr	r3, [pc, #80]	; (80015cc <cleartijd+0x70>)
 800157c:	2200      	movs	r2, #0
 800157e:	701a      	strb	r2, [r3, #0]
	IR_ReadMark_First_time = 0;
 8001580:	4b13      	ldr	r3, [pc, #76]	; (80015d0 <cleartijd+0x74>)
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < 500; i++)
 8001586:	2300      	movs	r3, #0
 8001588:	80fb      	strh	r3, [r7, #6]
 800158a:	e007      	b.n	800159c <cleartijd+0x40>
	{
		tijd[i]=0;
 800158c:	88fb      	ldrh	r3, [r7, #6]
 800158e:	4a11      	ldr	r2, [pc, #68]	; (80015d4 <cleartijd+0x78>)
 8001590:	2100      	movs	r1, #0
 8001592:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint16_t i = 0; i < 500; i++)
 8001596:	88fb      	ldrh	r3, [r7, #6]
 8001598:	3301      	adds	r3, #1
 800159a:	80fb      	strh	r3, [r7, #6]
 800159c:	88fb      	ldrh	r3, [r7, #6]
 800159e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80015a2:	d3f3      	bcc.n	800158c <cleartijd+0x30>
	}
	HAL_TIM_Base_Stop(&TIM_1us); //timer stoppen
 80015a4:	480c      	ldr	r0, [pc, #48]	; (80015d8 <cleartijd+0x7c>)
 80015a6:	f004 fd89 	bl	80060bc <HAL_TIM_Base_Stop>
	TIM_1us.Instance -> CNT = 0;
 80015aa:	4b0b      	ldr	r3, [pc, #44]	; (80015d8 <cleartijd+0x7c>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	2200      	movs	r2, #0
 80015b0:	625a      	str	r2, [r3, #36]	; 0x24

}
 80015b2:	bf00      	nop
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	20002c02 	.word	0x20002c02
 80015c0:	20002c04 	.word	0x20002c04
 80015c4:	20002c08 	.word	0x20002c08
 80015c8:	20002810 	.word	0x20002810
 80015cc:	20002c09 	.word	0x20002c09
 80015d0:	20002c0c 	.word	0x20002c0c
 80015d4:	20002818 	.word	0x20002818
 80015d8:	20002d14 	.word	0x20002d14

080015dc <Interrupt_flank>:

void Interrupt_flank()
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0

	if(IR_READ_flag == 1)
 80015e0:	4b1f      	ldr	r3, [pc, #124]	; (8001660 <Interrupt_flank+0x84>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d136      	bne.n	8001656 <Interrupt_flank+0x7a>
	{
		eerste_flank++;
 80015e8:	4b1e      	ldr	r3, [pc, #120]	; (8001664 <Interrupt_flank+0x88>)
 80015ea:	881b      	ldrh	r3, [r3, #0]
 80015ec:	3301      	adds	r3, #1
 80015ee:	b29a      	uxth	r2, r3
 80015f0:	4b1c      	ldr	r3, [pc, #112]	; (8001664 <Interrupt_flank+0x88>)
 80015f2:	801a      	strh	r2, [r3, #0]
		if(eerste_flank == 1) //eerste flank
 80015f4:	4b1b      	ldr	r3, [pc, #108]	; (8001664 <Interrupt_flank+0x88>)
 80015f6:	881b      	ldrh	r3, [r3, #0]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d109      	bne.n	8001610 <Interrupt_flank+0x34>
			{
					HAL_TIM_Base_Start(&TIM_1us);
 80015fc:	481a      	ldr	r0, [pc, #104]	; (8001668 <Interrupt_flank+0x8c>)
 80015fe:	f004 fd11 	bl	8006024 <HAL_TIM_Base_Start>
					eerste_flank_plus_2sec = HAL_GetTick() + 2000;
 8001602:	f001 f9d3 	bl	80029ac <HAL_GetTick>
 8001606:	4603      	mov	r3, r0
 8001608:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800160c:	4a17      	ldr	r2, [pc, #92]	; (800166c <Interrupt_flank+0x90>)
 800160e:	6013      	str	r3, [r2, #0]
			}
		if(eerste_flank >= 2) // alle andere flanken
 8001610:	4b14      	ldr	r3, [pc, #80]	; (8001664 <Interrupt_flank+0x88>)
 8001612:	881b      	ldrh	r3, [r3, #0]
 8001614:	2b01      	cmp	r3, #1
 8001616:	d921      	bls.n	800165c <Interrupt_flank+0x80>
			{
				HAL_TIM_Base_Stop(&TIM_1us); //timer stoppen
 8001618:	4813      	ldr	r0, [pc, #76]	; (8001668 <Interrupt_flank+0x8c>)
 800161a:	f004 fd4f 	bl	80060bc <HAL_TIM_Base_Stop>
				tijd[pulsecounter] = TIM_1us.Instance -> CNT; //timer opslaan
 800161e:	4b12      	ldr	r3, [pc, #72]	; (8001668 <Interrupt_flank+0x8c>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001624:	4b12      	ldr	r3, [pc, #72]	; (8001670 <Interrupt_flank+0x94>)
 8001626:	881b      	ldrh	r3, [r3, #0]
 8001628:	461a      	mov	r2, r3
 800162a:	b289      	uxth	r1, r1
 800162c:	4b11      	ldr	r3, [pc, #68]	; (8001674 <Interrupt_flank+0x98>)
 800162e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				lengte = pulsecounter;
 8001632:	4b0f      	ldr	r3, [pc, #60]	; (8001670 <Interrupt_flank+0x94>)
 8001634:	881a      	ldrh	r2, [r3, #0]
 8001636:	4b10      	ldr	r3, [pc, #64]	; (8001678 <Interrupt_flank+0x9c>)
 8001638:	801a      	strh	r2, [r3, #0]
				pulsecounter++;
 800163a:	4b0d      	ldr	r3, [pc, #52]	; (8001670 <Interrupt_flank+0x94>)
 800163c:	881b      	ldrh	r3, [r3, #0]
 800163e:	3301      	adds	r3, #1
 8001640:	b29a      	uxth	r2, r3
 8001642:	4b0b      	ldr	r3, [pc, #44]	; (8001670 <Interrupt_flank+0x94>)
 8001644:	801a      	strh	r2, [r3, #0]
				TIM_1us.Instance -> CNT = 0;
 8001646:	4b08      	ldr	r3, [pc, #32]	; (8001668 <Interrupt_flank+0x8c>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2200      	movs	r2, #0
 800164c:	625a      	str	r2, [r3, #36]	; 0x24
				HAL_TIM_Base_Start(&TIM_1us);
 800164e:	4806      	ldr	r0, [pc, #24]	; (8001668 <Interrupt_flank+0x8c>)
 8001650:	f004 fce8 	bl	8006024 <HAL_TIM_Base_Start>
	else
	{
		printf("ik kan niet werken, aangezien ik uit sta\r\n");
	}

}
 8001654:	e002      	b.n	800165c <Interrupt_flank+0x80>
		printf("ik kan niet werken, aangezien ik uit sta\r\n");
 8001656:	4809      	ldr	r0, [pc, #36]	; (800167c <Interrupt_flank+0xa0>)
 8001658:	f006 fa8e 	bl	8007b78 <puts>
}
 800165c:	bf00      	nop
 800165e:	bd80      	pop	{r7, pc}
 8001660:	20002812 	.word	0x20002812
 8001664:	20002c02 	.word	0x20002c02
 8001668:	20002d14 	.word	0x20002d14
 800166c:	20002c04 	.word	0x20002c04
 8001670:	20002810 	.word	0x20002810
 8001674:	20002818 	.word	0x20002818
 8001678:	20002814 	.word	0x20002814
 800167c:	08008e28 	.word	0x08008e28

08001680 <IR_Carrier_ON>:
void IR_Carrier_ON()
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&TIM_PWM_CARRIER, TIM_PWM_CARRIER_CHANNEL);
 8001684:	2100      	movs	r1, #0
 8001686:	4802      	ldr	r0, [pc, #8]	; (8001690 <IR_Carrier_ON+0x10>)
 8001688:	f004 fd96 	bl	80061b8 <HAL_TIM_PWM_Start>
}
 800168c:	bf00      	nop
 800168e:	bd80      	pop	{r7, pc}
 8001690:	20002cc8 	.word	0x20002cc8

08001694 <IR_Carrier_OFF>:
void IR_Carrier_OFF()
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
	TIM_PWM_CARRIER.Instance->CCR1 = 0;
 8001698:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <IR_Carrier_OFF+0x20>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2200      	movs	r2, #0
 800169e:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Stop(&TIM_PWM_CARRIER, TIM_PWM_CARRIER_CHANNEL);
 80016a0:	2100      	movs	r1, #0
 80016a2:	4804      	ldr	r0, [pc, #16]	; (80016b4 <IR_Carrier_OFF+0x20>)
 80016a4:	f004 fe6e 	bl	8006384 <HAL_TIM_PWM_Stop>
	TIM_PWM_CARRIER.Instance->CCR1 = 211-1;
 80016a8:	4b02      	ldr	r3, [pc, #8]	; (80016b4 <IR_Carrier_OFF+0x20>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	22d2      	movs	r2, #210	; 0xd2
 80016ae:	635a      	str	r2, [r3, #52]	; 0x34
}
 80016b0:	bf00      	nop
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	20002cc8 	.word	0x20002cc8

080016b8 <IR_Read>:
void IR_Read()
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
	IR_READ_flag = 1 ;
 80016bc:	4b03      	ldr	r3, [pc, #12]	; (80016cc <IR_Read+0x14>)
 80016be:	2201      	movs	r2, #1
 80016c0:	701a      	strb	r2, [r3, #0]
}
 80016c2:	bf00      	nop
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr
 80016cc:	20002812 	.word	0x20002812

080016d0 <IR_UNDERSTAND>:

void IR_UNDERSTAND(uint8_t *berekening, uint8_t *geen_signaal, uint8_t *lengte_signaal_gevonden)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	607a      	str	r2, [r7, #4]
	if(HAL_GetTick() >= eerste_flank_plus_2sec)
 80016dc:	f001 f966 	bl	80029ac <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	4b4f      	ldr	r3, [pc, #316]	; (8001820 <IR_UNDERSTAND+0x150>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	429a      	cmp	r2, r3
 80016e8:	f0c0 8096 	bcc.w	8001818 <IR_UNDERSTAND+0x148>
	{
		if(*geen_signaal == 0)
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d14a      	bne.n	800178a <IR_UNDERSTAND+0xba>
		{
	//geen_signaal in het begin op 0 zetten, geen signaal =0, wel een signaal = 1, lengte gevonden = 2
	//5 metingen test
			uint8_t measurement = 0;
 80016f4:	2300      	movs	r3, #0
 80016f6:	75fb      	strb	r3, [r7, #23]
			for(uint8_t five_measurements = 0; five_measurements < 5; five_measurements++)
 80016f8:	2300      	movs	r3, #0
 80016fa:	75bb      	strb	r3, [r7, #22]
 80016fc:	e00b      	b.n	8001716 <IR_UNDERSTAND+0x46>
			{
				if(tijd[five_measurements] == 0)
 80016fe:	7dbb      	ldrb	r3, [r7, #22]
 8001700:	4a48      	ldr	r2, [pc, #288]	; (8001824 <IR_UNDERSTAND+0x154>)
 8001702:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d102      	bne.n	8001710 <IR_UNDERSTAND+0x40>
				{
				measurement++;
 800170a:	7dfb      	ldrb	r3, [r7, #23]
 800170c:	3301      	adds	r3, #1
 800170e:	75fb      	strb	r3, [r7, #23]
			for(uint8_t five_measurements = 0; five_measurements < 5; five_measurements++)
 8001710:	7dbb      	ldrb	r3, [r7, #22]
 8001712:	3301      	adds	r3, #1
 8001714:	75bb      	strb	r3, [r7, #22]
 8001716:	7dbb      	ldrb	r3, [r7, #22]
 8001718:	2b04      	cmp	r3, #4
 800171a:	d9f0      	bls.n	80016fe <IR_UNDERSTAND+0x2e>
				}
			}
		if(measurement == 5)
 800171c:	7dfb      	ldrb	r3, [r7, #23]
 800171e:	2b05      	cmp	r3, #5
 8001720:	d106      	bne.n	8001730 <IR_UNDERSTAND+0x60>
		{
			printf("Er is niks gemeten \r\n");
 8001722:	4841      	ldr	r0, [pc, #260]	; (8001828 <IR_UNDERSTAND+0x158>)
 8001724:	f006 fa28 	bl	8007b78 <puts>
			*geen_signaal = 0;
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	2200      	movs	r2, #0
 800172c:	701a      	strb	r2, [r3, #0]
 800172e:	e00c      	b.n	800174a <IR_UNDERSTAND+0x7a>
		}
		else
		{
			printf("Er is iets gemeten %d \r\n", lengte_signaal[commando]);
 8001730:	4b3e      	ldr	r3, [pc, #248]	; (800182c <IR_UNDERSTAND+0x15c>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	461a      	mov	r2, r3
 8001736:	4b3e      	ldr	r3, [pc, #248]	; (8001830 <IR_UNDERSTAND+0x160>)
 8001738:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800173c:	4619      	mov	r1, r3
 800173e:	483d      	ldr	r0, [pc, #244]	; (8001834 <IR_UNDERSTAND+0x164>)
 8001740:	f006 f994 	bl	8007a6c <iprintf>
			*geen_signaal = 1;
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	2201      	movs	r2, #1
 8001748:	701a      	strb	r2, [r3, #0]
		}

		if(IR_ReadMark == 0)
 800174a:	4b3b      	ldr	r3, [pc, #236]	; (8001838 <IR_UNDERSTAND+0x168>)
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d10b      	bne.n	800176a <IR_UNDERSTAND+0x9a>
		{
			IR_ReadMark_First_time = HAL_GetTick();
 8001752:	f001 f92b 	bl	80029ac <HAL_GetTick>
 8001756:	4603      	mov	r3, r0
 8001758:	4a38      	ldr	r2, [pc, #224]	; (800183c <IR_UNDERSTAND+0x16c>)
 800175a:	6013      	str	r3, [r2, #0]
			IR_ReadMark++;
 800175c:	4b36      	ldr	r3, [pc, #216]	; (8001838 <IR_UNDERSTAND+0x168>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	3301      	adds	r3, #1
 8001762:	b2da      	uxtb	r2, r3
 8001764:	4b34      	ldr	r3, [pc, #208]	; (8001838 <IR_UNDERSTAND+0x168>)
 8001766:	701a      	strb	r2, [r3, #0]
 8001768:	e00f      	b.n	800178a <IR_UNDERSTAND+0xba>
		}
		else
		{
		if(HAL_GetTick() >= IR_ReadMark_First_time + 5000)
 800176a:	f001 f91f 	bl	80029ac <HAL_GetTick>
 800176e:	4602      	mov	r2, r0
 8001770:	4b32      	ldr	r3, [pc, #200]	; (800183c <IR_UNDERSTAND+0x16c>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8001778:	3308      	adds	r3, #8
 800177a:	429a      	cmp	r2, r3
 800177c:	d305      	bcc.n	800178a <IR_UNDERSTAND+0xba>
		{
			printf("Geen signaal gevonden in 5 sec tijd\r\n");
 800177e:	4830      	ldr	r0, [pc, #192]	; (8001840 <IR_UNDERSTAND+0x170>)
 8001780:	f006 f9fa 	bl	8007b78 <puts>
			*geen_signaal = 4; //ga uit de whilelus
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	2204      	movs	r2, #4
 8001788:	701a      	strb	r2, [r3, #0]

		}
		}
		}
	if(*geen_signaal == 1)   //als er een signaal gevonden is
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d142      	bne.n	8001818 <IR_UNDERSTAND+0x148>
		{

			if(*lengte_signaal_gevonden == 0)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d13e      	bne.n	8001818 <IR_UNDERSTAND+0x148>
			{

				for(uint16_t debugwaarde = 0; debugwaarde < 500 ; debugwaarde++)
 800179a:	2300      	movs	r3, #0
 800179c:	82bb      	strh	r3, [r7, #20]
 800179e:	e00b      	b.n	80017b8 <IR_UNDERSTAND+0xe8>
				{
				 printf("tijd[%d] = %d \r\n", debugwaarde, tijd[debugwaarde]);
 80017a0:	8ab9      	ldrh	r1, [r7, #20]
 80017a2:	8abb      	ldrh	r3, [r7, #20]
 80017a4:	4a1f      	ldr	r2, [pc, #124]	; (8001824 <IR_UNDERSTAND+0x154>)
 80017a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80017aa:	461a      	mov	r2, r3
 80017ac:	4825      	ldr	r0, [pc, #148]	; (8001844 <IR_UNDERSTAND+0x174>)
 80017ae:	f006 f95d 	bl	8007a6c <iprintf>
				for(uint16_t debugwaarde = 0; debugwaarde < 500 ; debugwaarde++)
 80017b2:	8abb      	ldrh	r3, [r7, #20]
 80017b4:	3301      	adds	r3, #1
 80017b6:	82bb      	strh	r3, [r7, #20]
 80017b8:	8abb      	ldrh	r3, [r7, #20]
 80017ba:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80017be:	d3ef      	bcc.n	80017a0 <IR_UNDERSTAND+0xd0>
				}
				uint16_t waarde = 499;
 80017c0:	f240 13f3 	movw	r3, #499	; 0x1f3
 80017c4:	827b      	strh	r3, [r7, #18]
				while(tijd[waarde] == 0)
 80017c6:	e002      	b.n	80017ce <IR_UNDERSTAND+0xfe>
				{
				waarde--;
 80017c8:	8a7b      	ldrh	r3, [r7, #18]
 80017ca:	3b01      	subs	r3, #1
 80017cc:	827b      	strh	r3, [r7, #18]
				while(tijd[waarde] == 0)
 80017ce:	8a7b      	ldrh	r3, [r7, #18]
 80017d0:	4a14      	ldr	r2, [pc, #80]	; (8001824 <IR_UNDERSTAND+0x154>)
 80017d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d0f6      	beq.n	80017c8 <IR_UNDERSTAND+0xf8>
				}
				lengte_signaal[*berekening] = waarde+1;//new +1
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	461a      	mov	r2, r3
 80017e0:	8a7b      	ldrh	r3, [r7, #18]
 80017e2:	3301      	adds	r3, #1
 80017e4:	b299      	uxth	r1, r3
 80017e6:	4b12      	ldr	r3, [pc, #72]	; (8001830 <IR_UNDERSTAND+0x160>)
 80017e8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				printf("lengte signaal = %d\r\n", lengte_signaal[*berekening]);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	461a      	mov	r2, r3
 80017f2:	4b0f      	ldr	r3, [pc, #60]	; (8001830 <IR_UNDERSTAND+0x160>)
 80017f4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80017f8:	4619      	mov	r1, r3
 80017fa:	4813      	ldr	r0, [pc, #76]	; (8001848 <IR_UNDERSTAND+0x178>)
 80017fc:	f006 f936 	bl	8007a6c <iprintf>
				printf("trouwens berekening= %d\r\n", *berekening);
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	4619      	mov	r1, r3
 8001806:	4811      	ldr	r0, [pc, #68]	; (800184c <IR_UNDERSTAND+0x17c>)
 8001808:	f006 f930 	bl	8007a6c <iprintf>
				*lengte_signaal_gevonden = 1;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2201      	movs	r2, #1
 8001810:	701a      	strb	r2, [r3, #0]
				*geen_signaal=2; //ga uit de whilelus
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	2202      	movs	r2, #2
 8001816:	701a      	strb	r2, [r3, #0]
			}
		}
	}

}
 8001818:	bf00      	nop
 800181a:	3718      	adds	r7, #24
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	20002c04 	.word	0x20002c04
 8001824:	20002818 	.word	0x20002818
 8001828:	08008e54 	.word	0x08008e54
 800182c:	20002c00 	.word	0x20002c00
 8001830:	2000271c 	.word	0x2000271c
 8001834:	08008e6c 	.word	0x08008e6c
 8001838:	20002c09 	.word	0x20002c09
 800183c:	20002c0c 	.word	0x20002c0c
 8001840:	08008e88 	.word	0x08008e88
 8001844:	08008eb0 	.word	0x08008eb0
 8001848:	08008ec4 	.word	0x08008ec4
 800184c:	08008edc 	.word	0x08008edc

08001850 <IR_sent>:



void IR_sent(uint16_t *tijd, uint16_t lengte_sig)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	460b      	mov	r3, r1
 800185a:	807b      	strh	r3, [r7, #2]
	printf("lengte in IR_sent is %d en eerste tijdswaarden is %d en de tweede %d \r\n", lengte_sig, tijd[0], tijd[1]);
 800185c:	8879      	ldrh	r1, [r7, #2]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	881b      	ldrh	r3, [r3, #0]
 8001862:	461a      	mov	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	3302      	adds	r3, #2
 8001868:	881b      	ldrh	r3, [r3, #0]
 800186a:	4826      	ldr	r0, [pc, #152]	; (8001904 <IR_sent+0xb4>)
 800186c:	f006 f8fe 	bl	8007a6c <iprintf>
   IR_READ_flag = 0; //er kan niks meer ingelezen worden
 8001870:	4b25      	ldr	r3, [pc, #148]	; (8001908 <IR_sent+0xb8>)
 8001872:	2200      	movs	r2, #0
 8001874:	701a      	strb	r2, [r3, #0]
   for(uint8_t i = 0; i < lengte_sig; i++)
 8001876:	2300      	movs	r3, #0
 8001878:	73fb      	strb	r3, [r7, #15]
 800187a:	e037      	b.n	80018ec <IR_sent+0x9c>
   {

	   if((i%2)==0)
 800187c:	7bfb      	ldrb	r3, [r7, #15]
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	b2db      	uxtb	r3, r3
 8001884:	2b00      	cmp	r3, #0
 8001886:	d117      	bne.n	80018b8 <IR_sent+0x68>
	   {
		   HAL_TIM_Base_Stop(&TIM_1us);
 8001888:	4820      	ldr	r0, [pc, #128]	; (800190c <IR_sent+0xbc>)
 800188a:	f004 fc17 	bl	80060bc <HAL_TIM_Base_Stop>
		   TIM_1us.Instance->CNT = 0;
 800188e:	4b1f      	ldr	r3, [pc, #124]	; (800190c <IR_sent+0xbc>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	2200      	movs	r2, #0
 8001894:	625a      	str	r2, [r3, #36]	; 0x24
		   HAL_TIM_Base_Start(&TIM_1us);
 8001896:	481d      	ldr	r0, [pc, #116]	; (800190c <IR_sent+0xbc>)
 8001898:	f004 fbc4 	bl	8006024 <HAL_TIM_Base_Start>
		   IR_Carrier_ON();
 800189c:	f7ff fef0 	bl	8001680 <IR_Carrier_ON>
		   while((TIM_1us.Instance->CNT) <= tijd[i]){}
 80018a0:	bf00      	nop
 80018a2:	4b1a      	ldr	r3, [pc, #104]	; (800190c <IR_sent+0xbc>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a8:	7bfa      	ldrb	r2, [r7, #15]
 80018aa:	0052      	lsls	r2, r2, #1
 80018ac:	6879      	ldr	r1, [r7, #4]
 80018ae:	440a      	add	r2, r1
 80018b0:	8812      	ldrh	r2, [r2, #0]
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d9f5      	bls.n	80018a2 <IR_sent+0x52>
 80018b6:	e016      	b.n	80018e6 <IR_sent+0x96>
	   }
	   else
	   {
		   HAL_TIM_Base_Stop(&TIM_1us);
 80018b8:	4814      	ldr	r0, [pc, #80]	; (800190c <IR_sent+0xbc>)
 80018ba:	f004 fbff 	bl	80060bc <HAL_TIM_Base_Stop>
		   TIM_1us.Instance->CNT = 0;
 80018be:	4b13      	ldr	r3, [pc, #76]	; (800190c <IR_sent+0xbc>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2200      	movs	r2, #0
 80018c4:	625a      	str	r2, [r3, #36]	; 0x24
		   HAL_TIM_Base_Start(&TIM_1us);
 80018c6:	4811      	ldr	r0, [pc, #68]	; (800190c <IR_sent+0xbc>)
 80018c8:	f004 fbac 	bl	8006024 <HAL_TIM_Base_Start>
		   IR_Carrier_OFF();
 80018cc:	f7ff fee2 	bl	8001694 <IR_Carrier_OFF>
		   while((TIM_1us.Instance->CNT) <= tijd[i]){}
 80018d0:	bf00      	nop
 80018d2:	4b0e      	ldr	r3, [pc, #56]	; (800190c <IR_sent+0xbc>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d8:	7bfa      	ldrb	r2, [r7, #15]
 80018da:	0052      	lsls	r2, r2, #1
 80018dc:	6879      	ldr	r1, [r7, #4]
 80018de:	440a      	add	r2, r1
 80018e0:	8812      	ldrh	r2, [r2, #0]
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d9f5      	bls.n	80018d2 <IR_sent+0x82>
   for(uint8_t i = 0; i < lengte_sig; i++)
 80018e6:	7bfb      	ldrb	r3, [r7, #15]
 80018e8:	3301      	adds	r3, #1
 80018ea:	73fb      	strb	r3, [r7, #15]
 80018ec:	7bfb      	ldrb	r3, [r7, #15]
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	887a      	ldrh	r2, [r7, #2]
 80018f2:	429a      	cmp	r2, r3
 80018f4:	d8c2      	bhi.n	800187c <IR_sent+0x2c>

	   }
   }
   IR_Carrier_OFF();
 80018f6:	f7ff fecd 	bl	8001694 <IR_Carrier_OFF>
}
 80018fa:	bf00      	nop
 80018fc:	3710      	adds	r7, #16
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	08008ef8 	.word	0x08008ef8
 8001908:	20002812 	.word	0x20002812
 800190c:	20002d14 	.word	0x20002d14

08001910 <InitTouch>:
#define Tim_Backlight htim10



void InitTouch()
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b088      	sub	sp, #32
 8001914:	af02      	add	r7, sp, #8
	uint16_t device_address_write = 0xBA;
 8001916:	23ba      	movs	r3, #186	; 0xba
 8001918:	82fb      	strh	r3, [r7, #22]
	uint16_t device_address_read = 0xBB;
 800191a:	23bb      	movs	r3, #187	; 0xbb
 800191c:	82bb      	strh	r3, [r7, #20]
	uint8_t dataWrite[] = {0x81,0x40};
 800191e:	f244 0381 	movw	r3, #16513	; 0x4081
 8001922:	823b      	strh	r3, [r7, #16]
	uint8_t ontvangen[11];
	HAL_I2C_Master_Transmit(&hi2c1, device_address_write, 0, 0 , HAL_MAX_DELAY); //new
 8001924:	8af9      	ldrh	r1, [r7, #22]
 8001926:	f04f 33ff 	mov.w	r3, #4294967295
 800192a:	9300      	str	r3, [sp, #0]
 800192c:	2300      	movs	r3, #0
 800192e:	2200      	movs	r2, #0
 8001930:	480c      	ldr	r0, [pc, #48]	; (8001964 <InitTouch+0x54>)
 8001932:	f001 fbb9 	bl	80030a8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c1, device_address_write, dataWrite, 2 , HAL_MAX_DELAY);
 8001936:	f107 0210 	add.w	r2, r7, #16
 800193a:	8af9      	ldrh	r1, [r7, #22]
 800193c:	f04f 33ff 	mov.w	r3, #4294967295
 8001940:	9300      	str	r3, [sp, #0]
 8001942:	2302      	movs	r3, #2
 8001944:	4807      	ldr	r0, [pc, #28]	; (8001964 <InitTouch+0x54>)
 8001946:	f001 fbaf 	bl	80030a8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, device_address_read, ontvangen, 11, HAL_MAX_DELAY); //
 800194a:	1d3a      	adds	r2, r7, #4
 800194c:	8ab9      	ldrh	r1, [r7, #20]
 800194e:	f04f 33ff 	mov.w	r3, #4294967295
 8001952:	9300      	str	r3, [sp, #0]
 8001954:	230b      	movs	r3, #11
 8001956:	4803      	ldr	r0, [pc, #12]	; (8001964 <InitTouch+0x54>)
 8001958:	f001 fc9a 	bl	8003290 <HAL_I2C_Master_Receive>
}
 800195c:	bf00      	nop
 800195e:	3718      	adds	r7, #24
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	20002c10 	.word	0x20002c10

08001968 <Touch>:
void Touch(uint8_t *Sensingtouch, uint16_t *X_waarde, uint16_t *Y_waarde)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b08e      	sub	sp, #56	; 0x38
 800196c:	af04      	add	r7, sp, #16
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	60b9      	str	r1, [r7, #8]
 8001972:	607a      	str	r2, [r7, #4]
	uint16_t device_address_write = 0xBA;
 8001974:	23ba      	movs	r3, #186	; 0xba
 8001976:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t device_address_read = 0xBB;
 8001978:	23bb      	movs	r3, #187	; 0xbb
 800197a:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint8_t nulladdress = 0x00;
 800197c:	2300      	movs	r3, #0
 800197e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23





		HAL_Delay(5);
 8001982:	2005      	movs	r0, #5
 8001984:	f001 f81e 	bl	80029c4 <HAL_Delay>
		HAL_I2C_Mem_Read(&myI2C, device_address_read, 0x814E, 2, buffer1, 1, HAL_MAX_DELAY);
 8001988:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800198a:	f04f 33ff 	mov.w	r3, #4294967295
 800198e:	9302      	str	r3, [sp, #8]
 8001990:	2301      	movs	r3, #1
 8001992:	9301      	str	r3, [sp, #4]
 8001994:	f107 0314 	add.w	r3, r7, #20
 8001998:	9300      	str	r3, [sp, #0]
 800199a:	2302      	movs	r3, #2
 800199c:	f248 124e 	movw	r2, #33102	; 0x814e
 80019a0:	482e      	ldr	r0, [pc, #184]	; (8001a5c <Touch+0xf4>)
 80019a2:	f001 fe7f 	bl	80036a4 <HAL_I2C_Mem_Read>
		if(buffer1[0] != 0x00)
 80019a6:	7d3b      	ldrb	r3, [r7, #20]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d04d      	beq.n	8001a48 <Touch+0xe0>
		{
			*Sensingtouch = 1;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2201      	movs	r2, #1
 80019b0:	701a      	strb	r2, [r3, #0]
			HAL_I2C_Mem_Read(&myI2C, device_address_read, 0x814F, 2, buffer, 12, HAL_MAX_DELAY);
 80019b2:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80019b4:	f04f 33ff 	mov.w	r3, #4294967295
 80019b8:	9302      	str	r3, [sp, #8]
 80019ba:	230c      	movs	r3, #12
 80019bc:	9301      	str	r3, [sp, #4]
 80019be:	f107 0314 	add.w	r3, r7, #20
 80019c2:	9300      	str	r3, [sp, #0]
 80019c4:	2302      	movs	r3, #2
 80019c6:	f248 124f 	movw	r2, #33103	; 0x814f
 80019ca:	4824      	ldr	r0, [pc, #144]	; (8001a5c <Touch+0xf4>)
 80019cc:	f001 fe6a 	bl	80036a4 <HAL_I2C_Mem_Read>
			if(buffer[4] == 1) //als buffer[3] het midden overschrijdt, dan gaat hij van 255 terug naar 0, en wordt buffer[4] op 1 gezet.
 80019d0:	7e3b      	ldrb	r3, [r7, #24]
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d106      	bne.n	80019e4 <Touch+0x7c>
			{
				*Y_waarde = 0xFF + buffer[3];
 80019d6:	7dfb      	ldrb	r3, [r7, #23]
 80019d8:	b29b      	uxth	r3, r3
 80019da:	33ff      	adds	r3, #255	; 0xff
 80019dc:	b29a      	uxth	r2, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	801a      	strh	r2, [r3, #0]
 80019e2:	e003      	b.n	80019ec <Touch+0x84>
			}
			else
			{
				*Y_waarde = buffer[3];
 80019e4:	7dfb      	ldrb	r3, [r7, #23]
 80019e6:	b29a      	uxth	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	801a      	strh	r2, [r3, #0]
			}
			if(buffer[2] == 1)
 80019ec:	7dbb      	ldrb	r3, [r7, #22]
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d106      	bne.n	8001a00 <Touch+0x98>
			{
				*X_waarde = 0xFF + buffer[1];
 80019f2:	7d7b      	ldrb	r3, [r7, #21]
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	33ff      	adds	r3, #255	; 0xff
 80019f8:	b29a      	uxth	r2, r3
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	801a      	strh	r2, [r3, #0]
 80019fe:	e003      	b.n	8001a08 <Touch+0xa0>
			}
			else
			{
				*X_waarde = buffer[1];
 8001a00:	7d7b      	ldrb	r3, [r7, #21]
 8001a02:	b29a      	uxth	r2, r3
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	801a      	strh	r2, [r3, #0]
			}
						if(UartScreen == 1)
 8001a08:	4b15      	ldr	r3, [pc, #84]	; (8001a60 <Touch+0xf8>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d10b      	bne.n	8001a28 <Touch+0xc0>
							{
						printf("X= %d\r\n", *X_waarde);
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	881b      	ldrh	r3, [r3, #0]
 8001a14:	4619      	mov	r1, r3
 8001a16:	4813      	ldr	r0, [pc, #76]	; (8001a64 <Touch+0xfc>)
 8001a18:	f006 f828 	bl	8007a6c <iprintf>
						printf("Y= %d\r\n", *Y_waarde);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	881b      	ldrh	r3, [r3, #0]
 8001a20:	4619      	mov	r1, r3
 8001a22:	4811      	ldr	r0, [pc, #68]	; (8001a68 <Touch+0x100>)
 8001a24:	f006 f822 	bl	8007a6c <iprintf>
							}

			HAL_I2C_Mem_Write(&myI2C, device_address_write, 0x814E, 2, &nulladdress, 1, HAL_MAX_DELAY); //de flag uitzetten
 8001a28:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8001a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a2e:	9302      	str	r3, [sp, #8]
 8001a30:	2301      	movs	r3, #1
 8001a32:	9301      	str	r3, [sp, #4]
 8001a34:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8001a38:	9300      	str	r3, [sp, #0]
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	f248 124e 	movw	r2, #33102	; 0x814e
 8001a40:	4806      	ldr	r0, [pc, #24]	; (8001a5c <Touch+0xf4>)
 8001a42:	f001 fd1b 	bl	800347c <HAL_I2C_Mem_Write>
 8001a46:	e002      	b.n	8001a4e <Touch+0xe6>
		}
		else
		{
			*Sensingtouch = 0;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	701a      	strb	r2, [r3, #0]
		}
		HAL_Delay(100);
 8001a4e:	2064      	movs	r0, #100	; 0x64
 8001a50:	f000 ffb8 	bl	80029c4 <HAL_Delay>
		}
 8001a54:	bf00      	nop
 8001a56:	3728      	adds	r7, #40	; 0x28
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	20002c10 	.word	0x20002c10
 8001a60:	20000000 	.word	0x20000000
 8001a64:	08008f40 	.word	0x08008f40
 8001a68:	08008f48 	.word	0x08008f48

08001a6c <ReadDevice>:

void ReadDevice(uint8_t *device, uint16_t *X_w, uint16_t *Y_w)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b08a      	sub	sp, #40	; 0x28
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	60b9      	str	r1, [r7, #8]
 8001a76:	607a      	str	r2, [r7, #4]
	uint16_t X_waarde = *X_w;
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	881b      	ldrh	r3, [r3, #0]
 8001a7c:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t Y_waarde = *Y_w;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	881b      	ldrh	r3, [r3, #0]
 8001a82:	847b      	strh	r3, [r7, #34]	; 0x22
	const uint16_t X_waarde_knoppen[] = {0,80,160,240};
 8001a84:	4a24      	ldr	r2, [pc, #144]	; (8001b18 <ReadDevice+0xac>)
 8001a86:	f107 0318 	add.w	r3, r7, #24
 8001a8a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a8e:	e883 0003 	stmia.w	r3, {r0, r1}
	const uint16_t Y_waarde_knoppen[] = {0,40};
 8001a92:	2300      	movs	r3, #0
 8001a94:	82bb      	strh	r3, [r7, #20]
 8001a96:	2328      	movs	r3, #40	; 0x28
 8001a98:	82fb      	strh	r3, [r7, #22]
	uint8_t apparaat = 0; //if device = 0 , dan is er geen device geselecteerd
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

		for(uint8_t i = 1; i<= 4; i++)
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001aa6:	e02d      	b.n	8001b04 <ReadDevice+0x98>
		{
		if((X_waarde >= X_waarde_knoppen[i-1])&&(X_waarde <=X_waarde_knoppen[i-1]+79)&&(Y_waarde >= Y_waarde_knoppen[0])&&(Y_waarde <=Y_waarde_knoppen[1]))
 8001aa8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001aac:	3b01      	subs	r3, #1
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	3328      	adds	r3, #40	; 0x28
 8001ab2:	443b      	add	r3, r7
 8001ab4:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8001ab8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d31d      	bcc.n	8001afa <ReadDevice+0x8e>
 8001abe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001ac0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ac4:	3b01      	subs	r3, #1
 8001ac6:	005b      	lsls	r3, r3, #1
 8001ac8:	3328      	adds	r3, #40	; 0x28
 8001aca:	443b      	add	r3, r7
 8001acc:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8001ad0:	334f      	adds	r3, #79	; 0x4f
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	dc11      	bgt.n	8001afa <ReadDevice+0x8e>
 8001ad6:	8abb      	ldrh	r3, [r7, #20]
 8001ad8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d30d      	bcc.n	8001afa <ReadDevice+0x8e>
 8001ade:	8afb      	ldrh	r3, [r7, #22]
 8001ae0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d809      	bhi.n	8001afa <ReadDevice+0x8e>
		{
			*device = i;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001aec:	701a      	strb	r2, [r3, #0]
			printf("device %d\r\n", i);
 8001aee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001af2:	4619      	mov	r1, r3
 8001af4:	4809      	ldr	r0, [pc, #36]	; (8001b1c <ReadDevice+0xb0>)
 8001af6:	f005 ffb9 	bl	8007a6c <iprintf>
		for(uint8_t i = 1; i<= 4; i++)
 8001afa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001afe:	3301      	adds	r3, #1
 8001b00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001b04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b08:	2b04      	cmp	r3, #4
 8001b0a:	d9cd      	bls.n	8001aa8 <ReadDevice+0x3c>

		}
		}


}
 8001b0c:	bf00      	nop
 8001b0e:	bf00      	nop
 8001b10:	3728      	adds	r7, #40	; 0x28
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	08008f5c 	.word	0x08008f5c
 8001b1c:	08008f50 	.word	0x08008f50

08001b20 <ReadButton>:
void ReadButton(uint8_t *button, uint16_t *X_w, uint16_t *Y_w){
 8001b20:	b5b0      	push	{r4, r5, r7, lr}
 8001b22:	b094      	sub	sp, #80	; 0x50
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	60f8      	str	r0, [r7, #12]
 8001b28:	60b9      	str	r1, [r7, #8]
 8001b2a:	607a      	str	r2, [r7, #4]
	uint16_t X_waarde = *X_w;
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	881b      	ldrh	r3, [r3, #0]
 8001b30:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	uint16_t Y_waarde = *Y_w;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	881b      	ldrh	r3, [r3, #0]
 8001b38:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	const uint16_t X_waarde_knoppen[] = {23,219,121,23,121,219,121,23,23,121,219,219,23,219};
 8001b3c:	4b51      	ldr	r3, [pc, #324]	; (8001c84 <ReadButton+0x164>)
 8001b3e:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8001b42:	461d      	mov	r5, r3
 8001b44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b48:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b4c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	const uint16_t Y_waarde_knoppen[] = {50,50,90,175,175,175,260,298,393,393,298,393,245,245};
 8001b50:	4b4d      	ldr	r3, [pc, #308]	; (8001c88 <ReadButton+0x168>)
 8001b52:	f107 0410 	add.w	r4, r7, #16
 8001b56:	461d      	mov	r5, r3
 8001b58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b5c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b60:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	 * knop13: Add
	 * knop14: Delete
	 */


		for(uint8_t i = 1; i<= 14; i++)
 8001b64:	2301      	movs	r3, #1
 8001b66:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001b6a:	e081      	b.n	8001c70 <ReadButton+0x150>
		{
			if(i <= 12)
 8001b6c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001b70:	2b0c      	cmp	r3, #12
 8001b72:	d83c      	bhi.n	8001bee <ReadButton+0xce>
			{
				//hier lees ik mijn touch uit
				if((X_waarde >= X_waarde_knoppen[i-1])&&(X_waarde <=X_waarde_knoppen[i-1]+75)&&(Y_waarde >= Y_waarde_knoppen[i-1])&&(Y_waarde <=Y_waarde_knoppen[i-1]+75))
 8001b74:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001b78:	3b01      	subs	r3, #1
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	3350      	adds	r3, #80	; 0x50
 8001b7e:	443b      	add	r3, r7
 8001b80:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8001b84:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d36c      	bcc.n	8001c66 <ReadButton+0x146>
 8001b8c:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8001b90:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001b94:	3b01      	subs	r3, #1
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	3350      	adds	r3, #80	; 0x50
 8001b9a:	443b      	add	r3, r7
 8001b9c:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8001ba0:	334b      	adds	r3, #75	; 0x4b
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	dc5f      	bgt.n	8001c66 <ReadButton+0x146>
 8001ba6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001baa:	3b01      	subs	r3, #1
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	3350      	adds	r3, #80	; 0x50
 8001bb0:	443b      	add	r3, r7
 8001bb2:	f833 3c40 	ldrh.w	r3, [r3, #-64]
 8001bb6:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d353      	bcc.n	8001c66 <ReadButton+0x146>
 8001bbe:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8001bc2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	3350      	adds	r3, #80	; 0x50
 8001bcc:	443b      	add	r3, r7
 8001bce:	f833 3c40 	ldrh.w	r3, [r3, #-64]
 8001bd2:	334b      	adds	r3, #75	; 0x4b
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	dc46      	bgt.n	8001c66 <ReadButton+0x146>
				{

					*button = i;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8001bde:	701a      	strb	r2, [r3, #0]
					printf("geduwd op button %d\r\n", i);
 8001be0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001be4:	4619      	mov	r1, r3
 8001be6:	4829      	ldr	r0, [pc, #164]	; (8001c8c <ReadButton+0x16c>)
 8001be8:	f005 ff40 	bl	8007a6c <iprintf>
 8001bec:	e03b      	b.n	8001c66 <ReadButton+0x146>
				}
			}
			else
			{
				if((X_waarde >= X_waarde_knoppen[i-1])&&(X_waarde <=X_waarde_knoppen[i-1]+75)&&(Y_waarde >= Y_waarde_knoppen[i-1])&&(Y_waarde <=Y_waarde_knoppen[i-1]+48))
 8001bee:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	3350      	adds	r3, #80	; 0x50
 8001bf8:	443b      	add	r3, r7
 8001bfa:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8001bfe:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d32f      	bcc.n	8001c66 <ReadButton+0x146>
 8001c06:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8001c0a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	3350      	adds	r3, #80	; 0x50
 8001c14:	443b      	add	r3, r7
 8001c16:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8001c1a:	334b      	adds	r3, #75	; 0x4b
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	dc22      	bgt.n	8001c66 <ReadButton+0x146>
 8001c20:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001c24:	3b01      	subs	r3, #1
 8001c26:	005b      	lsls	r3, r3, #1
 8001c28:	3350      	adds	r3, #80	; 0x50
 8001c2a:	443b      	add	r3, r7
 8001c2c:	f833 3c40 	ldrh.w	r3, [r3, #-64]
 8001c30:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d316      	bcc.n	8001c66 <ReadButton+0x146>
 8001c38:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8001c3c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001c40:	3b01      	subs	r3, #1
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	3350      	adds	r3, #80	; 0x50
 8001c46:	443b      	add	r3, r7
 8001c48:	f833 3c40 	ldrh.w	r3, [r3, #-64]
 8001c4c:	3330      	adds	r3, #48	; 0x30
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	dc09      	bgt.n	8001c66 <ReadButton+0x146>
				{

				*button = i;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8001c58:	701a      	strb	r2, [r3, #0]
				printf("geduwd op button %d\r\n", i);
 8001c5a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001c5e:	4619      	mov	r1, r3
 8001c60:	480a      	ldr	r0, [pc, #40]	; (8001c8c <ReadButton+0x16c>)
 8001c62:	f005 ff03 	bl	8007a6c <iprintf>
		for(uint8_t i = 1; i<= 14; i++)
 8001c66:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001c70:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001c74:	2b0e      	cmp	r3, #14
 8001c76:	f67f af79 	bls.w	8001b6c <ReadButton+0x4c>
				}
			}
		}

}
 8001c7a:	bf00      	nop
 8001c7c:	bf00      	nop
 8001c7e:	3750      	adds	r7, #80	; 0x50
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bdb0      	pop	{r4, r5, r7, pc}
 8001c84:	08008f7c 	.word	0x08008f7c
 8001c88:	08008f98 	.word	0x08008f98
 8001c8c:	08008f64 	.word	0x08008f64

08001c90 <VibrateStart>:
extern TIM_HandleTypeDef htim17;

#define Tim_Vibration htim17

void VibrateStart()
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&Tim_Vibration, TIM_CHANNEL_1);
 8001c96:	2100      	movs	r1, #0
 8001c98:	4806      	ldr	r0, [pc, #24]	; (8001cb4 <VibrateStart+0x24>)
 8001c9a:	f004 fb73 	bl	8006384 <HAL_TIM_PWM_Stop>
	uint8_t vibration = 250;
 8001c9e:	23fa      	movs	r3, #250	; 0xfa
 8001ca0:	71fb      	strb	r3, [r7, #7]
	HAL_TIM_PWM_Start(&Tim_Vibration, TIM_CHANNEL_1);
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	4803      	ldr	r0, [pc, #12]	; (8001cb4 <VibrateStart+0x24>)
 8001ca6:	f004 fa87 	bl	80061b8 <HAL_TIM_PWM_Start>
}
 8001caa:	bf00      	nop
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	20002d60 	.word	0x20002d60

08001cb8 <VibrateStop>:
void VibrateStop()
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&Tim_Vibration, TIM_CHANNEL_1);
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	4802      	ldr	r0, [pc, #8]	; (8001cc8 <VibrateStop+0x10>)
 8001cc0:	f004 fb60 	bl	8006384 <HAL_TIM_PWM_Stop>
}
 8001cc4:	bf00      	nop
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	20002d60 	.word	0x20002d60

08001ccc <_write>:
/* USER CODE BEGIN 0 */
#include <errno.h>
#include <sys/stat.h>
#include <sys/times.h>
#include <sys/unistd.h>
int _write(int file, char *ptr, int len) {
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b086      	sub	sp, #24
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	60f8      	str	r0, [r7, #12]
 8001cd4:	60b9      	str	r1, [r7, #8]
 8001cd6:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef xStatus;
    switch (file) {
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d003      	beq.n	8001ce6 <_write+0x1a>
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d015      	beq.n	8001d10 <_write+0x44>
 8001ce4:	e029      	b.n	8001d3a <_write+0x6e>
    case STDOUT_FILENO: /*stdout*/
		xStatus = HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	b29a      	uxth	r2, r3
 8001cea:	f04f 33ff 	mov.w	r3, #4294967295
 8001cee:	68b9      	ldr	r1, [r7, #8]
 8001cf0:	481a      	ldr	r0, [pc, #104]	; (8001d5c <_write+0x90>)
 8001cf2:	f005 fab3 	bl	800725c <HAL_UART_Transmit>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	75fb      	strb	r3, [r7, #23]
		if (xStatus != HAL_OK) {
 8001cfa:	7dfb      	ldrb	r3, [r7, #23]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d024      	beq.n	8001d4a <_write+0x7e>
			errno = EIO;
 8001d00:	f005 fe82 	bl	8007a08 <__errno>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2205      	movs	r2, #5
 8001d08:	601a      	str	r2, [r3, #0]
			return -1;
 8001d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d0e:	e020      	b.n	8001d52 <_write+0x86>
		}
        break;
    case STDERR_FILENO: /* stderr */
		xStatus = HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	b29a      	uxth	r2, r3
 8001d14:	f04f 33ff 	mov.w	r3, #4294967295
 8001d18:	68b9      	ldr	r1, [r7, #8]
 8001d1a:	4810      	ldr	r0, [pc, #64]	; (8001d5c <_write+0x90>)
 8001d1c:	f005 fa9e 	bl	800725c <HAL_UART_Transmit>
 8001d20:	4603      	mov	r3, r0
 8001d22:	75fb      	strb	r3, [r7, #23]
		if (xStatus != HAL_OK) {
 8001d24:	7dfb      	ldrb	r3, [r7, #23]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d011      	beq.n	8001d4e <_write+0x82>
			errno = EIO;
 8001d2a:	f005 fe6d 	bl	8007a08 <__errno>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2205      	movs	r2, #5
 8001d32:	601a      	str	r2, [r3, #0]
			return -1;
 8001d34:	f04f 33ff 	mov.w	r3, #4294967295
 8001d38:	e00b      	b.n	8001d52 <_write+0x86>
		}
        break;
    default:
        errno = EBADF;
 8001d3a:	f005 fe65 	bl	8007a08 <__errno>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2209      	movs	r2, #9
 8001d42:	601a      	str	r2, [r3, #0]
        return -1;
 8001d44:	f04f 33ff 	mov.w	r3, #4294967295
 8001d48:	e003      	b.n	8001d52 <_write+0x86>
        break;
 8001d4a:	bf00      	nop
 8001d4c:	e000      	b.n	8001d50 <_write+0x84>
        break;
 8001d4e:	bf00      	nop
    }
    return len;
 8001d50:	687b      	ldr	r3, [r7, #4]
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3718      	adds	r7, #24
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	20002dac 	.word	0x20002dac

08001d60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d64:	f000 fdc8 	bl	80028f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d68:	f000 f814 	bl	8001d94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d6c:	f000 fa7c 	bl	8002268 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001d70:	f000 f8ee 	bl	8001f50 <MX_TIM1_Init>
  MX_TIM15_Init();
 8001d74:	f000 f97c 	bl	8002070 <MX_TIM15_Init>
  MX_USART1_UART_Init();
 8001d78:	f000 fa46 	bl	8002208 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 8001d7c:	f000 f8aa 	bl	8001ed4 <MX_SPI2_Init>
  MX_I2C1_Init();
 8001d80:	f000 f868 	bl	8001e54 <MX_I2C1_Init>
  MX_TIM17_Init();
 8001d84:	f000 f9c6 	bl	8002114 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
  All_Carl_Inits();
 8001d88:	f7fe faa4 	bl	80002d4 <All_Carl_Inits>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  whilelus();
 8001d8c:	f7fe fca8 	bl	80006e0 <whilelus>
 8001d90:	e7fc      	b.n	8001d8c <main+0x2c>
	...

08001d94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b09c      	sub	sp, #112	; 0x70
 8001d98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d9a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001d9e:	2228      	movs	r2, #40	; 0x28
 8001da0:	2100      	movs	r1, #0
 8001da2:	4618      	mov	r0, r3
 8001da4:	f005 fe5a 	bl	8007a5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001da8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]
 8001db0:	605a      	str	r2, [r3, #4]
 8001db2:	609a      	str	r2, [r3, #8]
 8001db4:	60da      	str	r2, [r3, #12]
 8001db6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001db8:	1d3b      	adds	r3, r7, #4
 8001dba:	2230      	movs	r2, #48	; 0x30
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f005 fe4c 	bl	8007a5c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001dcc:	2310      	movs	r3, #16
 8001dce:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001dd8:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001ddc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dde:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001de2:	4618      	mov	r0, r3
 8001de4:	f002 f94a 	bl	800407c <HAL_RCC_OscConfig>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001dee:	f000 faa9 	bl	8002344 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001df2:	230f      	movs	r3, #15
 8001df4:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001df6:	2302      	movs	r3, #2
 8001df8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001dfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e02:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e04:	2300      	movs	r3, #0
 8001e06:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001e08:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001e0c:	2102      	movs	r1, #2
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f003 f972 	bl	80050f8 <HAL_RCC_ClockConfig>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001e1a:	f000 fa93 	bl	8002344 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 8001e1e:	4b0c      	ldr	r3, [pc, #48]	; (8001e50 <SystemClock_Config+0xbc>)
 8001e20:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM15
                              |RCC_PERIPHCLK_TIM17;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001e22:	2300      	movs	r3, #0
 8001e24:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001e26:	2300      	movs	r3, #0
 8001e28:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLK_HCLK;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.Tim17ClockSelection = RCC_TIM17CLK_HCLK;
 8001e32:	2300      	movs	r3, #0
 8001e34:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e36:	1d3b      	adds	r3, r7, #4
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f003 fb93 	bl	8005564 <HAL_RCCEx_PeriphCLKConfig>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001e44:	f000 fa7e 	bl	8002344 <Error_Handler>
  }
}
 8001e48:	bf00      	nop
 8001e4a:	3770      	adds	r7, #112	; 0x70
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	00141021 	.word	0x00141021

08001e54 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001e58:	4b1b      	ldr	r3, [pc, #108]	; (8001ec8 <MX_I2C1_Init+0x74>)
 8001e5a:	4a1c      	ldr	r2, [pc, #112]	; (8001ecc <MX_I2C1_Init+0x78>)
 8001e5c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8001e5e:	4b1a      	ldr	r3, [pc, #104]	; (8001ec8 <MX_I2C1_Init+0x74>)
 8001e60:	4a1b      	ldr	r2, [pc, #108]	; (8001ed0 <MX_I2C1_Init+0x7c>)
 8001e62:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001e64:	4b18      	ldr	r3, [pc, #96]	; (8001ec8 <MX_I2C1_Init+0x74>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e6a:	4b17      	ldr	r3, [pc, #92]	; (8001ec8 <MX_I2C1_Init+0x74>)
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e70:	4b15      	ldr	r3, [pc, #84]	; (8001ec8 <MX_I2C1_Init+0x74>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001e76:	4b14      	ldr	r3, [pc, #80]	; (8001ec8 <MX_I2C1_Init+0x74>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001e7c:	4b12      	ldr	r3, [pc, #72]	; (8001ec8 <MX_I2C1_Init+0x74>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e82:	4b11      	ldr	r3, [pc, #68]	; (8001ec8 <MX_I2C1_Init+0x74>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e88:	4b0f      	ldr	r3, [pc, #60]	; (8001ec8 <MX_I2C1_Init+0x74>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e8e:	480e      	ldr	r0, [pc, #56]	; (8001ec8 <MX_I2C1_Init+0x74>)
 8001e90:	f001 f87b 	bl	8002f8a <HAL_I2C_Init>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001e9a:	f000 fa53 	bl	8002344 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	4809      	ldr	r0, [pc, #36]	; (8001ec8 <MX_I2C1_Init+0x74>)
 8001ea2:	f002 f853 	bl	8003f4c <HAL_I2CEx_ConfigAnalogFilter>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d001      	beq.n	8001eb0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001eac:	f000 fa4a 	bl	8002344 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	4805      	ldr	r0, [pc, #20]	; (8001ec8 <MX_I2C1_Init+0x74>)
 8001eb4:	f002 f895 	bl	8003fe2 <HAL_I2CEx_ConfigDigitalFilter>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001ebe:	f000 fa41 	bl	8002344 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ec2:	bf00      	nop
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	20002c10 	.word	0x20002c10
 8001ecc:	40005400 	.word	0x40005400
 8001ed0:	2000090e 	.word	0x2000090e

08001ed4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001ed8:	4b1b      	ldr	r3, [pc, #108]	; (8001f48 <MX_SPI2_Init+0x74>)
 8001eda:	4a1c      	ldr	r2, [pc, #112]	; (8001f4c <MX_SPI2_Init+0x78>)
 8001edc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001ede:	4b1a      	ldr	r3, [pc, #104]	; (8001f48 <MX_SPI2_Init+0x74>)
 8001ee0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ee4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001ee6:	4b18      	ldr	r3, [pc, #96]	; (8001f48 <MX_SPI2_Init+0x74>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001eec:	4b16      	ldr	r3, [pc, #88]	; (8001f48 <MX_SPI2_Init+0x74>)
 8001eee:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001ef2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ef4:	4b14      	ldr	r3, [pc, #80]	; (8001f48 <MX_SPI2_Init+0x74>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001efa:	4b13      	ldr	r3, [pc, #76]	; (8001f48 <MX_SPI2_Init+0x74>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001f00:	4b11      	ldr	r3, [pc, #68]	; (8001f48 <MX_SPI2_Init+0x74>)
 8001f02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f06:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f08:	4b0f      	ldr	r3, [pc, #60]	; (8001f48 <MX_SPI2_Init+0x74>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f0e:	4b0e      	ldr	r3, [pc, #56]	; (8001f48 <MX_SPI2_Init+0x74>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f14:	4b0c      	ldr	r3, [pc, #48]	; (8001f48 <MX_SPI2_Init+0x74>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f1a:	4b0b      	ldr	r3, [pc, #44]	; (8001f48 <MX_SPI2_Init+0x74>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001f20:	4b09      	ldr	r3, [pc, #36]	; (8001f48 <MX_SPI2_Init+0x74>)
 8001f22:	2207      	movs	r2, #7
 8001f24:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001f26:	4b08      	ldr	r3, [pc, #32]	; (8001f48 <MX_SPI2_Init+0x74>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001f2c:	4b06      	ldr	r3, [pc, #24]	; (8001f48 <MX_SPI2_Init+0x74>)
 8001f2e:	2208      	movs	r2, #8
 8001f30:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001f32:	4805      	ldr	r0, [pc, #20]	; (8001f48 <MX_SPI2_Init+0x74>)
 8001f34:	f003 fc9a 	bl	800586c <HAL_SPI_Init>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001f3e:	f000 fa01 	bl	8002344 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001f42:	bf00      	nop
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	20002c64 	.word	0x20002c64
 8001f4c:	40003800 	.word	0x40003800

08001f50 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b096      	sub	sp, #88	; 0x58
 8001f54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f56:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	601a      	str	r2, [r3, #0]
 8001f5e:	605a      	str	r2, [r3, #4]
 8001f60:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f62:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f66:	2200      	movs	r2, #0
 8001f68:	601a      	str	r2, [r3, #0]
 8001f6a:	605a      	str	r2, [r3, #4]
 8001f6c:	609a      	str	r2, [r3, #8]
 8001f6e:	60da      	str	r2, [r3, #12]
 8001f70:	611a      	str	r2, [r3, #16]
 8001f72:	615a      	str	r2, [r3, #20]
 8001f74:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f76:	1d3b      	adds	r3, r7, #4
 8001f78:	222c      	movs	r2, #44	; 0x2c
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f005 fd6d 	bl	8007a5c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f82:	4b39      	ldr	r3, [pc, #228]	; (8002068 <MX_TIM1_Init+0x118>)
 8001f84:	4a39      	ldr	r2, [pc, #228]	; (800206c <MX_TIM1_Init+0x11c>)
 8001f86:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4-1;
 8001f88:	4b37      	ldr	r3, [pc, #220]	; (8002068 <MX_TIM1_Init+0x118>)
 8001f8a:	2203      	movs	r2, #3
 8001f8c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f8e:	4b36      	ldr	r3, [pc, #216]	; (8002068 <MX_TIM1_Init+0x118>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 422-1;
 8001f94:	4b34      	ldr	r3, [pc, #208]	; (8002068 <MX_TIM1_Init+0x118>)
 8001f96:	f240 12a5 	movw	r2, #421	; 0x1a5
 8001f9a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f9c:	4b32      	ldr	r3, [pc, #200]	; (8002068 <MX_TIM1_Init+0x118>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001fa2:	4b31      	ldr	r3, [pc, #196]	; (8002068 <MX_TIM1_Init+0x118>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001fa8:	4b2f      	ldr	r3, [pc, #188]	; (8002068 <MX_TIM1_Init+0x118>)
 8001faa:	2280      	movs	r2, #128	; 0x80
 8001fac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001fae:	482e      	ldr	r0, [pc, #184]	; (8002068 <MX_TIM1_Init+0x118>)
 8001fb0:	f004 f8ab 	bl	800610a <HAL_TIM_PWM_Init>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001fba:	f000 f9c3 	bl	8002344 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001fca:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001fce:	4619      	mov	r1, r3
 8001fd0:	4825      	ldr	r0, [pc, #148]	; (8002068 <MX_TIM1_Init+0x118>)
 8001fd2:	f005 f817 	bl	8007004 <HAL_TIMEx_MasterConfigSynchronization>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001fdc:	f000 f9b2 	bl	8002344 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fe0:	2360      	movs	r3, #96	; 0x60
 8001fe2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 211-1;
 8001fe4:	23d2      	movs	r3, #210	; 0xd2
 8001fe6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001fec:	2300      	movs	r3, #0
 8001fee:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ffc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002000:	2200      	movs	r2, #0
 8002002:	4619      	mov	r1, r3
 8002004:	4818      	ldr	r0, [pc, #96]	; (8002068 <MX_TIM1_Init+0x118>)
 8002006:	f004 fa4b 	bl	80064a0 <HAL_TIM_PWM_ConfigChannel>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002010:	f000 f998 	bl	8002344 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002014:	2300      	movs	r3, #0
 8002016:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002018:	2300      	movs	r3, #0
 800201a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800201c:	2300      	movs	r3, #0
 800201e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002020:	2300      	movs	r3, #0
 8002022:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002024:	2300      	movs	r3, #0
 8002026:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002028:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800202c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800202e:	2300      	movs	r3, #0
 8002030:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002032:	2300      	movs	r3, #0
 8002034:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002036:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800203a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800203c:	2300      	movs	r3, #0
 800203e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002040:	2300      	movs	r3, #0
 8002042:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002044:	1d3b      	adds	r3, r7, #4
 8002046:	4619      	mov	r1, r3
 8002048:	4807      	ldr	r0, [pc, #28]	; (8002068 <MX_TIM1_Init+0x118>)
 800204a:	f005 f841 	bl	80070d0 <HAL_TIMEx_ConfigBreakDeadTime>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8002054:	f000 f976 	bl	8002344 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002058:	4803      	ldr	r0, [pc, #12]	; (8002068 <MX_TIM1_Init+0x118>)
 800205a:	f000 fab5 	bl	80025c8 <HAL_TIM_MspPostInit>

}
 800205e:	bf00      	nop
 8002060:	3758      	adds	r7, #88	; 0x58
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	20002cc8 	.word	0x20002cc8
 800206c:	40012c00 	.word	0x40012c00

08002070 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b088      	sub	sp, #32
 8002074:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002076:	f107 0310 	add.w	r3, r7, #16
 800207a:	2200      	movs	r2, #0
 800207c:	601a      	str	r2, [r3, #0]
 800207e:	605a      	str	r2, [r3, #4]
 8002080:	609a      	str	r2, [r3, #8]
 8002082:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002084:	1d3b      	adds	r3, r7, #4
 8002086:	2200      	movs	r2, #0
 8002088:	601a      	str	r2, [r3, #0]
 800208a:	605a      	str	r2, [r3, #4]
 800208c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800208e:	4b1f      	ldr	r3, [pc, #124]	; (800210c <MX_TIM15_Init+0x9c>)
 8002090:	4a1f      	ldr	r2, [pc, #124]	; (8002110 <MX_TIM15_Init+0xa0>)
 8002092:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 64-1;
 8002094:	4b1d      	ldr	r3, [pc, #116]	; (800210c <MX_TIM15_Init+0x9c>)
 8002096:	223f      	movs	r2, #63	; 0x3f
 8002098:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800209a:	4b1c      	ldr	r3, [pc, #112]	; (800210c <MX_TIM15_Init+0x9c>)
 800209c:	2200      	movs	r2, #0
 800209e:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 80020a0:	4b1a      	ldr	r3, [pc, #104]	; (800210c <MX_TIM15_Init+0x9c>)
 80020a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020a6:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020a8:	4b18      	ldr	r3, [pc, #96]	; (800210c <MX_TIM15_Init+0x9c>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80020ae:	4b17      	ldr	r3, [pc, #92]	; (800210c <MX_TIM15_Init+0x9c>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80020b4:	4b15      	ldr	r3, [pc, #84]	; (800210c <MX_TIM15_Init+0x9c>)
 80020b6:	2280      	movs	r2, #128	; 0x80
 80020b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80020ba:	4814      	ldr	r0, [pc, #80]	; (800210c <MX_TIM15_Init+0x9c>)
 80020bc:	f003 ff5a 	bl	8005f74 <HAL_TIM_Base_Init>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 80020c6:	f000 f93d 	bl	8002344 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020ce:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80020d0:	f107 0310 	add.w	r3, r7, #16
 80020d4:	4619      	mov	r1, r3
 80020d6:	480d      	ldr	r0, [pc, #52]	; (800210c <MX_TIM15_Init+0x9c>)
 80020d8:	f004 faf6 	bl	80066c8 <HAL_TIM_ConfigClockSource>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 80020e2:	f000 f92f 	bl	8002344 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020e6:	2300      	movs	r3, #0
 80020e8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020ea:	2300      	movs	r3, #0
 80020ec:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80020ee:	1d3b      	adds	r3, r7, #4
 80020f0:	4619      	mov	r1, r3
 80020f2:	4806      	ldr	r0, [pc, #24]	; (800210c <MX_TIM15_Init+0x9c>)
 80020f4:	f004 ff86 	bl	8007004 <HAL_TIMEx_MasterConfigSynchronization>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 80020fe:	f000 f921 	bl	8002344 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8002102:	bf00      	nop
 8002104:	3720      	adds	r7, #32
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	20002d14 	.word	0x20002d14
 8002110:	40014000 	.word	0x40014000

08002114 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b092      	sub	sp, #72	; 0x48
 8002118:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800211a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800211e:	2200      	movs	r2, #0
 8002120:	601a      	str	r2, [r3, #0]
 8002122:	605a      	str	r2, [r3, #4]
 8002124:	609a      	str	r2, [r3, #8]
 8002126:	60da      	str	r2, [r3, #12]
 8002128:	611a      	str	r2, [r3, #16]
 800212a:	615a      	str	r2, [r3, #20]
 800212c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800212e:	463b      	mov	r3, r7
 8002130:	222c      	movs	r2, #44	; 0x2c
 8002132:	2100      	movs	r1, #0
 8002134:	4618      	mov	r0, r3
 8002136:	f005 fc91 	bl	8007a5c <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800213a:	4b31      	ldr	r3, [pc, #196]	; (8002200 <MX_TIM17_Init+0xec>)
 800213c:	4a31      	ldr	r2, [pc, #196]	; (8002204 <MX_TIM17_Init+0xf0>)
 800213e:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 64000;
 8002140:	4b2f      	ldr	r3, [pc, #188]	; (8002200 <MX_TIM17_Init+0xec>)
 8002142:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8002146:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002148:	4b2d      	ldr	r3, [pc, #180]	; (8002200 <MX_TIM17_Init+0xec>)
 800214a:	2200      	movs	r2, #0
 800214c:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 256-1;
 800214e:	4b2c      	ldr	r3, [pc, #176]	; (8002200 <MX_TIM17_Init+0xec>)
 8002150:	22ff      	movs	r2, #255	; 0xff
 8002152:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002154:	4b2a      	ldr	r3, [pc, #168]	; (8002200 <MX_TIM17_Init+0xec>)
 8002156:	2200      	movs	r2, #0
 8002158:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800215a:	4b29      	ldr	r3, [pc, #164]	; (8002200 <MX_TIM17_Init+0xec>)
 800215c:	2200      	movs	r2, #0
 800215e:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002160:	4b27      	ldr	r3, [pc, #156]	; (8002200 <MX_TIM17_Init+0xec>)
 8002162:	2280      	movs	r2, #128	; 0x80
 8002164:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002166:	4826      	ldr	r0, [pc, #152]	; (8002200 <MX_TIM17_Init+0xec>)
 8002168:	f003 ff04 	bl	8005f74 <HAL_TIM_Base_Init>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8002172:	f000 f8e7 	bl	8002344 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8002176:	4822      	ldr	r0, [pc, #136]	; (8002200 <MX_TIM17_Init+0xec>)
 8002178:	f003 ffc7 	bl	800610a <HAL_TIM_PWM_Init>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8002182:	f000 f8df 	bl	8002344 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002186:	2360      	movs	r3, #96	; 0x60
 8002188:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 128-1;
 800218a:	237f      	movs	r3, #127	; 0x7f
 800218c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800218e:	2300      	movs	r3, #0
 8002190:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002192:	2300      	movs	r3, #0
 8002194:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002196:	2300      	movs	r3, #0
 8002198:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800219a:	2300      	movs	r3, #0
 800219c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800219e:	2300      	movs	r3, #0
 80021a0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021a6:	2200      	movs	r2, #0
 80021a8:	4619      	mov	r1, r3
 80021aa:	4815      	ldr	r0, [pc, #84]	; (8002200 <MX_TIM17_Init+0xec>)
 80021ac:	f004 f978 	bl	80064a0 <HAL_TIM_PWM_ConfigChannel>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 80021b6:	f000 f8c5 	bl	8002344 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80021ba:	2300      	movs	r3, #0
 80021bc:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80021be:	2300      	movs	r3, #0
 80021c0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80021c2:	2300      	movs	r3, #0
 80021c4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80021c6:	2300      	movs	r3, #0
 80021c8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80021ca:	2300      	movs	r3, #0
 80021cc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80021ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021d2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80021d4:	2300      	movs	r3, #0
 80021d6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80021d8:	2300      	movs	r3, #0
 80021da:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80021dc:	463b      	mov	r3, r7
 80021de:	4619      	mov	r1, r3
 80021e0:	4807      	ldr	r0, [pc, #28]	; (8002200 <MX_TIM17_Init+0xec>)
 80021e2:	f004 ff75 	bl	80070d0 <HAL_TIMEx_ConfigBreakDeadTime>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 80021ec:	f000 f8aa 	bl	8002344 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 80021f0:	4803      	ldr	r0, [pc, #12]	; (8002200 <MX_TIM17_Init+0xec>)
 80021f2:	f000 f9e9 	bl	80025c8 <HAL_TIM_MspPostInit>

}
 80021f6:	bf00      	nop
 80021f8:	3748      	adds	r7, #72	; 0x48
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	20002d60 	.word	0x20002d60
 8002204:	40014800 	.word	0x40014800

08002208 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800220c:	4b14      	ldr	r3, [pc, #80]	; (8002260 <MX_USART1_UART_Init+0x58>)
 800220e:	4a15      	ldr	r2, [pc, #84]	; (8002264 <MX_USART1_UART_Init+0x5c>)
 8002210:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002212:	4b13      	ldr	r3, [pc, #76]	; (8002260 <MX_USART1_UART_Init+0x58>)
 8002214:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002218:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800221a:	4b11      	ldr	r3, [pc, #68]	; (8002260 <MX_USART1_UART_Init+0x58>)
 800221c:	2200      	movs	r2, #0
 800221e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002220:	4b0f      	ldr	r3, [pc, #60]	; (8002260 <MX_USART1_UART_Init+0x58>)
 8002222:	2200      	movs	r2, #0
 8002224:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002226:	4b0e      	ldr	r3, [pc, #56]	; (8002260 <MX_USART1_UART_Init+0x58>)
 8002228:	2200      	movs	r2, #0
 800222a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800222c:	4b0c      	ldr	r3, [pc, #48]	; (8002260 <MX_USART1_UART_Init+0x58>)
 800222e:	220c      	movs	r2, #12
 8002230:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002232:	4b0b      	ldr	r3, [pc, #44]	; (8002260 <MX_USART1_UART_Init+0x58>)
 8002234:	2200      	movs	r2, #0
 8002236:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002238:	4b09      	ldr	r3, [pc, #36]	; (8002260 <MX_USART1_UART_Init+0x58>)
 800223a:	2200      	movs	r2, #0
 800223c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800223e:	4b08      	ldr	r3, [pc, #32]	; (8002260 <MX_USART1_UART_Init+0x58>)
 8002240:	2200      	movs	r2, #0
 8002242:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002244:	4b06      	ldr	r3, [pc, #24]	; (8002260 <MX_USART1_UART_Init+0x58>)
 8002246:	2200      	movs	r2, #0
 8002248:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800224a:	4805      	ldr	r0, [pc, #20]	; (8002260 <MX_USART1_UART_Init+0x58>)
 800224c:	f004 ffb8 	bl	80071c0 <HAL_UART_Init>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002256:	f000 f875 	bl	8002344 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800225a:	bf00      	nop
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	20002dac 	.word	0x20002dac
 8002264:	40013800 	.word	0x40013800

08002268 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b088      	sub	sp, #32
 800226c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800226e:	f107 030c 	add.w	r3, r7, #12
 8002272:	2200      	movs	r2, #0
 8002274:	601a      	str	r2, [r3, #0]
 8002276:	605a      	str	r2, [r3, #4]
 8002278:	609a      	str	r2, [r3, #8]
 800227a:	60da      	str	r2, [r3, #12]
 800227c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800227e:	4b30      	ldr	r3, [pc, #192]	; (8002340 <MX_GPIO_Init+0xd8>)
 8002280:	695b      	ldr	r3, [r3, #20]
 8002282:	4a2f      	ldr	r2, [pc, #188]	; (8002340 <MX_GPIO_Init+0xd8>)
 8002284:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002288:	6153      	str	r3, [r2, #20]
 800228a:	4b2d      	ldr	r3, [pc, #180]	; (8002340 <MX_GPIO_Init+0xd8>)
 800228c:	695b      	ldr	r3, [r3, #20]
 800228e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002292:	60bb      	str	r3, [r7, #8]
 8002294:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002296:	4b2a      	ldr	r3, [pc, #168]	; (8002340 <MX_GPIO_Init+0xd8>)
 8002298:	695b      	ldr	r3, [r3, #20]
 800229a:	4a29      	ldr	r2, [pc, #164]	; (8002340 <MX_GPIO_Init+0xd8>)
 800229c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022a0:	6153      	str	r3, [r2, #20]
 80022a2:	4b27      	ldr	r3, [pc, #156]	; (8002340 <MX_GPIO_Init+0xd8>)
 80022a4:	695b      	ldr	r3, [r3, #20]
 80022a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022aa:	607b      	str	r3, [r7, #4]
 80022ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ae:	4b24      	ldr	r3, [pc, #144]	; (8002340 <MX_GPIO_Init+0xd8>)
 80022b0:	695b      	ldr	r3, [r3, #20]
 80022b2:	4a23      	ldr	r2, [pc, #140]	; (8002340 <MX_GPIO_Init+0xd8>)
 80022b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022b8:	6153      	str	r3, [r2, #20]
 80022ba:	4b21      	ldr	r3, [pc, #132]	; (8002340 <MX_GPIO_Init+0xd8>)
 80022bc:	695b      	ldr	r3, [r3, #20]
 80022be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022c2:	603b      	str	r3, [r7, #0]
 80022c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DISPLAY_CS_Pin|DISPLAY_RESET_Pin|DISPLAY_DC_Pin, GPIO_PIN_RESET);
 80022c6:	2200      	movs	r2, #0
 80022c8:	21e0      	movs	r1, #224	; 0xe0
 80022ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022ce:	f000 fe21 	bl	8002f14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ReadIR_Pin */
  GPIO_InitStruct.Pin = ReadIR_Pin;
 80022d2:	2308      	movs	r3, #8
 80022d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80022d6:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80022da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022dc:	2300      	movs	r3, #0
 80022de:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ReadIR_GPIO_Port, &GPIO_InitStruct);
 80022e0:	f107 030c 	add.w	r3, r7, #12
 80022e4:	4619      	mov	r1, r3
 80022e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022ea:	f000 fca1 	bl	8002c30 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 80022ee:	2310      	movs	r3, #16
 80022f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80022f2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80022f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022f8:	2301      	movs	r3, #1
 80022fa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 80022fc:	f107 030c 	add.w	r3, r7, #12
 8002300:	4619      	mov	r1, r3
 8002302:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002306:	f000 fc93 	bl	8002c30 <HAL_GPIO_Init>

  /*Configure GPIO pins : DISPLAY_CS_Pin DISPLAY_RESET_Pin DISPLAY_DC_Pin */
  GPIO_InitStruct.Pin = DISPLAY_CS_Pin|DISPLAY_RESET_Pin|DISPLAY_DC_Pin;
 800230a:	23e0      	movs	r3, #224	; 0xe0
 800230c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800230e:	2301      	movs	r3, #1
 8002310:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002312:	2300      	movs	r3, #0
 8002314:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002316:	2300      	movs	r3, #0
 8002318:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800231a:	f107 030c 	add.w	r3, r7, #12
 800231e:	4619      	mov	r1, r3
 8002320:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002324:	f000 fc84 	bl	8002c30 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002328:	2200      	movs	r2, #0
 800232a:	2100      	movs	r1, #0
 800232c:	2009      	movs	r0, #9
 800232e:	f000 fc48 	bl	8002bc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002332:	2009      	movs	r0, #9
 8002334:	f000 fc61 	bl	8002bfa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002338:	bf00      	nop
 800233a:	3720      	adds	r7, #32
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	40021000 	.word	0x40021000

08002344 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002348:	b672      	cpsid	i
}
 800234a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800234c:	e7fe      	b.n	800234c <Error_Handler+0x8>
	...

08002350 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002356:	4b0f      	ldr	r3, [pc, #60]	; (8002394 <HAL_MspInit+0x44>)
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	4a0e      	ldr	r2, [pc, #56]	; (8002394 <HAL_MspInit+0x44>)
 800235c:	f043 0301 	orr.w	r3, r3, #1
 8002360:	6193      	str	r3, [r2, #24]
 8002362:	4b0c      	ldr	r3, [pc, #48]	; (8002394 <HAL_MspInit+0x44>)
 8002364:	699b      	ldr	r3, [r3, #24]
 8002366:	f003 0301 	and.w	r3, r3, #1
 800236a:	607b      	str	r3, [r7, #4]
 800236c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800236e:	4b09      	ldr	r3, [pc, #36]	; (8002394 <HAL_MspInit+0x44>)
 8002370:	69db      	ldr	r3, [r3, #28]
 8002372:	4a08      	ldr	r2, [pc, #32]	; (8002394 <HAL_MspInit+0x44>)
 8002374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002378:	61d3      	str	r3, [r2, #28]
 800237a:	4b06      	ldr	r3, [pc, #24]	; (8002394 <HAL_MspInit+0x44>)
 800237c:	69db      	ldr	r3, [r3, #28]
 800237e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002382:	603b      	str	r3, [r7, #0]
 8002384:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002386:	bf00      	nop
 8002388:	370c      	adds	r7, #12
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	40021000 	.word	0x40021000

08002398 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b08a      	sub	sp, #40	; 0x28
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a0:	f107 0314 	add.w	r3, r7, #20
 80023a4:	2200      	movs	r2, #0
 80023a6:	601a      	str	r2, [r3, #0]
 80023a8:	605a      	str	r2, [r3, #4]
 80023aa:	609a      	str	r2, [r3, #8]
 80023ac:	60da      	str	r2, [r3, #12]
 80023ae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a26      	ldr	r2, [pc, #152]	; (8002450 <HAL_I2C_MspInit+0xb8>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d145      	bne.n	8002446 <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ba:	4b26      	ldr	r3, [pc, #152]	; (8002454 <HAL_I2C_MspInit+0xbc>)
 80023bc:	695b      	ldr	r3, [r3, #20]
 80023be:	4a25      	ldr	r2, [pc, #148]	; (8002454 <HAL_I2C_MspInit+0xbc>)
 80023c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023c4:	6153      	str	r3, [r2, #20]
 80023c6:	4b23      	ldr	r3, [pc, #140]	; (8002454 <HAL_I2C_MspInit+0xbc>)
 80023c8:	695b      	ldr	r3, [r3, #20]
 80023ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ce:	613b      	str	r3, [r7, #16]
 80023d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023d2:	4b20      	ldr	r3, [pc, #128]	; (8002454 <HAL_I2C_MspInit+0xbc>)
 80023d4:	695b      	ldr	r3, [r3, #20]
 80023d6:	4a1f      	ldr	r2, [pc, #124]	; (8002454 <HAL_I2C_MspInit+0xbc>)
 80023d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023dc:	6153      	str	r3, [r2, #20]
 80023de:	4b1d      	ldr	r3, [pc, #116]	; (8002454 <HAL_I2C_MspInit+0xbc>)
 80023e0:	695b      	ldr	r3, [r3, #20]
 80023e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023e6:	60fb      	str	r3, [r7, #12]
 80023e8:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80023ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023f0:	2312      	movs	r3, #18
 80023f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f4:	2300      	movs	r3, #0
 80023f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023f8:	2303      	movs	r3, #3
 80023fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80023fc:	2304      	movs	r3, #4
 80023fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002400:	f107 0314 	add.w	r3, r7, #20
 8002404:	4619      	mov	r1, r3
 8002406:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800240a:	f000 fc11 	bl	8002c30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800240e:	2380      	movs	r3, #128	; 0x80
 8002410:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002412:	2312      	movs	r3, #18
 8002414:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002416:	2300      	movs	r3, #0
 8002418:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800241a:	2303      	movs	r3, #3
 800241c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800241e:	2304      	movs	r3, #4
 8002420:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002422:	f107 0314 	add.w	r3, r7, #20
 8002426:	4619      	mov	r1, r3
 8002428:	480b      	ldr	r0, [pc, #44]	; (8002458 <HAL_I2C_MspInit+0xc0>)
 800242a:	f000 fc01 	bl	8002c30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800242e:	4b09      	ldr	r3, [pc, #36]	; (8002454 <HAL_I2C_MspInit+0xbc>)
 8002430:	69db      	ldr	r3, [r3, #28]
 8002432:	4a08      	ldr	r2, [pc, #32]	; (8002454 <HAL_I2C_MspInit+0xbc>)
 8002434:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002438:	61d3      	str	r3, [r2, #28]
 800243a:	4b06      	ldr	r3, [pc, #24]	; (8002454 <HAL_I2C_MspInit+0xbc>)
 800243c:	69db      	ldr	r3, [r3, #28]
 800243e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002442:	60bb      	str	r3, [r7, #8]
 8002444:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002446:	bf00      	nop
 8002448:	3728      	adds	r7, #40	; 0x28
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	40005400 	.word	0x40005400
 8002454:	40021000 	.word	0x40021000
 8002458:	48000400 	.word	0x48000400

0800245c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b08a      	sub	sp, #40	; 0x28
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002464:	f107 0314 	add.w	r3, r7, #20
 8002468:	2200      	movs	r2, #0
 800246a:	601a      	str	r2, [r3, #0]
 800246c:	605a      	str	r2, [r3, #4]
 800246e:	609a      	str	r2, [r3, #8]
 8002470:	60da      	str	r2, [r3, #12]
 8002472:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a25      	ldr	r2, [pc, #148]	; (8002510 <HAL_SPI_MspInit+0xb4>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d144      	bne.n	8002508 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800247e:	4b25      	ldr	r3, [pc, #148]	; (8002514 <HAL_SPI_MspInit+0xb8>)
 8002480:	69db      	ldr	r3, [r3, #28]
 8002482:	4a24      	ldr	r2, [pc, #144]	; (8002514 <HAL_SPI_MspInit+0xb8>)
 8002484:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002488:	61d3      	str	r3, [r2, #28]
 800248a:	4b22      	ldr	r3, [pc, #136]	; (8002514 <HAL_SPI_MspInit+0xb8>)
 800248c:	69db      	ldr	r3, [r3, #28]
 800248e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002492:	613b      	str	r3, [r7, #16]
 8002494:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002496:	4b1f      	ldr	r3, [pc, #124]	; (8002514 <HAL_SPI_MspInit+0xb8>)
 8002498:	695b      	ldr	r3, [r3, #20]
 800249a:	4a1e      	ldr	r2, [pc, #120]	; (8002514 <HAL_SPI_MspInit+0xb8>)
 800249c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80024a0:	6153      	str	r3, [r2, #20]
 80024a2:	4b1c      	ldr	r3, [pc, #112]	; (8002514 <HAL_SPI_MspInit+0xb8>)
 80024a4:	695b      	ldr	r3, [r3, #20]
 80024a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024aa:	60fb      	str	r3, [r7, #12]
 80024ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024ae:	4b19      	ldr	r3, [pc, #100]	; (8002514 <HAL_SPI_MspInit+0xb8>)
 80024b0:	695b      	ldr	r3, [r3, #20]
 80024b2:	4a18      	ldr	r2, [pc, #96]	; (8002514 <HAL_SPI_MspInit+0xb8>)
 80024b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024b8:	6153      	str	r3, [r2, #20]
 80024ba:	4b16      	ldr	r3, [pc, #88]	; (8002514 <HAL_SPI_MspInit+0xb8>)
 80024bc:	695b      	ldr	r3, [r3, #20]
 80024be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024c2:	60bb      	str	r3, [r7, #8]
 80024c4:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PF1-OSC_OUT     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80024c6:	2302      	movs	r3, #2
 80024c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ca:	2302      	movs	r3, #2
 80024cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ce:	2300      	movs	r3, #0
 80024d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024d2:	2303      	movs	r3, #3
 80024d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80024d6:	2305      	movs	r3, #5
 80024d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80024da:	f107 0314 	add.w	r3, r7, #20
 80024de:	4619      	mov	r1, r3
 80024e0:	480d      	ldr	r0, [pc, #52]	; (8002518 <HAL_SPI_MspInit+0xbc>)
 80024e2:	f000 fba5 	bl	8002c30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80024e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ec:	2302      	movs	r3, #2
 80024ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f0:	2300      	movs	r3, #0
 80024f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024f4:	2303      	movs	r3, #3
 80024f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80024f8:	2305      	movs	r3, #5
 80024fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024fc:	f107 0314 	add.w	r3, r7, #20
 8002500:	4619      	mov	r1, r3
 8002502:	4806      	ldr	r0, [pc, #24]	; (800251c <HAL_SPI_MspInit+0xc0>)
 8002504:	f000 fb94 	bl	8002c30 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002508:	bf00      	nop
 800250a:	3728      	adds	r7, #40	; 0x28
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	40003800 	.word	0x40003800
 8002514:	40021000 	.word	0x40021000
 8002518:	48001400 	.word	0x48001400
 800251c:	48000400 	.word	0x48000400

08002520 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002520:	b480      	push	{r7}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a0a      	ldr	r2, [pc, #40]	; (8002558 <HAL_TIM_PWM_MspInit+0x38>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d10b      	bne.n	800254a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002532:	4b0a      	ldr	r3, [pc, #40]	; (800255c <HAL_TIM_PWM_MspInit+0x3c>)
 8002534:	699b      	ldr	r3, [r3, #24]
 8002536:	4a09      	ldr	r2, [pc, #36]	; (800255c <HAL_TIM_PWM_MspInit+0x3c>)
 8002538:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800253c:	6193      	str	r3, [r2, #24]
 800253e:	4b07      	ldr	r3, [pc, #28]	; (800255c <HAL_TIM_PWM_MspInit+0x3c>)
 8002540:	699b      	ldr	r3, [r3, #24]
 8002542:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002546:	60fb      	str	r3, [r7, #12]
 8002548:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800254a:	bf00      	nop
 800254c:	3714      	adds	r7, #20
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	40012c00 	.word	0x40012c00
 800255c:	40021000 	.word	0x40021000

08002560 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002560:	b480      	push	{r7}
 8002562:	b085      	sub	sp, #20
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM15)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a13      	ldr	r2, [pc, #76]	; (80025bc <HAL_TIM_Base_MspInit+0x5c>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d10c      	bne.n	800258c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002572:	4b13      	ldr	r3, [pc, #76]	; (80025c0 <HAL_TIM_Base_MspInit+0x60>)
 8002574:	699b      	ldr	r3, [r3, #24]
 8002576:	4a12      	ldr	r2, [pc, #72]	; (80025c0 <HAL_TIM_Base_MspInit+0x60>)
 8002578:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800257c:	6193      	str	r3, [r2, #24]
 800257e:	4b10      	ldr	r3, [pc, #64]	; (80025c0 <HAL_TIM_Base_MspInit+0x60>)
 8002580:	699b      	ldr	r3, [r3, #24]
 8002582:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002586:	60fb      	str	r3, [r7, #12]
 8002588:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 800258a:	e010      	b.n	80025ae <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM17)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a0c      	ldr	r2, [pc, #48]	; (80025c4 <HAL_TIM_Base_MspInit+0x64>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d10b      	bne.n	80025ae <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002596:	4b0a      	ldr	r3, [pc, #40]	; (80025c0 <HAL_TIM_Base_MspInit+0x60>)
 8002598:	699b      	ldr	r3, [r3, #24]
 800259a:	4a09      	ldr	r2, [pc, #36]	; (80025c0 <HAL_TIM_Base_MspInit+0x60>)
 800259c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025a0:	6193      	str	r3, [r2, #24]
 80025a2:	4b07      	ldr	r3, [pc, #28]	; (80025c0 <HAL_TIM_Base_MspInit+0x60>)
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025aa:	60bb      	str	r3, [r7, #8]
 80025ac:	68bb      	ldr	r3, [r7, #8]
}
 80025ae:	bf00      	nop
 80025b0:	3714      	adds	r7, #20
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	40014000 	.word	0x40014000
 80025c0:	40021000 	.word	0x40021000
 80025c4:	40014800 	.word	0x40014800

080025c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b08a      	sub	sp, #40	; 0x28
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025d0:	f107 0314 	add.w	r3, r7, #20
 80025d4:	2200      	movs	r2, #0
 80025d6:	601a      	str	r2, [r3, #0]
 80025d8:	605a      	str	r2, [r3, #4]
 80025da:	609a      	str	r2, [r3, #8]
 80025dc:	60da      	str	r2, [r3, #12]
 80025de:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a23      	ldr	r2, [pc, #140]	; (8002674 <HAL_TIM_MspPostInit+0xac>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d11e      	bne.n	8002628 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025ea:	4b23      	ldr	r3, [pc, #140]	; (8002678 <HAL_TIM_MspPostInit+0xb0>)
 80025ec:	695b      	ldr	r3, [r3, #20]
 80025ee:	4a22      	ldr	r2, [pc, #136]	; (8002678 <HAL_TIM_MspPostInit+0xb0>)
 80025f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025f4:	6153      	str	r3, [r2, #20]
 80025f6:	4b20      	ldr	r3, [pc, #128]	; (8002678 <HAL_TIM_MspPostInit+0xb0>)
 80025f8:	695b      	ldr	r3, [r3, #20]
 80025fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025fe:	613b      	str	r3, [r7, #16]
 8002600:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002602:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002606:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002608:	2302      	movs	r3, #2
 800260a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260c:	2300      	movs	r3, #0
 800260e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002610:	2300      	movs	r3, #0
 8002612:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002614:	2306      	movs	r3, #6
 8002616:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002618:	f107 0314 	add.w	r3, r7, #20
 800261c:	4619      	mov	r1, r3
 800261e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002622:	f000 fb05 	bl	8002c30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8002626:	e020      	b.n	800266a <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM17)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a13      	ldr	r2, [pc, #76]	; (800267c <HAL_TIM_MspPostInit+0xb4>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d11b      	bne.n	800266a <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002632:	4b11      	ldr	r3, [pc, #68]	; (8002678 <HAL_TIM_MspPostInit+0xb0>)
 8002634:	695b      	ldr	r3, [r3, #20]
 8002636:	4a10      	ldr	r2, [pc, #64]	; (8002678 <HAL_TIM_MspPostInit+0xb0>)
 8002638:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800263c:	6153      	str	r3, [r2, #20]
 800263e:	4b0e      	ldr	r3, [pc, #56]	; (8002678 <HAL_TIM_MspPostInit+0xb0>)
 8002640:	695b      	ldr	r3, [r3, #20]
 8002642:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002646:	60fb      	str	r3, [r7, #12]
 8002648:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800264a:	2320      	movs	r3, #32
 800264c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800264e:	2302      	movs	r3, #2
 8002650:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002652:	2300      	movs	r3, #0
 8002654:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002656:	2300      	movs	r3, #0
 8002658:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 800265a:	230a      	movs	r3, #10
 800265c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800265e:	f107 0314 	add.w	r3, r7, #20
 8002662:	4619      	mov	r1, r3
 8002664:	4806      	ldr	r0, [pc, #24]	; (8002680 <HAL_TIM_MspPostInit+0xb8>)
 8002666:	f000 fae3 	bl	8002c30 <HAL_GPIO_Init>
}
 800266a:	bf00      	nop
 800266c:	3728      	adds	r7, #40	; 0x28
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	40012c00 	.word	0x40012c00
 8002678:	40021000 	.word	0x40021000
 800267c:	40014800 	.word	0x40014800
 8002680:	48000400 	.word	0x48000400

08002684 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b08a      	sub	sp, #40	; 0x28
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800268c:	f107 0314 	add.w	r3, r7, #20
 8002690:	2200      	movs	r2, #0
 8002692:	601a      	str	r2, [r3, #0]
 8002694:	605a      	str	r2, [r3, #4]
 8002696:	609a      	str	r2, [r3, #8]
 8002698:	60da      	str	r2, [r3, #12]
 800269a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a18      	ldr	r2, [pc, #96]	; (8002704 <HAL_UART_MspInit+0x80>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d129      	bne.n	80026fa <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80026a6:	4b18      	ldr	r3, [pc, #96]	; (8002708 <HAL_UART_MspInit+0x84>)
 80026a8:	699b      	ldr	r3, [r3, #24]
 80026aa:	4a17      	ldr	r2, [pc, #92]	; (8002708 <HAL_UART_MspInit+0x84>)
 80026ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026b0:	6193      	str	r3, [r2, #24]
 80026b2:	4b15      	ldr	r3, [pc, #84]	; (8002708 <HAL_UART_MspInit+0x84>)
 80026b4:	699b      	ldr	r3, [r3, #24]
 80026b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026ba:	613b      	str	r3, [r7, #16]
 80026bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026be:	4b12      	ldr	r3, [pc, #72]	; (8002708 <HAL_UART_MspInit+0x84>)
 80026c0:	695b      	ldr	r3, [r3, #20]
 80026c2:	4a11      	ldr	r2, [pc, #68]	; (8002708 <HAL_UART_MspInit+0x84>)
 80026c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026c8:	6153      	str	r3, [r2, #20]
 80026ca:	4b0f      	ldr	r3, [pc, #60]	; (8002708 <HAL_UART_MspInit+0x84>)
 80026cc:	695b      	ldr	r3, [r3, #20]
 80026ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d2:	60fb      	str	r3, [r7, #12]
 80026d4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80026d6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80026da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026dc:	2302      	movs	r3, #2
 80026de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e0:	2300      	movs	r3, #0
 80026e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026e4:	2303      	movs	r3, #3
 80026e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80026e8:	2307      	movs	r3, #7
 80026ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ec:	f107 0314 	add.w	r3, r7, #20
 80026f0:	4619      	mov	r1, r3
 80026f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026f6:	f000 fa9b 	bl	8002c30 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80026fa:	bf00      	nop
 80026fc:	3728      	adds	r7, #40	; 0x28
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	40013800 	.word	0x40013800
 8002708:	40021000 	.word	0x40021000

0800270c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002710:	e7fe      	b.n	8002710 <NMI_Handler+0x4>

08002712 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002712:	b480      	push	{r7}
 8002714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002716:	e7fe      	b.n	8002716 <HardFault_Handler+0x4>

08002718 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800271c:	e7fe      	b.n	800271c <MemManage_Handler+0x4>

0800271e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800271e:	b480      	push	{r7}
 8002720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002722:	e7fe      	b.n	8002722 <BusFault_Handler+0x4>

08002724 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002728:	e7fe      	b.n	8002728 <UsageFault_Handler+0x4>

0800272a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800272a:	b480      	push	{r7}
 800272c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800272e:	bf00      	nop
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr

08002738 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800273c:	bf00      	nop
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr

08002746 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002746:	b480      	push	{r7}
 8002748:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800274a:	bf00      	nop
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr

08002754 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002758:	f000 f914 	bl	8002984 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800275c:	bf00      	nop
 800275e:	bd80      	pop	{r7, pc}

08002760 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
	Interrupt_flank();
 8002764:	f7fe ff3a 	bl	80015dc <Interrupt_flank>
  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ReadIR_Pin);
 8002768:	2008      	movs	r0, #8
 800276a:	f000 fbeb 	bl	8002f44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800276e:	bf00      	nop
 8002770:	bd80      	pop	{r7, pc}

08002772 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002772:	b580      	push	{r7, lr}
 8002774:	b086      	sub	sp, #24
 8002776:	af00      	add	r7, sp, #0
 8002778:	60f8      	str	r0, [r7, #12]
 800277a:	60b9      	str	r1, [r7, #8]
 800277c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800277e:	2300      	movs	r3, #0
 8002780:	617b      	str	r3, [r7, #20]
 8002782:	e00a      	b.n	800279a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002784:	f3af 8000 	nop.w
 8002788:	4601      	mov	r1, r0
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	1c5a      	adds	r2, r3, #1
 800278e:	60ba      	str	r2, [r7, #8]
 8002790:	b2ca      	uxtb	r2, r1
 8002792:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	3301      	adds	r3, #1
 8002798:	617b      	str	r3, [r7, #20]
 800279a:	697a      	ldr	r2, [r7, #20]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	429a      	cmp	r2, r3
 80027a0:	dbf0      	blt.n	8002784 <_read+0x12>
  }

  return len;
 80027a2:	687b      	ldr	r3, [r7, #4]
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3718      	adds	r7, #24
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <_close>:
  }
  return len;
}

int _close(int file)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80027b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027d4:	605a      	str	r2, [r3, #4]
  return 0;
 80027d6:	2300      	movs	r3, #0
}
 80027d8:	4618      	mov	r0, r3
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <_isatty>:

int _isatty(int file)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80027ec:	2301      	movs	r3, #1
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	370c      	adds	r7, #12
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr

080027fa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027fa:	b480      	push	{r7}
 80027fc:	b085      	sub	sp, #20
 80027fe:	af00      	add	r7, sp, #0
 8002800:	60f8      	str	r0, [r7, #12]
 8002802:	60b9      	str	r1, [r7, #8]
 8002804:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002806:	2300      	movs	r3, #0
}
 8002808:	4618      	mov	r0, r3
 800280a:	3714      	adds	r7, #20
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b086      	sub	sp, #24
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800281c:	4a14      	ldr	r2, [pc, #80]	; (8002870 <_sbrk+0x5c>)
 800281e:	4b15      	ldr	r3, [pc, #84]	; (8002874 <_sbrk+0x60>)
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002828:	4b13      	ldr	r3, [pc, #76]	; (8002878 <_sbrk+0x64>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d102      	bne.n	8002836 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002830:	4b11      	ldr	r3, [pc, #68]	; (8002878 <_sbrk+0x64>)
 8002832:	4a12      	ldr	r2, [pc, #72]	; (800287c <_sbrk+0x68>)
 8002834:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002836:	4b10      	ldr	r3, [pc, #64]	; (8002878 <_sbrk+0x64>)
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4413      	add	r3, r2
 800283e:	693a      	ldr	r2, [r7, #16]
 8002840:	429a      	cmp	r2, r3
 8002842:	d207      	bcs.n	8002854 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002844:	f005 f8e0 	bl	8007a08 <__errno>
 8002848:	4603      	mov	r3, r0
 800284a:	220c      	movs	r2, #12
 800284c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800284e:	f04f 33ff 	mov.w	r3, #4294967295
 8002852:	e009      	b.n	8002868 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002854:	4b08      	ldr	r3, [pc, #32]	; (8002878 <_sbrk+0x64>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800285a:	4b07      	ldr	r3, [pc, #28]	; (8002878 <_sbrk+0x64>)
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4413      	add	r3, r2
 8002862:	4a05      	ldr	r2, [pc, #20]	; (8002878 <_sbrk+0x64>)
 8002864:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002866:	68fb      	ldr	r3, [r7, #12]
}
 8002868:	4618      	mov	r0, r3
 800286a:	3718      	adds	r7, #24
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	20004000 	.word	0x20004000
 8002874:	00000400 	.word	0x00000400
 8002878:	20002e34 	.word	0x20002e34
 800287c:	20002e50 	.word	0x20002e50

08002880 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002884:	4b06      	ldr	r3, [pc, #24]	; (80028a0 <SystemInit+0x20>)
 8002886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800288a:	4a05      	ldr	r2, [pc, #20]	; (80028a0 <SystemInit+0x20>)
 800288c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002890:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002894:	bf00      	nop
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	e000ed00 	.word	0xe000ed00

080028a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80028a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80028dc <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80028a8:	f7ff ffea 	bl	8002880 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028ac:	480c      	ldr	r0, [pc, #48]	; (80028e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80028ae:	490d      	ldr	r1, [pc, #52]	; (80028e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80028b0:	4a0d      	ldr	r2, [pc, #52]	; (80028e8 <LoopForever+0xe>)
  movs r3, #0
 80028b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028b4:	e002      	b.n	80028bc <LoopCopyDataInit>

080028b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028ba:	3304      	adds	r3, #4

080028bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028c0:	d3f9      	bcc.n	80028b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028c2:	4a0a      	ldr	r2, [pc, #40]	; (80028ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80028c4:	4c0a      	ldr	r4, [pc, #40]	; (80028f0 <LoopForever+0x16>)
  movs r3, #0
 80028c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028c8:	e001      	b.n	80028ce <LoopFillZerobss>

080028ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028cc:	3204      	adds	r2, #4

080028ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028d0:	d3fb      	bcc.n	80028ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80028d2:	f005 f89f 	bl	8007a14 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80028d6:	f7ff fa43 	bl	8001d60 <main>

080028da <LoopForever>:

LoopForever:
    b LoopForever
 80028da:	e7fe      	b.n	80028da <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80028dc:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80028e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028e4:	200027ec 	.word	0x200027ec
  ldr r2, =_sidata
 80028e8:	0800908c 	.word	0x0800908c
  ldr r2, =_sbss
 80028ec:	200027ec 	.word	0x200027ec
  ldr r4, =_ebss
 80028f0:	20002e4c 	.word	0x20002e4c

080028f4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80028f4:	e7fe      	b.n	80028f4 <ADC1_IRQHandler>
	...

080028f8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028fc:	4b08      	ldr	r3, [pc, #32]	; (8002920 <HAL_Init+0x28>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a07      	ldr	r2, [pc, #28]	; (8002920 <HAL_Init+0x28>)
 8002902:	f043 0310 	orr.w	r3, r3, #16
 8002906:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002908:	2003      	movs	r0, #3
 800290a:	f000 f94f 	bl	8002bac <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800290e:	200f      	movs	r0, #15
 8002910:	f000 f808 	bl	8002924 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002914:	f7ff fd1c 	bl	8002350 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	40022000 	.word	0x40022000

08002924 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800292c:	4b12      	ldr	r3, [pc, #72]	; (8002978 <HAL_InitTick+0x54>)
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	4b12      	ldr	r3, [pc, #72]	; (800297c <HAL_InitTick+0x58>)
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	4619      	mov	r1, r3
 8002936:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800293a:	fbb3 f3f1 	udiv	r3, r3, r1
 800293e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002942:	4618      	mov	r0, r3
 8002944:	f000 f967 	bl	8002c16 <HAL_SYSTICK_Config>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d001      	beq.n	8002952 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e00e      	b.n	8002970 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2b0f      	cmp	r3, #15
 8002956:	d80a      	bhi.n	800296e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002958:	2200      	movs	r2, #0
 800295a:	6879      	ldr	r1, [r7, #4]
 800295c:	f04f 30ff 	mov.w	r0, #4294967295
 8002960:	f000 f92f 	bl	8002bc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002964:	4a06      	ldr	r2, [pc, #24]	; (8002980 <HAL_InitTick+0x5c>)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800296a:	2300      	movs	r3, #0
 800296c:	e000      	b.n	8002970 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
}
 8002970:	4618      	mov	r0, r3
 8002972:	3708      	adds	r7, #8
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	2000277c 	.word	0x2000277c
 800297c:	20002784 	.word	0x20002784
 8002980:	20002780 	.word	0x20002780

08002984 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002988:	4b06      	ldr	r3, [pc, #24]	; (80029a4 <HAL_IncTick+0x20>)
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	461a      	mov	r2, r3
 800298e:	4b06      	ldr	r3, [pc, #24]	; (80029a8 <HAL_IncTick+0x24>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4413      	add	r3, r2
 8002994:	4a04      	ldr	r2, [pc, #16]	; (80029a8 <HAL_IncTick+0x24>)
 8002996:	6013      	str	r3, [r2, #0]
}
 8002998:	bf00      	nop
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	20002784 	.word	0x20002784
 80029a8:	20002e38 	.word	0x20002e38

080029ac <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	af00      	add	r7, sp, #0
  return uwTick;  
 80029b0:	4b03      	ldr	r3, [pc, #12]	; (80029c0 <HAL_GetTick+0x14>)
 80029b2:	681b      	ldr	r3, [r3, #0]
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	20002e38 	.word	0x20002e38

080029c4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029cc:	f7ff ffee 	bl	80029ac <HAL_GetTick>
 80029d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029dc:	d005      	beq.n	80029ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029de:	4b0a      	ldr	r3, [pc, #40]	; (8002a08 <HAL_Delay+0x44>)
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	461a      	mov	r2, r3
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	4413      	add	r3, r2
 80029e8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80029ea:	bf00      	nop
 80029ec:	f7ff ffde 	bl	80029ac <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	68fa      	ldr	r2, [r7, #12]
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d8f7      	bhi.n	80029ec <HAL_Delay+0x28>
  {
  }
}
 80029fc:	bf00      	nop
 80029fe:	bf00      	nop
 8002a00:	3710      	adds	r7, #16
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	20002784 	.word	0x20002784

08002a0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b085      	sub	sp, #20
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f003 0307 	and.w	r3, r3, #7
 8002a1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a1c:	4b0c      	ldr	r3, [pc, #48]	; (8002a50 <__NVIC_SetPriorityGrouping+0x44>)
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a22:	68ba      	ldr	r2, [r7, #8]
 8002a24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a28:	4013      	ands	r3, r2
 8002a2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a3e:	4a04      	ldr	r2, [pc, #16]	; (8002a50 <__NVIC_SetPriorityGrouping+0x44>)
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	60d3      	str	r3, [r2, #12]
}
 8002a44:	bf00      	nop
 8002a46:	3714      	adds	r7, #20
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr
 8002a50:	e000ed00 	.word	0xe000ed00

08002a54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a58:	4b04      	ldr	r3, [pc, #16]	; (8002a6c <__NVIC_GetPriorityGrouping+0x18>)
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	0a1b      	lsrs	r3, r3, #8
 8002a5e:	f003 0307 	and.w	r3, r3, #7
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr
 8002a6c:	e000ed00 	.word	0xe000ed00

08002a70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	4603      	mov	r3, r0
 8002a78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	db0b      	blt.n	8002a9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a82:	79fb      	ldrb	r3, [r7, #7]
 8002a84:	f003 021f 	and.w	r2, r3, #31
 8002a88:	4907      	ldr	r1, [pc, #28]	; (8002aa8 <__NVIC_EnableIRQ+0x38>)
 8002a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a8e:	095b      	lsrs	r3, r3, #5
 8002a90:	2001      	movs	r0, #1
 8002a92:	fa00 f202 	lsl.w	r2, r0, r2
 8002a96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a9a:	bf00      	nop
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	e000e100 	.word	0xe000e100

08002aac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	6039      	str	r1, [r7, #0]
 8002ab6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ab8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	db0a      	blt.n	8002ad6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	b2da      	uxtb	r2, r3
 8002ac4:	490c      	ldr	r1, [pc, #48]	; (8002af8 <__NVIC_SetPriority+0x4c>)
 8002ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aca:	0112      	lsls	r2, r2, #4
 8002acc:	b2d2      	uxtb	r2, r2
 8002ace:	440b      	add	r3, r1
 8002ad0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ad4:	e00a      	b.n	8002aec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	b2da      	uxtb	r2, r3
 8002ada:	4908      	ldr	r1, [pc, #32]	; (8002afc <__NVIC_SetPriority+0x50>)
 8002adc:	79fb      	ldrb	r3, [r7, #7]
 8002ade:	f003 030f 	and.w	r3, r3, #15
 8002ae2:	3b04      	subs	r3, #4
 8002ae4:	0112      	lsls	r2, r2, #4
 8002ae6:	b2d2      	uxtb	r2, r2
 8002ae8:	440b      	add	r3, r1
 8002aea:	761a      	strb	r2, [r3, #24]
}
 8002aec:	bf00      	nop
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr
 8002af8:	e000e100 	.word	0xe000e100
 8002afc:	e000ed00 	.word	0xe000ed00

08002b00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b089      	sub	sp, #36	; 0x24
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f003 0307 	and.w	r3, r3, #7
 8002b12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	f1c3 0307 	rsb	r3, r3, #7
 8002b1a:	2b04      	cmp	r3, #4
 8002b1c:	bf28      	it	cs
 8002b1e:	2304      	movcs	r3, #4
 8002b20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	3304      	adds	r3, #4
 8002b26:	2b06      	cmp	r3, #6
 8002b28:	d902      	bls.n	8002b30 <NVIC_EncodePriority+0x30>
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	3b03      	subs	r3, #3
 8002b2e:	e000      	b.n	8002b32 <NVIC_EncodePriority+0x32>
 8002b30:	2300      	movs	r3, #0
 8002b32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b34:	f04f 32ff 	mov.w	r2, #4294967295
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3e:	43da      	mvns	r2, r3
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	401a      	ands	r2, r3
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b48:	f04f 31ff 	mov.w	r1, #4294967295
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b52:	43d9      	mvns	r1, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b58:	4313      	orrs	r3, r2
         );
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3724      	adds	r7, #36	; 0x24
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
	...

08002b68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	3b01      	subs	r3, #1
 8002b74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b78:	d301      	bcc.n	8002b7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e00f      	b.n	8002b9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b7e:	4a0a      	ldr	r2, [pc, #40]	; (8002ba8 <SysTick_Config+0x40>)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	3b01      	subs	r3, #1
 8002b84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b86:	210f      	movs	r1, #15
 8002b88:	f04f 30ff 	mov.w	r0, #4294967295
 8002b8c:	f7ff ff8e 	bl	8002aac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b90:	4b05      	ldr	r3, [pc, #20]	; (8002ba8 <SysTick_Config+0x40>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b96:	4b04      	ldr	r3, [pc, #16]	; (8002ba8 <SysTick_Config+0x40>)
 8002b98:	2207      	movs	r2, #7
 8002b9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3708      	adds	r7, #8
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	e000e010 	.word	0xe000e010

08002bac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f7ff ff29 	bl	8002a0c <__NVIC_SetPriorityGrouping>
}
 8002bba:	bf00      	nop
 8002bbc:	3708      	adds	r7, #8
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b086      	sub	sp, #24
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	4603      	mov	r3, r0
 8002bca:	60b9      	str	r1, [r7, #8]
 8002bcc:	607a      	str	r2, [r7, #4]
 8002bce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bd4:	f7ff ff3e 	bl	8002a54 <__NVIC_GetPriorityGrouping>
 8002bd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	68b9      	ldr	r1, [r7, #8]
 8002bde:	6978      	ldr	r0, [r7, #20]
 8002be0:	f7ff ff8e 	bl	8002b00 <NVIC_EncodePriority>
 8002be4:	4602      	mov	r2, r0
 8002be6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bea:	4611      	mov	r1, r2
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7ff ff5d 	bl	8002aac <__NVIC_SetPriority>
}
 8002bf2:	bf00      	nop
 8002bf4:	3718      	adds	r7, #24
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}

08002bfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bfa:	b580      	push	{r7, lr}
 8002bfc:	b082      	sub	sp, #8
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	4603      	mov	r3, r0
 8002c02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7ff ff31 	bl	8002a70 <__NVIC_EnableIRQ>
}
 8002c0e:	bf00      	nop
 8002c10:	3708      	adds	r7, #8
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}

08002c16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c16:	b580      	push	{r7, lr}
 8002c18:	b082      	sub	sp, #8
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f7ff ffa2 	bl	8002b68 <SysTick_Config>
 8002c24:	4603      	mov	r3, r0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3708      	adds	r7, #8
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
	...

08002c30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b087      	sub	sp, #28
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c3e:	e14e      	b.n	8002ede <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	2101      	movs	r1, #1
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	fa01 f303 	lsl.w	r3, r1, r3
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	f000 8140 	beq.w	8002ed8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f003 0303 	and.w	r3, r3, #3
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d005      	beq.n	8002c70 <HAL_GPIO_Init+0x40>
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f003 0303 	and.w	r3, r3, #3
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d130      	bne.n	8002cd2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	2203      	movs	r2, #3
 8002c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c80:	43db      	mvns	r3, r3
 8002c82:	693a      	ldr	r2, [r7, #16]
 8002c84:	4013      	ands	r3, r2
 8002c86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	68da      	ldr	r2, [r3, #12]
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	005b      	lsls	r3, r3, #1
 8002c90:	fa02 f303 	lsl.w	r3, r2, r3
 8002c94:	693a      	ldr	r2, [r7, #16]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	693a      	ldr	r2, [r7, #16]
 8002c9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cae:	43db      	mvns	r3, r3
 8002cb0:	693a      	ldr	r2, [r7, #16]
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	091b      	lsrs	r3, r3, #4
 8002cbc:	f003 0201 	and.w	r2, r3, #1
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc6:	693a      	ldr	r2, [r7, #16]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	693a      	ldr	r2, [r7, #16]
 8002cd0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f003 0303 	and.w	r3, r3, #3
 8002cda:	2b03      	cmp	r3, #3
 8002cdc:	d017      	beq.n	8002d0e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	005b      	lsls	r3, r3, #1
 8002ce8:	2203      	movs	r2, #3
 8002cea:	fa02 f303 	lsl.w	r3, r2, r3
 8002cee:	43db      	mvns	r3, r3
 8002cf0:	693a      	ldr	r2, [r7, #16]
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	689a      	ldr	r2, [r3, #8]
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	005b      	lsls	r3, r3, #1
 8002cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	693a      	ldr	r2, [r7, #16]
 8002d0c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f003 0303 	and.w	r3, r3, #3
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d123      	bne.n	8002d62 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	08da      	lsrs	r2, r3, #3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	3208      	adds	r2, #8
 8002d22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d26:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	f003 0307 	and.w	r3, r3, #7
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	220f      	movs	r2, #15
 8002d32:	fa02 f303 	lsl.w	r3, r2, r3
 8002d36:	43db      	mvns	r3, r3
 8002d38:	693a      	ldr	r2, [r7, #16]
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	691a      	ldr	r2, [r3, #16]
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	f003 0307 	and.w	r3, r3, #7
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4e:	693a      	ldr	r2, [r7, #16]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	08da      	lsrs	r2, r3, #3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	3208      	adds	r2, #8
 8002d5c:	6939      	ldr	r1, [r7, #16]
 8002d5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	005b      	lsls	r3, r3, #1
 8002d6c:	2203      	movs	r2, #3
 8002d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d72:	43db      	mvns	r3, r3
 8002d74:	693a      	ldr	r2, [r7, #16]
 8002d76:	4013      	ands	r3, r2
 8002d78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f003 0203 	and.w	r2, r3, #3
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	005b      	lsls	r3, r3, #1
 8002d86:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8a:	693a      	ldr	r2, [r7, #16]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	693a      	ldr	r2, [r7, #16]
 8002d94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	f000 809a 	beq.w	8002ed8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002da4:	4b55      	ldr	r3, [pc, #340]	; (8002efc <HAL_GPIO_Init+0x2cc>)
 8002da6:	699b      	ldr	r3, [r3, #24]
 8002da8:	4a54      	ldr	r2, [pc, #336]	; (8002efc <HAL_GPIO_Init+0x2cc>)
 8002daa:	f043 0301 	orr.w	r3, r3, #1
 8002dae:	6193      	str	r3, [r2, #24]
 8002db0:	4b52      	ldr	r3, [pc, #328]	; (8002efc <HAL_GPIO_Init+0x2cc>)
 8002db2:	699b      	ldr	r3, [r3, #24]
 8002db4:	f003 0301 	and.w	r3, r3, #1
 8002db8:	60bb      	str	r3, [r7, #8]
 8002dba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002dbc:	4a50      	ldr	r2, [pc, #320]	; (8002f00 <HAL_GPIO_Init+0x2d0>)
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	089b      	lsrs	r3, r3, #2
 8002dc2:	3302      	adds	r3, #2
 8002dc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	f003 0303 	and.w	r3, r3, #3
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	220f      	movs	r2, #15
 8002dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd8:	43db      	mvns	r3, r3
 8002dda:	693a      	ldr	r2, [r7, #16]
 8002ddc:	4013      	ands	r3, r2
 8002dde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002de6:	d013      	beq.n	8002e10 <HAL_GPIO_Init+0x1e0>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4a46      	ldr	r2, [pc, #280]	; (8002f04 <HAL_GPIO_Init+0x2d4>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d00d      	beq.n	8002e0c <HAL_GPIO_Init+0x1dc>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4a45      	ldr	r2, [pc, #276]	; (8002f08 <HAL_GPIO_Init+0x2d8>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d007      	beq.n	8002e08 <HAL_GPIO_Init+0x1d8>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	4a44      	ldr	r2, [pc, #272]	; (8002f0c <HAL_GPIO_Init+0x2dc>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d101      	bne.n	8002e04 <HAL_GPIO_Init+0x1d4>
 8002e00:	2303      	movs	r3, #3
 8002e02:	e006      	b.n	8002e12 <HAL_GPIO_Init+0x1e2>
 8002e04:	2305      	movs	r3, #5
 8002e06:	e004      	b.n	8002e12 <HAL_GPIO_Init+0x1e2>
 8002e08:	2302      	movs	r3, #2
 8002e0a:	e002      	b.n	8002e12 <HAL_GPIO_Init+0x1e2>
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e000      	b.n	8002e12 <HAL_GPIO_Init+0x1e2>
 8002e10:	2300      	movs	r3, #0
 8002e12:	697a      	ldr	r2, [r7, #20]
 8002e14:	f002 0203 	and.w	r2, r2, #3
 8002e18:	0092      	lsls	r2, r2, #2
 8002e1a:	4093      	lsls	r3, r2
 8002e1c:	693a      	ldr	r2, [r7, #16]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002e22:	4937      	ldr	r1, [pc, #220]	; (8002f00 <HAL_GPIO_Init+0x2d0>)
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	089b      	lsrs	r3, r3, #2
 8002e28:	3302      	adds	r3, #2
 8002e2a:	693a      	ldr	r2, [r7, #16]
 8002e2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e30:	4b37      	ldr	r3, [pc, #220]	; (8002f10 <HAL_GPIO_Init+0x2e0>)
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	43db      	mvns	r3, r3
 8002e3a:	693a      	ldr	r2, [r7, #16]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d003      	beq.n	8002e54 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002e4c:	693a      	ldr	r2, [r7, #16]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002e54:	4a2e      	ldr	r2, [pc, #184]	; (8002f10 <HAL_GPIO_Init+0x2e0>)
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e5a:	4b2d      	ldr	r3, [pc, #180]	; (8002f10 <HAL_GPIO_Init+0x2e0>)
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	43db      	mvns	r3, r3
 8002e64:	693a      	ldr	r2, [r7, #16]
 8002e66:	4013      	ands	r3, r2
 8002e68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d003      	beq.n	8002e7e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002e76:	693a      	ldr	r2, [r7, #16]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002e7e:	4a24      	ldr	r2, [pc, #144]	; (8002f10 <HAL_GPIO_Init+0x2e0>)
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e84:	4b22      	ldr	r3, [pc, #136]	; (8002f10 <HAL_GPIO_Init+0x2e0>)
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	43db      	mvns	r3, r3
 8002e8e:	693a      	ldr	r2, [r7, #16]
 8002e90:	4013      	ands	r3, r2
 8002e92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d003      	beq.n	8002ea8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002ea0:	693a      	ldr	r2, [r7, #16]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002ea8:	4a19      	ldr	r2, [pc, #100]	; (8002f10 <HAL_GPIO_Init+0x2e0>)
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002eae:	4b18      	ldr	r3, [pc, #96]	; (8002f10 <HAL_GPIO_Init+0x2e0>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	43db      	mvns	r3, r3
 8002eb8:	693a      	ldr	r2, [r7, #16]
 8002eba:	4013      	ands	r3, r2
 8002ebc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d003      	beq.n	8002ed2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002eca:	693a      	ldr	r2, [r7, #16]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002ed2:	4a0f      	ldr	r2, [pc, #60]	; (8002f10 <HAL_GPIO_Init+0x2e0>)
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	3301      	adds	r3, #1
 8002edc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	f47f aea9 	bne.w	8002c40 <HAL_GPIO_Init+0x10>
  }
}
 8002eee:	bf00      	nop
 8002ef0:	bf00      	nop
 8002ef2:	371c      	adds	r7, #28
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr
 8002efc:	40021000 	.word	0x40021000
 8002f00:	40010000 	.word	0x40010000
 8002f04:	48000400 	.word	0x48000400
 8002f08:	48000800 	.word	0x48000800
 8002f0c:	48000c00 	.word	0x48000c00
 8002f10:	40010400 	.word	0x40010400

08002f14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	807b      	strh	r3, [r7, #2]
 8002f20:	4613      	mov	r3, r2
 8002f22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f24:	787b      	ldrb	r3, [r7, #1]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d003      	beq.n	8002f32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f2a:	887a      	ldrh	r2, [r7, #2]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f30:	e002      	b.n	8002f38 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f32:	887a      	ldrh	r2, [r7, #2]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002f38:	bf00      	nop
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002f4e:	4b08      	ldr	r3, [pc, #32]	; (8002f70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f50:	695a      	ldr	r2, [r3, #20]
 8002f52:	88fb      	ldrh	r3, [r7, #6]
 8002f54:	4013      	ands	r3, r2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d006      	beq.n	8002f68 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f5a:	4a05      	ldr	r2, [pc, #20]	; (8002f70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f5c:	88fb      	ldrh	r3, [r7, #6]
 8002f5e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f60:	88fb      	ldrh	r3, [r7, #6]
 8002f62:	4618      	mov	r0, r3
 8002f64:	f000 f806 	bl	8002f74 <HAL_GPIO_EXTI_Callback>
  }
}
 8002f68:	bf00      	nop
 8002f6a:	3708      	adds	r7, #8
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	40010400 	.word	0x40010400

08002f74 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002f7e:	bf00      	nop
 8002f80:	370c      	adds	r7, #12
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr

08002f8a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	b082      	sub	sp, #8
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d101      	bne.n	8002f9c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e081      	b.n	80030a0 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d106      	bne.n	8002fb6 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f7ff f9f1 	bl	8002398 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2224      	movs	r2, #36	; 0x24
 8002fba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f022 0201 	bic.w	r2, r2, #1
 8002fcc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685a      	ldr	r2, [r3, #4]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002fda:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	689a      	ldr	r2, [r3, #8]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002fea:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d107      	bne.n	8003004 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	689a      	ldr	r2, [r3, #8]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003000:	609a      	str	r2, [r3, #8]
 8003002:	e006      	b.n	8003012 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	689a      	ldr	r2, [r3, #8]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003010:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	2b02      	cmp	r3, #2
 8003018:	d104      	bne.n	8003024 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003022:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	6812      	ldr	r2, [r2, #0]
 800302e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003032:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003036:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	68da      	ldr	r2, [r3, #12]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003046:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	691a      	ldr	r2, [r3, #16]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	695b      	ldr	r3, [r3, #20]
 8003050:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	430a      	orrs	r2, r1
 8003060:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	69d9      	ldr	r1, [r3, #28]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a1a      	ldr	r2, [r3, #32]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	430a      	orrs	r2, r1
 8003070:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f042 0201 	orr.w	r2, r2, #1
 8003080:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2220      	movs	r2, #32
 800308c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800309e:	2300      	movs	r3, #0
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3708      	adds	r7, #8
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b088      	sub	sp, #32
 80030ac:	af02      	add	r7, sp, #8
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	607a      	str	r2, [r7, #4]
 80030b2:	461a      	mov	r2, r3
 80030b4:	460b      	mov	r3, r1
 80030b6:	817b      	strh	r3, [r7, #10]
 80030b8:	4613      	mov	r3, r2
 80030ba:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	2b20      	cmp	r3, #32
 80030c6:	f040 80da 	bne.w	800327e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d101      	bne.n	80030d8 <HAL_I2C_Master_Transmit+0x30>
 80030d4:	2302      	movs	r3, #2
 80030d6:	e0d3      	b.n	8003280 <HAL_I2C_Master_Transmit+0x1d8>
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80030e0:	f7ff fc64 	bl	80029ac <HAL_GetTick>
 80030e4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	9300      	str	r3, [sp, #0]
 80030ea:	2319      	movs	r3, #25
 80030ec:	2201      	movs	r2, #1
 80030ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80030f2:	68f8      	ldr	r0, [r7, #12]
 80030f4:	f000 fcbc 	bl	8003a70 <I2C_WaitOnFlagUntilTimeout>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e0be      	b.n	8003280 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2221      	movs	r2, #33	; 0x21
 8003106:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2210      	movs	r2, #16
 800310e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2200      	movs	r2, #0
 8003116:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	893a      	ldrh	r2, [r7, #8]
 8003122:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2200      	movs	r2, #0
 8003128:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800312e:	b29b      	uxth	r3, r3
 8003130:	2bff      	cmp	r3, #255	; 0xff
 8003132:	d90e      	bls.n	8003152 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	22ff      	movs	r2, #255	; 0xff
 8003138:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800313e:	b2da      	uxtb	r2, r3
 8003140:	8979      	ldrh	r1, [r7, #10]
 8003142:	4b51      	ldr	r3, [pc, #324]	; (8003288 <HAL_I2C_Master_Transmit+0x1e0>)
 8003144:	9300      	str	r3, [sp, #0]
 8003146:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800314a:	68f8      	ldr	r0, [r7, #12]
 800314c:	f000 fecc 	bl	8003ee8 <I2C_TransferConfig>
 8003150:	e06c      	b.n	800322c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003156:	b29a      	uxth	r2, r3
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003160:	b2da      	uxtb	r2, r3
 8003162:	8979      	ldrh	r1, [r7, #10]
 8003164:	4b48      	ldr	r3, [pc, #288]	; (8003288 <HAL_I2C_Master_Transmit+0x1e0>)
 8003166:	9300      	str	r3, [sp, #0]
 8003168:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800316c:	68f8      	ldr	r0, [r7, #12]
 800316e:	f000 febb 	bl	8003ee8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003172:	e05b      	b.n	800322c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003174:	697a      	ldr	r2, [r7, #20]
 8003176:	6a39      	ldr	r1, [r7, #32]
 8003178:	68f8      	ldr	r0, [r7, #12]
 800317a:	f000 fcc8 	bl	8003b0e <I2C_WaitOnTXISFlagUntilTimeout>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d001      	beq.n	8003188 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e07b      	b.n	8003280 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318c:	781a      	ldrb	r2, [r3, #0]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003198:	1c5a      	adds	r2, r3, #1
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	3b01      	subs	r3, #1
 80031a6:	b29a      	uxth	r2, r3
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031b0:	3b01      	subs	r3, #1
 80031b2:	b29a      	uxth	r2, r3
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031bc:	b29b      	uxth	r3, r3
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d034      	beq.n	800322c <HAL_I2C_Master_Transmit+0x184>
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d130      	bne.n	800322c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	9300      	str	r3, [sp, #0]
 80031ce:	6a3b      	ldr	r3, [r7, #32]
 80031d0:	2200      	movs	r2, #0
 80031d2:	2180      	movs	r1, #128	; 0x80
 80031d4:	68f8      	ldr	r0, [r7, #12]
 80031d6:	f000 fc4b 	bl	8003a70 <I2C_WaitOnFlagUntilTimeout>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d001      	beq.n	80031e4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e04d      	b.n	8003280 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	2bff      	cmp	r3, #255	; 0xff
 80031ec:	d90e      	bls.n	800320c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	22ff      	movs	r2, #255	; 0xff
 80031f2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031f8:	b2da      	uxtb	r2, r3
 80031fa:	8979      	ldrh	r1, [r7, #10]
 80031fc:	2300      	movs	r3, #0
 80031fe:	9300      	str	r3, [sp, #0]
 8003200:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003204:	68f8      	ldr	r0, [r7, #12]
 8003206:	f000 fe6f 	bl	8003ee8 <I2C_TransferConfig>
 800320a:	e00f      	b.n	800322c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003210:	b29a      	uxth	r2, r3
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800321a:	b2da      	uxtb	r2, r3
 800321c:	8979      	ldrh	r1, [r7, #10]
 800321e:	2300      	movs	r3, #0
 8003220:	9300      	str	r3, [sp, #0]
 8003222:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003226:	68f8      	ldr	r0, [r7, #12]
 8003228:	f000 fe5e 	bl	8003ee8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003230:	b29b      	uxth	r3, r3
 8003232:	2b00      	cmp	r3, #0
 8003234:	d19e      	bne.n	8003174 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003236:	697a      	ldr	r2, [r7, #20]
 8003238:	6a39      	ldr	r1, [r7, #32]
 800323a:	68f8      	ldr	r0, [r7, #12]
 800323c:	f000 fcae 	bl	8003b9c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d001      	beq.n	800324a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e01a      	b.n	8003280 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	2220      	movs	r2, #32
 8003250:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	6859      	ldr	r1, [r3, #4]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	4b0b      	ldr	r3, [pc, #44]	; (800328c <HAL_I2C_Master_Transmit+0x1e4>)
 800325e:	400b      	ands	r3, r1
 8003260:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2220      	movs	r2, #32
 8003266:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2200      	movs	r2, #0
 8003276:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800327a:	2300      	movs	r3, #0
 800327c:	e000      	b.n	8003280 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800327e:	2302      	movs	r3, #2
  }
}
 8003280:	4618      	mov	r0, r3
 8003282:	3718      	adds	r7, #24
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}
 8003288:	80002000 	.word	0x80002000
 800328c:	fe00e800 	.word	0xfe00e800

08003290 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b088      	sub	sp, #32
 8003294:	af02      	add	r7, sp, #8
 8003296:	60f8      	str	r0, [r7, #12]
 8003298:	607a      	str	r2, [r7, #4]
 800329a:	461a      	mov	r2, r3
 800329c:	460b      	mov	r3, r1
 800329e:	817b      	strh	r3, [r7, #10]
 80032a0:	4613      	mov	r3, r2
 80032a2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	2b20      	cmp	r3, #32
 80032ae:	f040 80db 	bne.w	8003468 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d101      	bne.n	80032c0 <HAL_I2C_Master_Receive+0x30>
 80032bc:	2302      	movs	r3, #2
 80032be:	e0d4      	b.n	800346a <HAL_I2C_Master_Receive+0x1da>
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80032c8:	f7ff fb70 	bl	80029ac <HAL_GetTick>
 80032cc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	9300      	str	r3, [sp, #0]
 80032d2:	2319      	movs	r3, #25
 80032d4:	2201      	movs	r2, #1
 80032d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80032da:	68f8      	ldr	r0, [r7, #12]
 80032dc:	f000 fbc8 	bl	8003a70 <I2C_WaitOnFlagUntilTimeout>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d001      	beq.n	80032ea <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e0bf      	b.n	800346a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2222      	movs	r2, #34	; 0x22
 80032ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2210      	movs	r2, #16
 80032f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2200      	movs	r2, #0
 80032fe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	893a      	ldrh	r2, [r7, #8]
 800330a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2200      	movs	r2, #0
 8003310:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003316:	b29b      	uxth	r3, r3
 8003318:	2bff      	cmp	r3, #255	; 0xff
 800331a:	d90e      	bls.n	800333a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	22ff      	movs	r2, #255	; 0xff
 8003320:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003326:	b2da      	uxtb	r2, r3
 8003328:	8979      	ldrh	r1, [r7, #10]
 800332a:	4b52      	ldr	r3, [pc, #328]	; (8003474 <HAL_I2C_Master_Receive+0x1e4>)
 800332c:	9300      	str	r3, [sp, #0]
 800332e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003332:	68f8      	ldr	r0, [r7, #12]
 8003334:	f000 fdd8 	bl	8003ee8 <I2C_TransferConfig>
 8003338:	e06d      	b.n	8003416 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800333e:	b29a      	uxth	r2, r3
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003348:	b2da      	uxtb	r2, r3
 800334a:	8979      	ldrh	r1, [r7, #10]
 800334c:	4b49      	ldr	r3, [pc, #292]	; (8003474 <HAL_I2C_Master_Receive+0x1e4>)
 800334e:	9300      	str	r3, [sp, #0]
 8003350:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003354:	68f8      	ldr	r0, [r7, #12]
 8003356:	f000 fdc7 	bl	8003ee8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800335a:	e05c      	b.n	8003416 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800335c:	697a      	ldr	r2, [r7, #20]
 800335e:	6a39      	ldr	r1, [r7, #32]
 8003360:	68f8      	ldr	r0, [r7, #12]
 8003362:	f000 fc5f 	bl	8003c24 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d001      	beq.n	8003370 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e07c      	b.n	800346a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337a:	b2d2      	uxtb	r2, r2
 800337c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003382:	1c5a      	adds	r2, r3, #1
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800338c:	3b01      	subs	r3, #1
 800338e:	b29a      	uxth	r2, r3
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003398:	b29b      	uxth	r3, r3
 800339a:	3b01      	subs	r3, #1
 800339c:	b29a      	uxth	r2, r3
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d034      	beq.n	8003416 <HAL_I2C_Master_Receive+0x186>
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d130      	bne.n	8003416 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	9300      	str	r3, [sp, #0]
 80033b8:	6a3b      	ldr	r3, [r7, #32]
 80033ba:	2200      	movs	r2, #0
 80033bc:	2180      	movs	r1, #128	; 0x80
 80033be:	68f8      	ldr	r0, [r7, #12]
 80033c0:	f000 fb56 	bl	8003a70 <I2C_WaitOnFlagUntilTimeout>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d001      	beq.n	80033ce <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e04d      	b.n	800346a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	2bff      	cmp	r3, #255	; 0xff
 80033d6:	d90e      	bls.n	80033f6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	22ff      	movs	r2, #255	; 0xff
 80033dc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033e2:	b2da      	uxtb	r2, r3
 80033e4:	8979      	ldrh	r1, [r7, #10]
 80033e6:	2300      	movs	r3, #0
 80033e8:	9300      	str	r3, [sp, #0]
 80033ea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033ee:	68f8      	ldr	r0, [r7, #12]
 80033f0:	f000 fd7a 	bl	8003ee8 <I2C_TransferConfig>
 80033f4:	e00f      	b.n	8003416 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033fa:	b29a      	uxth	r2, r3
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003404:	b2da      	uxtb	r2, r3
 8003406:	8979      	ldrh	r1, [r7, #10]
 8003408:	2300      	movs	r3, #0
 800340a:	9300      	str	r3, [sp, #0]
 800340c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003410:	68f8      	ldr	r0, [r7, #12]
 8003412:	f000 fd69 	bl	8003ee8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800341a:	b29b      	uxth	r3, r3
 800341c:	2b00      	cmp	r3, #0
 800341e:	d19d      	bne.n	800335c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003420:	697a      	ldr	r2, [r7, #20]
 8003422:	6a39      	ldr	r1, [r7, #32]
 8003424:	68f8      	ldr	r0, [r7, #12]
 8003426:	f000 fbb9 	bl	8003b9c <I2C_WaitOnSTOPFlagUntilTimeout>
 800342a:	4603      	mov	r3, r0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d001      	beq.n	8003434 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e01a      	b.n	800346a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2220      	movs	r2, #32
 800343a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	6859      	ldr	r1, [r3, #4]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	4b0c      	ldr	r3, [pc, #48]	; (8003478 <HAL_I2C_Master_Receive+0x1e8>)
 8003448:	400b      	ands	r3, r1
 800344a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2220      	movs	r2, #32
 8003450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003464:	2300      	movs	r3, #0
 8003466:	e000      	b.n	800346a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003468:	2302      	movs	r3, #2
  }
}
 800346a:	4618      	mov	r0, r3
 800346c:	3718      	adds	r7, #24
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	80002400 	.word	0x80002400
 8003478:	fe00e800 	.word	0xfe00e800

0800347c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b088      	sub	sp, #32
 8003480:	af02      	add	r7, sp, #8
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	4608      	mov	r0, r1
 8003486:	4611      	mov	r1, r2
 8003488:	461a      	mov	r2, r3
 800348a:	4603      	mov	r3, r0
 800348c:	817b      	strh	r3, [r7, #10]
 800348e:	460b      	mov	r3, r1
 8003490:	813b      	strh	r3, [r7, #8]
 8003492:	4613      	mov	r3, r2
 8003494:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b20      	cmp	r3, #32
 80034a0:	f040 80f9 	bne.w	8003696 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80034a4:	6a3b      	ldr	r3, [r7, #32]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d002      	beq.n	80034b0 <HAL_I2C_Mem_Write+0x34>
 80034aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d105      	bne.n	80034bc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034b6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e0ed      	b.n	8003698 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d101      	bne.n	80034ca <HAL_I2C_Mem_Write+0x4e>
 80034c6:	2302      	movs	r3, #2
 80034c8:	e0e6      	b.n	8003698 <HAL_I2C_Mem_Write+0x21c>
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2201      	movs	r2, #1
 80034ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80034d2:	f7ff fa6b 	bl	80029ac <HAL_GetTick>
 80034d6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	9300      	str	r3, [sp, #0]
 80034dc:	2319      	movs	r3, #25
 80034de:	2201      	movs	r2, #1
 80034e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80034e4:	68f8      	ldr	r0, [r7, #12]
 80034e6:	f000 fac3 	bl	8003a70 <I2C_WaitOnFlagUntilTimeout>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d001      	beq.n	80034f4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e0d1      	b.n	8003698 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2221      	movs	r2, #33	; 0x21
 80034f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2240      	movs	r2, #64	; 0x40
 8003500:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2200      	movs	r2, #0
 8003508:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6a3a      	ldr	r2, [r7, #32]
 800350e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003514:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2200      	movs	r2, #0
 800351a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800351c:	88f8      	ldrh	r0, [r7, #6]
 800351e:	893a      	ldrh	r2, [r7, #8]
 8003520:	8979      	ldrh	r1, [r7, #10]
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	9301      	str	r3, [sp, #4]
 8003526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003528:	9300      	str	r3, [sp, #0]
 800352a:	4603      	mov	r3, r0
 800352c:	68f8      	ldr	r0, [r7, #12]
 800352e:	f000 f9d3 	bl	80038d8 <I2C_RequestMemoryWrite>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d005      	beq.n	8003544 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2200      	movs	r2, #0
 800353c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e0a9      	b.n	8003698 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003548:	b29b      	uxth	r3, r3
 800354a:	2bff      	cmp	r3, #255	; 0xff
 800354c:	d90e      	bls.n	800356c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	22ff      	movs	r2, #255	; 0xff
 8003552:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003558:	b2da      	uxtb	r2, r3
 800355a:	8979      	ldrh	r1, [r7, #10]
 800355c:	2300      	movs	r3, #0
 800355e:	9300      	str	r3, [sp, #0]
 8003560:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003564:	68f8      	ldr	r0, [r7, #12]
 8003566:	f000 fcbf 	bl	8003ee8 <I2C_TransferConfig>
 800356a:	e00f      	b.n	800358c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003570:	b29a      	uxth	r2, r3
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800357a:	b2da      	uxtb	r2, r3
 800357c:	8979      	ldrh	r1, [r7, #10]
 800357e:	2300      	movs	r3, #0
 8003580:	9300      	str	r3, [sp, #0]
 8003582:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003586:	68f8      	ldr	r0, [r7, #12]
 8003588:	f000 fcae 	bl	8003ee8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800358c:	697a      	ldr	r2, [r7, #20]
 800358e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003590:	68f8      	ldr	r0, [r7, #12]
 8003592:	f000 fabc 	bl	8003b0e <I2C_WaitOnTXISFlagUntilTimeout>
 8003596:	4603      	mov	r3, r0
 8003598:	2b00      	cmp	r3, #0
 800359a:	d001      	beq.n	80035a0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e07b      	b.n	8003698 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a4:	781a      	ldrb	r2, [r3, #0]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b0:	1c5a      	adds	r2, r3, #1
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	3b01      	subs	r3, #1
 80035be:	b29a      	uxth	r2, r3
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035c8:	3b01      	subs	r3, #1
 80035ca:	b29a      	uxth	r2, r3
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d034      	beq.n	8003644 <HAL_I2C_Mem_Write+0x1c8>
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d130      	bne.n	8003644 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	9300      	str	r3, [sp, #0]
 80035e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035e8:	2200      	movs	r2, #0
 80035ea:	2180      	movs	r1, #128	; 0x80
 80035ec:	68f8      	ldr	r0, [r7, #12]
 80035ee:	f000 fa3f 	bl	8003a70 <I2C_WaitOnFlagUntilTimeout>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d001      	beq.n	80035fc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e04d      	b.n	8003698 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003600:	b29b      	uxth	r3, r3
 8003602:	2bff      	cmp	r3, #255	; 0xff
 8003604:	d90e      	bls.n	8003624 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	22ff      	movs	r2, #255	; 0xff
 800360a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003610:	b2da      	uxtb	r2, r3
 8003612:	8979      	ldrh	r1, [r7, #10]
 8003614:	2300      	movs	r3, #0
 8003616:	9300      	str	r3, [sp, #0]
 8003618:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800361c:	68f8      	ldr	r0, [r7, #12]
 800361e:	f000 fc63 	bl	8003ee8 <I2C_TransferConfig>
 8003622:	e00f      	b.n	8003644 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003628:	b29a      	uxth	r2, r3
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003632:	b2da      	uxtb	r2, r3
 8003634:	8979      	ldrh	r1, [r7, #10]
 8003636:	2300      	movs	r3, #0
 8003638:	9300      	str	r3, [sp, #0]
 800363a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800363e:	68f8      	ldr	r0, [r7, #12]
 8003640:	f000 fc52 	bl	8003ee8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003648:	b29b      	uxth	r3, r3
 800364a:	2b00      	cmp	r3, #0
 800364c:	d19e      	bne.n	800358c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800364e:	697a      	ldr	r2, [r7, #20]
 8003650:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003652:	68f8      	ldr	r0, [r7, #12]
 8003654:	f000 faa2 	bl	8003b9c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d001      	beq.n	8003662 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e01a      	b.n	8003698 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2220      	movs	r2, #32
 8003668:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	6859      	ldr	r1, [r3, #4]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	4b0a      	ldr	r3, [pc, #40]	; (80036a0 <HAL_I2C_Mem_Write+0x224>)
 8003676:	400b      	ands	r3, r1
 8003678:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2220      	movs	r2, #32
 800367e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003692:	2300      	movs	r3, #0
 8003694:	e000      	b.n	8003698 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003696:	2302      	movs	r3, #2
  }
}
 8003698:	4618      	mov	r0, r3
 800369a:	3718      	adds	r7, #24
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	fe00e800 	.word	0xfe00e800

080036a4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b088      	sub	sp, #32
 80036a8:	af02      	add	r7, sp, #8
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	4608      	mov	r0, r1
 80036ae:	4611      	mov	r1, r2
 80036b0:	461a      	mov	r2, r3
 80036b2:	4603      	mov	r3, r0
 80036b4:	817b      	strh	r3, [r7, #10]
 80036b6:	460b      	mov	r3, r1
 80036b8:	813b      	strh	r3, [r7, #8]
 80036ba:	4613      	mov	r3, r2
 80036bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	2b20      	cmp	r3, #32
 80036c8:	f040 80fd 	bne.w	80038c6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80036cc:	6a3b      	ldr	r3, [r7, #32]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d002      	beq.n	80036d8 <HAL_I2C_Mem_Read+0x34>
 80036d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d105      	bne.n	80036e4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036de:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e0f1      	b.n	80038c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d101      	bne.n	80036f2 <HAL_I2C_Mem_Read+0x4e>
 80036ee:	2302      	movs	r3, #2
 80036f0:	e0ea      	b.n	80038c8 <HAL_I2C_Mem_Read+0x224>
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2201      	movs	r2, #1
 80036f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80036fa:	f7ff f957 	bl	80029ac <HAL_GetTick>
 80036fe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	9300      	str	r3, [sp, #0]
 8003704:	2319      	movs	r3, #25
 8003706:	2201      	movs	r2, #1
 8003708:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800370c:	68f8      	ldr	r0, [r7, #12]
 800370e:	f000 f9af 	bl	8003a70 <I2C_WaitOnFlagUntilTimeout>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d001      	beq.n	800371c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e0d5      	b.n	80038c8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2222      	movs	r2, #34	; 0x22
 8003720:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2240      	movs	r2, #64	; 0x40
 8003728:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2200      	movs	r2, #0
 8003730:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6a3a      	ldr	r2, [r7, #32]
 8003736:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800373c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2200      	movs	r2, #0
 8003742:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003744:	88f8      	ldrh	r0, [r7, #6]
 8003746:	893a      	ldrh	r2, [r7, #8]
 8003748:	8979      	ldrh	r1, [r7, #10]
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	9301      	str	r3, [sp, #4]
 800374e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003750:	9300      	str	r3, [sp, #0]
 8003752:	4603      	mov	r3, r0
 8003754:	68f8      	ldr	r0, [r7, #12]
 8003756:	f000 f913 	bl	8003980 <I2C_RequestMemoryRead>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d005      	beq.n	800376c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2200      	movs	r2, #0
 8003764:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e0ad      	b.n	80038c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003770:	b29b      	uxth	r3, r3
 8003772:	2bff      	cmp	r3, #255	; 0xff
 8003774:	d90e      	bls.n	8003794 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	22ff      	movs	r2, #255	; 0xff
 800377a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003780:	b2da      	uxtb	r2, r3
 8003782:	8979      	ldrh	r1, [r7, #10]
 8003784:	4b52      	ldr	r3, [pc, #328]	; (80038d0 <HAL_I2C_Mem_Read+0x22c>)
 8003786:	9300      	str	r3, [sp, #0]
 8003788:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800378c:	68f8      	ldr	r0, [r7, #12]
 800378e:	f000 fbab 	bl	8003ee8 <I2C_TransferConfig>
 8003792:	e00f      	b.n	80037b4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003798:	b29a      	uxth	r2, r3
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037a2:	b2da      	uxtb	r2, r3
 80037a4:	8979      	ldrh	r1, [r7, #10]
 80037a6:	4b4a      	ldr	r3, [pc, #296]	; (80038d0 <HAL_I2C_Mem_Read+0x22c>)
 80037a8:	9300      	str	r3, [sp, #0]
 80037aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037ae:	68f8      	ldr	r0, [r7, #12]
 80037b0:	f000 fb9a 	bl	8003ee8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	9300      	str	r3, [sp, #0]
 80037b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ba:	2200      	movs	r2, #0
 80037bc:	2104      	movs	r1, #4
 80037be:	68f8      	ldr	r0, [r7, #12]
 80037c0:	f000 f956 	bl	8003a70 <I2C_WaitOnFlagUntilTimeout>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d001      	beq.n	80037ce <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e07c      	b.n	80038c8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d8:	b2d2      	uxtb	r2, r2
 80037da:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e0:	1c5a      	adds	r2, r3, #1
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ea:	3b01      	subs	r3, #1
 80037ec:	b29a      	uxth	r2, r3
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	3b01      	subs	r3, #1
 80037fa:	b29a      	uxth	r2, r3
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003804:	b29b      	uxth	r3, r3
 8003806:	2b00      	cmp	r3, #0
 8003808:	d034      	beq.n	8003874 <HAL_I2C_Mem_Read+0x1d0>
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800380e:	2b00      	cmp	r3, #0
 8003810:	d130      	bne.n	8003874 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	9300      	str	r3, [sp, #0]
 8003816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003818:	2200      	movs	r2, #0
 800381a:	2180      	movs	r1, #128	; 0x80
 800381c:	68f8      	ldr	r0, [r7, #12]
 800381e:	f000 f927 	bl	8003a70 <I2C_WaitOnFlagUntilTimeout>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d001      	beq.n	800382c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e04d      	b.n	80038c8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003830:	b29b      	uxth	r3, r3
 8003832:	2bff      	cmp	r3, #255	; 0xff
 8003834:	d90e      	bls.n	8003854 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	22ff      	movs	r2, #255	; 0xff
 800383a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003840:	b2da      	uxtb	r2, r3
 8003842:	8979      	ldrh	r1, [r7, #10]
 8003844:	2300      	movs	r3, #0
 8003846:	9300      	str	r3, [sp, #0]
 8003848:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800384c:	68f8      	ldr	r0, [r7, #12]
 800384e:	f000 fb4b 	bl	8003ee8 <I2C_TransferConfig>
 8003852:	e00f      	b.n	8003874 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003858:	b29a      	uxth	r2, r3
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003862:	b2da      	uxtb	r2, r3
 8003864:	8979      	ldrh	r1, [r7, #10]
 8003866:	2300      	movs	r3, #0
 8003868:	9300      	str	r3, [sp, #0]
 800386a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800386e:	68f8      	ldr	r0, [r7, #12]
 8003870:	f000 fb3a 	bl	8003ee8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003878:	b29b      	uxth	r3, r3
 800387a:	2b00      	cmp	r3, #0
 800387c:	d19a      	bne.n	80037b4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800387e:	697a      	ldr	r2, [r7, #20]
 8003880:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003882:	68f8      	ldr	r0, [r7, #12]
 8003884:	f000 f98a 	bl	8003b9c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d001      	beq.n	8003892 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e01a      	b.n	80038c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	2220      	movs	r2, #32
 8003898:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	6859      	ldr	r1, [r3, #4]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	4b0b      	ldr	r3, [pc, #44]	; (80038d4 <HAL_I2C_Mem_Read+0x230>)
 80038a6:	400b      	ands	r3, r1
 80038a8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2220      	movs	r2, #32
 80038ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80038c2:	2300      	movs	r3, #0
 80038c4:	e000      	b.n	80038c8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80038c6:	2302      	movs	r3, #2
  }
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3718      	adds	r7, #24
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	80002400 	.word	0x80002400
 80038d4:	fe00e800 	.word	0xfe00e800

080038d8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b086      	sub	sp, #24
 80038dc:	af02      	add	r7, sp, #8
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	4608      	mov	r0, r1
 80038e2:	4611      	mov	r1, r2
 80038e4:	461a      	mov	r2, r3
 80038e6:	4603      	mov	r3, r0
 80038e8:	817b      	strh	r3, [r7, #10]
 80038ea:	460b      	mov	r3, r1
 80038ec:	813b      	strh	r3, [r7, #8]
 80038ee:	4613      	mov	r3, r2
 80038f0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80038f2:	88fb      	ldrh	r3, [r7, #6]
 80038f4:	b2da      	uxtb	r2, r3
 80038f6:	8979      	ldrh	r1, [r7, #10]
 80038f8:	4b20      	ldr	r3, [pc, #128]	; (800397c <I2C_RequestMemoryWrite+0xa4>)
 80038fa:	9300      	str	r3, [sp, #0]
 80038fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003900:	68f8      	ldr	r0, [r7, #12]
 8003902:	f000 faf1 	bl	8003ee8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003906:	69fa      	ldr	r2, [r7, #28]
 8003908:	69b9      	ldr	r1, [r7, #24]
 800390a:	68f8      	ldr	r0, [r7, #12]
 800390c:	f000 f8ff 	bl	8003b0e <I2C_WaitOnTXISFlagUntilTimeout>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d001      	beq.n	800391a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e02c      	b.n	8003974 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800391a:	88fb      	ldrh	r3, [r7, #6]
 800391c:	2b01      	cmp	r3, #1
 800391e:	d105      	bne.n	800392c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003920:	893b      	ldrh	r3, [r7, #8]
 8003922:	b2da      	uxtb	r2, r3
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	629a      	str	r2, [r3, #40]	; 0x28
 800392a:	e015      	b.n	8003958 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800392c:	893b      	ldrh	r3, [r7, #8]
 800392e:	0a1b      	lsrs	r3, r3, #8
 8003930:	b29b      	uxth	r3, r3
 8003932:	b2da      	uxtb	r2, r3
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800393a:	69fa      	ldr	r2, [r7, #28]
 800393c:	69b9      	ldr	r1, [r7, #24]
 800393e:	68f8      	ldr	r0, [r7, #12]
 8003940:	f000 f8e5 	bl	8003b0e <I2C_WaitOnTXISFlagUntilTimeout>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d001      	beq.n	800394e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e012      	b.n	8003974 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800394e:	893b      	ldrh	r3, [r7, #8]
 8003950:	b2da      	uxtb	r2, r3
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	9300      	str	r3, [sp, #0]
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	2200      	movs	r2, #0
 8003960:	2180      	movs	r1, #128	; 0x80
 8003962:	68f8      	ldr	r0, [r7, #12]
 8003964:	f000 f884 	bl	8003a70 <I2C_WaitOnFlagUntilTimeout>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d001      	beq.n	8003972 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e000      	b.n	8003974 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003972:	2300      	movs	r3, #0
}
 8003974:	4618      	mov	r0, r3
 8003976:	3710      	adds	r7, #16
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}
 800397c:	80002000 	.word	0x80002000

08003980 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b086      	sub	sp, #24
 8003984:	af02      	add	r7, sp, #8
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	4608      	mov	r0, r1
 800398a:	4611      	mov	r1, r2
 800398c:	461a      	mov	r2, r3
 800398e:	4603      	mov	r3, r0
 8003990:	817b      	strh	r3, [r7, #10]
 8003992:	460b      	mov	r3, r1
 8003994:	813b      	strh	r3, [r7, #8]
 8003996:	4613      	mov	r3, r2
 8003998:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800399a:	88fb      	ldrh	r3, [r7, #6]
 800399c:	b2da      	uxtb	r2, r3
 800399e:	8979      	ldrh	r1, [r7, #10]
 80039a0:	4b20      	ldr	r3, [pc, #128]	; (8003a24 <I2C_RequestMemoryRead+0xa4>)
 80039a2:	9300      	str	r3, [sp, #0]
 80039a4:	2300      	movs	r3, #0
 80039a6:	68f8      	ldr	r0, [r7, #12]
 80039a8:	f000 fa9e 	bl	8003ee8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039ac:	69fa      	ldr	r2, [r7, #28]
 80039ae:	69b9      	ldr	r1, [r7, #24]
 80039b0:	68f8      	ldr	r0, [r7, #12]
 80039b2:	f000 f8ac 	bl	8003b0e <I2C_WaitOnTXISFlagUntilTimeout>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d001      	beq.n	80039c0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e02c      	b.n	8003a1a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80039c0:	88fb      	ldrh	r3, [r7, #6]
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d105      	bne.n	80039d2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80039c6:	893b      	ldrh	r3, [r7, #8]
 80039c8:	b2da      	uxtb	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	629a      	str	r2, [r3, #40]	; 0x28
 80039d0:	e015      	b.n	80039fe <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80039d2:	893b      	ldrh	r3, [r7, #8]
 80039d4:	0a1b      	lsrs	r3, r3, #8
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	b2da      	uxtb	r2, r3
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039e0:	69fa      	ldr	r2, [r7, #28]
 80039e2:	69b9      	ldr	r1, [r7, #24]
 80039e4:	68f8      	ldr	r0, [r7, #12]
 80039e6:	f000 f892 	bl	8003b0e <I2C_WaitOnTXISFlagUntilTimeout>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d001      	beq.n	80039f4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e012      	b.n	8003a1a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80039f4:	893b      	ldrh	r3, [r7, #8]
 80039f6:	b2da      	uxtb	r2, r3
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	9300      	str	r3, [sp, #0]
 8003a02:	69bb      	ldr	r3, [r7, #24]
 8003a04:	2200      	movs	r2, #0
 8003a06:	2140      	movs	r1, #64	; 0x40
 8003a08:	68f8      	ldr	r0, [r7, #12]
 8003a0a:	f000 f831 	bl	8003a70 <I2C_WaitOnFlagUntilTimeout>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d001      	beq.n	8003a18 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e000      	b.n	8003a1a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003a18:	2300      	movs	r3, #0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3710      	adds	r7, #16
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	80002000 	.word	0x80002000

08003a28 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	699b      	ldr	r3, [r3, #24]
 8003a36:	f003 0302 	and.w	r3, r3, #2
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d103      	bne.n	8003a46 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	2200      	movs	r2, #0
 8003a44:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	699b      	ldr	r3, [r3, #24]
 8003a4c:	f003 0301 	and.w	r3, r3, #1
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d007      	beq.n	8003a64 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	699a      	ldr	r2, [r3, #24]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f042 0201 	orr.w	r2, r2, #1
 8003a62:	619a      	str	r2, [r3, #24]
  }
}
 8003a64:	bf00      	nop
 8003a66:	370c      	adds	r7, #12
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	60f8      	str	r0, [r7, #12]
 8003a78:	60b9      	str	r1, [r7, #8]
 8003a7a:	603b      	str	r3, [r7, #0]
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a80:	e031      	b.n	8003ae6 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a88:	d02d      	beq.n	8003ae6 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a8a:	f7fe ff8f 	bl	80029ac <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	683a      	ldr	r2, [r7, #0]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d302      	bcc.n	8003aa0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d122      	bne.n	8003ae6 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	699a      	ldr	r2, [r3, #24]
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	68ba      	ldr	r2, [r7, #8]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	bf0c      	ite	eq
 8003ab0:	2301      	moveq	r3, #1
 8003ab2:	2300      	movne	r3, #0
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	79fb      	ldrb	r3, [r7, #7]
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d113      	bne.n	8003ae6 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ac2:	f043 0220 	orr.w	r2, r3, #32
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2220      	movs	r2, #32
 8003ace:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2200      	movs	r2, #0
 8003ade:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e00f      	b.n	8003b06 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	699a      	ldr	r2, [r3, #24]
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	4013      	ands	r3, r2
 8003af0:	68ba      	ldr	r2, [r7, #8]
 8003af2:	429a      	cmp	r2, r3
 8003af4:	bf0c      	ite	eq
 8003af6:	2301      	moveq	r3, #1
 8003af8:	2300      	movne	r3, #0
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	461a      	mov	r2, r3
 8003afe:	79fb      	ldrb	r3, [r7, #7]
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d0be      	beq.n	8003a82 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3710      	adds	r7, #16
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}

08003b0e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	b084      	sub	sp, #16
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	60f8      	str	r0, [r7, #12]
 8003b16:	60b9      	str	r1, [r7, #8]
 8003b18:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003b1a:	e033      	b.n	8003b84 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	68b9      	ldr	r1, [r7, #8]
 8003b20:	68f8      	ldr	r0, [r7, #12]
 8003b22:	f000 f901 	bl	8003d28 <I2C_IsErrorOccurred>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d001      	beq.n	8003b30 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e031      	b.n	8003b94 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b36:	d025      	beq.n	8003b84 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b38:	f7fe ff38 	bl	80029ac <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	68ba      	ldr	r2, [r7, #8]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d302      	bcc.n	8003b4e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d11a      	bne.n	8003b84 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	699b      	ldr	r3, [r3, #24]
 8003b54:	f003 0302 	and.w	r3, r3, #2
 8003b58:	2b02      	cmp	r3, #2
 8003b5a:	d013      	beq.n	8003b84 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b60:	f043 0220 	orr.w	r2, r3, #32
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2220      	movs	r2, #32
 8003b6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e007      	b.n	8003b94 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	699b      	ldr	r3, [r3, #24]
 8003b8a:	f003 0302 	and.w	r3, r3, #2
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d1c4      	bne.n	8003b1c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003b92:	2300      	movs	r3, #0
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3710      	adds	r7, #16
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	60b9      	str	r1, [r7, #8]
 8003ba6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ba8:	e02f      	b.n	8003c0a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	68b9      	ldr	r1, [r7, #8]
 8003bae:	68f8      	ldr	r0, [r7, #12]
 8003bb0:	f000 f8ba 	bl	8003d28 <I2C_IsErrorOccurred>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d001      	beq.n	8003bbe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e02d      	b.n	8003c1a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bbe:	f7fe fef5 	bl	80029ac <HAL_GetTick>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	68ba      	ldr	r2, [r7, #8]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d302      	bcc.n	8003bd4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d11a      	bne.n	8003c0a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	699b      	ldr	r3, [r3, #24]
 8003bda:	f003 0320 	and.w	r3, r3, #32
 8003bde:	2b20      	cmp	r3, #32
 8003be0:	d013      	beq.n	8003c0a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be6:	f043 0220 	orr.w	r2, r3, #32
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2220      	movs	r2, #32
 8003bf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2200      	movs	r2, #0
 8003c02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e007      	b.n	8003c1a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	699b      	ldr	r3, [r3, #24]
 8003c10:	f003 0320 	and.w	r3, r3, #32
 8003c14:	2b20      	cmp	r3, #32
 8003c16:	d1c8      	bne.n	8003baa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3710      	adds	r7, #16
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
	...

08003c24 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b084      	sub	sp, #16
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	60f8      	str	r0, [r7, #12]
 8003c2c:	60b9      	str	r1, [r7, #8]
 8003c2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c30:	e06b      	b.n	8003d0a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	68b9      	ldr	r1, [r7, #8]
 8003c36:	68f8      	ldr	r0, [r7, #12]
 8003c38:	f000 f876 	bl	8003d28 <I2C_IsErrorOccurred>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d001      	beq.n	8003c46 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e069      	b.n	8003d1a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	699b      	ldr	r3, [r3, #24]
 8003c4c:	f003 0320 	and.w	r3, r3, #32
 8003c50:	2b20      	cmp	r3, #32
 8003c52:	d138      	bne.n	8003cc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	699b      	ldr	r3, [r3, #24]
 8003c5a:	f003 0304 	and.w	r3, r3, #4
 8003c5e:	2b04      	cmp	r3, #4
 8003c60:	d105      	bne.n	8003c6e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d001      	beq.n	8003c6e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	e055      	b.n	8003d1a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	f003 0310 	and.w	r3, r3, #16
 8003c78:	2b10      	cmp	r3, #16
 8003c7a:	d107      	bne.n	8003c8c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2210      	movs	r2, #16
 8003c82:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2204      	movs	r2, #4
 8003c88:	645a      	str	r2, [r3, #68]	; 0x44
 8003c8a:	e002      	b.n	8003c92 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	2220      	movs	r2, #32
 8003c98:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	6859      	ldr	r1, [r3, #4]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	4b1f      	ldr	r3, [pc, #124]	; (8003d24 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8003ca6:	400b      	ands	r3, r1
 8003ca8:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2220      	movs	r2, #32
 8003cae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e029      	b.n	8003d1a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cc6:	f7fe fe71 	bl	80029ac <HAL_GetTick>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	68ba      	ldr	r2, [r7, #8]
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d302      	bcc.n	8003cdc <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d116      	bne.n	8003d0a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	699b      	ldr	r3, [r3, #24]
 8003ce2:	f003 0304 	and.w	r3, r3, #4
 8003ce6:	2b04      	cmp	r3, #4
 8003ce8:	d00f      	beq.n	8003d0a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cee:	f043 0220 	orr.w	r2, r3, #32
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2220      	movs	r2, #32
 8003cfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e007      	b.n	8003d1a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	699b      	ldr	r3, [r3, #24]
 8003d10:	f003 0304 	and.w	r3, r3, #4
 8003d14:	2b04      	cmp	r3, #4
 8003d16:	d18c      	bne.n	8003c32 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d18:	2300      	movs	r3, #0
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3710      	adds	r7, #16
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	fe00e800 	.word	0xfe00e800

08003d28 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b08a      	sub	sp, #40	; 0x28
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	60f8      	str	r0, [r7, #12]
 8003d30:	60b9      	str	r1, [r7, #8]
 8003d32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d34:	2300      	movs	r3, #0
 8003d36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	699b      	ldr	r3, [r3, #24]
 8003d40:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003d42:	2300      	movs	r3, #0
 8003d44:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	f003 0310 	and.w	r3, r3, #16
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d068      	beq.n	8003e26 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2210      	movs	r2, #16
 8003d5a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003d5c:	e049      	b.n	8003df2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d64:	d045      	beq.n	8003df2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003d66:	f7fe fe21 	bl	80029ac <HAL_GetTick>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	68ba      	ldr	r2, [r7, #8]
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d302      	bcc.n	8003d7c <I2C_IsErrorOccurred+0x54>
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d13a      	bne.n	8003df2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d86:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003d8e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	699b      	ldr	r3, [r3, #24]
 8003d96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d9e:	d121      	bne.n	8003de4 <I2C_IsErrorOccurred+0xbc>
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003da6:	d01d      	beq.n	8003de4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003da8:	7cfb      	ldrb	r3, [r7, #19]
 8003daa:	2b20      	cmp	r3, #32
 8003dac:	d01a      	beq.n	8003de4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	685a      	ldr	r2, [r3, #4]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003dbc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003dbe:	f7fe fdf5 	bl	80029ac <HAL_GetTick>
 8003dc2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003dc4:	e00e      	b.n	8003de4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003dc6:	f7fe fdf1 	bl	80029ac <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	2b19      	cmp	r3, #25
 8003dd2:	d907      	bls.n	8003de4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003dd4:	6a3b      	ldr	r3, [r7, #32]
 8003dd6:	f043 0320 	orr.w	r3, r3, #32
 8003dda:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003de2:	e006      	b.n	8003df2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	699b      	ldr	r3, [r3, #24]
 8003dea:	f003 0320 	and.w	r3, r3, #32
 8003dee:	2b20      	cmp	r3, #32
 8003df0:	d1e9      	bne.n	8003dc6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	699b      	ldr	r3, [r3, #24]
 8003df8:	f003 0320 	and.w	r3, r3, #32
 8003dfc:	2b20      	cmp	r3, #32
 8003dfe:	d003      	beq.n	8003e08 <I2C_IsErrorOccurred+0xe0>
 8003e00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d0aa      	beq.n	8003d5e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003e08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d103      	bne.n	8003e18 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	2220      	movs	r2, #32
 8003e16:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003e18:	6a3b      	ldr	r3, [r7, #32]
 8003e1a:	f043 0304 	orr.w	r3, r3, #4
 8003e1e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	699b      	ldr	r3, [r3, #24]
 8003e2c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d00b      	beq.n	8003e50 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003e38:	6a3b      	ldr	r3, [r7, #32]
 8003e3a:	f043 0301 	orr.w	r3, r3, #1
 8003e3e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e48:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003e50:	69bb      	ldr	r3, [r7, #24]
 8003e52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d00b      	beq.n	8003e72 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003e5a:	6a3b      	ldr	r3, [r7, #32]
 8003e5c:	f043 0308 	orr.w	r3, r3, #8
 8003e60:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e6a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003e72:	69bb      	ldr	r3, [r7, #24]
 8003e74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d00b      	beq.n	8003e94 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003e7c:	6a3b      	ldr	r3, [r7, #32]
 8003e7e:	f043 0302 	orr.w	r3, r3, #2
 8003e82:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e8c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003e94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d01c      	beq.n	8003ed6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003e9c:	68f8      	ldr	r0, [r7, #12]
 8003e9e:	f7ff fdc3 	bl	8003a28 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	6859      	ldr	r1, [r3, #4]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	4b0d      	ldr	r3, [pc, #52]	; (8003ee4 <I2C_IsErrorOccurred+0x1bc>)
 8003eae:	400b      	ands	r3, r1
 8003eb0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003eb6:	6a3b      	ldr	r3, [r7, #32]
 8003eb8:	431a      	orrs	r2, r3
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2220      	movs	r2, #32
 8003ec2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003ed6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3728      	adds	r7, #40	; 0x28
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	fe00e800 	.word	0xfe00e800

08003ee8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b087      	sub	sp, #28
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	60f8      	str	r0, [r7, #12]
 8003ef0:	607b      	str	r3, [r7, #4]
 8003ef2:	460b      	mov	r3, r1
 8003ef4:	817b      	strh	r3, [r7, #10]
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003efa:	897b      	ldrh	r3, [r7, #10]
 8003efc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003f00:	7a7b      	ldrb	r3, [r7, #9]
 8003f02:	041b      	lsls	r3, r3, #16
 8003f04:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f08:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f0e:	6a3b      	ldr	r3, [r7, #32]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003f16:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	685a      	ldr	r2, [r3, #4]
 8003f1e:	6a3b      	ldr	r3, [r7, #32]
 8003f20:	0d5b      	lsrs	r3, r3, #21
 8003f22:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003f26:	4b08      	ldr	r3, [pc, #32]	; (8003f48 <I2C_TransferConfig+0x60>)
 8003f28:	430b      	orrs	r3, r1
 8003f2a:	43db      	mvns	r3, r3
 8003f2c:	ea02 0103 	and.w	r1, r2, r3
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	697a      	ldr	r2, [r7, #20]
 8003f36:	430a      	orrs	r2, r1
 8003f38:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003f3a:	bf00      	nop
 8003f3c:	371c      	adds	r7, #28
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr
 8003f46:	bf00      	nop
 8003f48:	03ff63ff 	.word	0x03ff63ff

08003f4c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	2b20      	cmp	r3, #32
 8003f60:	d138      	bne.n	8003fd4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d101      	bne.n	8003f70 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003f6c:	2302      	movs	r3, #2
 8003f6e:	e032      	b.n	8003fd6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2224      	movs	r2, #36	; 0x24
 8003f7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f022 0201 	bic.w	r2, r2, #1
 8003f8e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003f9e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	6819      	ldr	r1, [r3, #0]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	683a      	ldr	r2, [r7, #0]
 8003fac:	430a      	orrs	r2, r1
 8003fae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f042 0201 	orr.w	r2, r2, #1
 8003fbe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2220      	movs	r2, #32
 8003fc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	e000      	b.n	8003fd6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003fd4:	2302      	movs	r3, #2
  }
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	370c      	adds	r7, #12
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr

08003fe2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003fe2:	b480      	push	{r7}
 8003fe4:	b085      	sub	sp, #20
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
 8003fea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	2b20      	cmp	r3, #32
 8003ff6:	d139      	bne.n	800406c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d101      	bne.n	8004006 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004002:	2302      	movs	r3, #2
 8004004:	e033      	b.n	800406e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2201      	movs	r2, #1
 800400a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2224      	movs	r2, #36	; 0x24
 8004012:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f022 0201 	bic.w	r2, r2, #1
 8004024:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004034:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	021b      	lsls	r3, r3, #8
 800403a:	68fa      	ldr	r2, [r7, #12]
 800403c:	4313      	orrs	r3, r2
 800403e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68fa      	ldr	r2, [r7, #12]
 8004046:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f042 0201 	orr.w	r2, r2, #1
 8004056:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2220      	movs	r2, #32
 800405c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004068:	2300      	movs	r3, #0
 800406a:	e000      	b.n	800406e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800406c:	2302      	movs	r3, #2
  }
}
 800406e:	4618      	mov	r0, r3
 8004070:	3714      	adds	r7, #20
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr
	...

0800407c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8004082:	af00      	add	r7, sp, #0
 8004084:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004088:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800408c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800408e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004092:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d102      	bne.n	80040a2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	f001 b823 	b.w	80050e8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0301 	and.w	r3, r3, #1
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	f000 817d 	beq.w	80043b2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80040b8:	4bbc      	ldr	r3, [pc, #752]	; (80043ac <HAL_RCC_OscConfig+0x330>)
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	f003 030c 	and.w	r3, r3, #12
 80040c0:	2b04      	cmp	r3, #4
 80040c2:	d00c      	beq.n	80040de <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80040c4:	4bb9      	ldr	r3, [pc, #740]	; (80043ac <HAL_RCC_OscConfig+0x330>)
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f003 030c 	and.w	r3, r3, #12
 80040cc:	2b08      	cmp	r3, #8
 80040ce:	d15c      	bne.n	800418a <HAL_RCC_OscConfig+0x10e>
 80040d0:	4bb6      	ldr	r3, [pc, #728]	; (80043ac <HAL_RCC_OscConfig+0x330>)
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040dc:	d155      	bne.n	800418a <HAL_RCC_OscConfig+0x10e>
 80040de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80040e2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040e6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80040ea:	fa93 f3a3 	rbit	r3, r3
 80040ee:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80040f2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040f6:	fab3 f383 	clz	r3, r3
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	095b      	lsrs	r3, r3, #5
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	f043 0301 	orr.w	r3, r3, #1
 8004104:	b2db      	uxtb	r3, r3
 8004106:	2b01      	cmp	r3, #1
 8004108:	d102      	bne.n	8004110 <HAL_RCC_OscConfig+0x94>
 800410a:	4ba8      	ldr	r3, [pc, #672]	; (80043ac <HAL_RCC_OscConfig+0x330>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	e015      	b.n	800413c <HAL_RCC_OscConfig+0xc0>
 8004110:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004114:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004118:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800411c:	fa93 f3a3 	rbit	r3, r3
 8004120:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004124:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004128:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800412c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8004130:	fa93 f3a3 	rbit	r3, r3
 8004134:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8004138:	4b9c      	ldr	r3, [pc, #624]	; (80043ac <HAL_RCC_OscConfig+0x330>)
 800413a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004140:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8004144:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004148:	fa92 f2a2 	rbit	r2, r2
 800414c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8004150:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8004154:	fab2 f282 	clz	r2, r2
 8004158:	b2d2      	uxtb	r2, r2
 800415a:	f042 0220 	orr.w	r2, r2, #32
 800415e:	b2d2      	uxtb	r2, r2
 8004160:	f002 021f 	and.w	r2, r2, #31
 8004164:	2101      	movs	r1, #1
 8004166:	fa01 f202 	lsl.w	r2, r1, r2
 800416a:	4013      	ands	r3, r2
 800416c:	2b00      	cmp	r3, #0
 800416e:	f000 811f 	beq.w	80043b0 <HAL_RCC_OscConfig+0x334>
 8004172:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004176:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	2b00      	cmp	r3, #0
 8004180:	f040 8116 	bne.w	80043b0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	f000 bfaf 	b.w	80050e8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800418a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800418e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800419a:	d106      	bne.n	80041aa <HAL_RCC_OscConfig+0x12e>
 800419c:	4b83      	ldr	r3, [pc, #524]	; (80043ac <HAL_RCC_OscConfig+0x330>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a82      	ldr	r2, [pc, #520]	; (80043ac <HAL_RCC_OscConfig+0x330>)
 80041a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041a6:	6013      	str	r3, [r2, #0]
 80041a8:	e036      	b.n	8004218 <HAL_RCC_OscConfig+0x19c>
 80041aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d10c      	bne.n	80041d4 <HAL_RCC_OscConfig+0x158>
 80041ba:	4b7c      	ldr	r3, [pc, #496]	; (80043ac <HAL_RCC_OscConfig+0x330>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a7b      	ldr	r2, [pc, #492]	; (80043ac <HAL_RCC_OscConfig+0x330>)
 80041c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041c4:	6013      	str	r3, [r2, #0]
 80041c6:	4b79      	ldr	r3, [pc, #484]	; (80043ac <HAL_RCC_OscConfig+0x330>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a78      	ldr	r2, [pc, #480]	; (80043ac <HAL_RCC_OscConfig+0x330>)
 80041cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041d0:	6013      	str	r3, [r2, #0]
 80041d2:	e021      	b.n	8004218 <HAL_RCC_OscConfig+0x19c>
 80041d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041e4:	d10c      	bne.n	8004200 <HAL_RCC_OscConfig+0x184>
 80041e6:	4b71      	ldr	r3, [pc, #452]	; (80043ac <HAL_RCC_OscConfig+0x330>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a70      	ldr	r2, [pc, #448]	; (80043ac <HAL_RCC_OscConfig+0x330>)
 80041ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041f0:	6013      	str	r3, [r2, #0]
 80041f2:	4b6e      	ldr	r3, [pc, #440]	; (80043ac <HAL_RCC_OscConfig+0x330>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a6d      	ldr	r2, [pc, #436]	; (80043ac <HAL_RCC_OscConfig+0x330>)
 80041f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041fc:	6013      	str	r3, [r2, #0]
 80041fe:	e00b      	b.n	8004218 <HAL_RCC_OscConfig+0x19c>
 8004200:	4b6a      	ldr	r3, [pc, #424]	; (80043ac <HAL_RCC_OscConfig+0x330>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a69      	ldr	r2, [pc, #420]	; (80043ac <HAL_RCC_OscConfig+0x330>)
 8004206:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800420a:	6013      	str	r3, [r2, #0]
 800420c:	4b67      	ldr	r3, [pc, #412]	; (80043ac <HAL_RCC_OscConfig+0x330>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a66      	ldr	r2, [pc, #408]	; (80043ac <HAL_RCC_OscConfig+0x330>)
 8004212:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004216:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004218:	4b64      	ldr	r3, [pc, #400]	; (80043ac <HAL_RCC_OscConfig+0x330>)
 800421a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800421c:	f023 020f 	bic.w	r2, r3, #15
 8004220:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004224:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	495f      	ldr	r1, [pc, #380]	; (80043ac <HAL_RCC_OscConfig+0x330>)
 800422e:	4313      	orrs	r3, r2
 8004230:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004232:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004236:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d059      	beq.n	80042f6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004242:	f7fe fbb3 	bl	80029ac <HAL_GetTick>
 8004246:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800424a:	e00a      	b.n	8004262 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800424c:	f7fe fbae 	bl	80029ac <HAL_GetTick>
 8004250:	4602      	mov	r2, r0
 8004252:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	2b64      	cmp	r3, #100	; 0x64
 800425a:	d902      	bls.n	8004262 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	f000 bf43 	b.w	80050e8 <HAL_RCC_OscConfig+0x106c>
 8004262:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004266:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800426a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800426e:	fa93 f3a3 	rbit	r3, r3
 8004272:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8004276:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800427a:	fab3 f383 	clz	r3, r3
 800427e:	b2db      	uxtb	r3, r3
 8004280:	095b      	lsrs	r3, r3, #5
 8004282:	b2db      	uxtb	r3, r3
 8004284:	f043 0301 	orr.w	r3, r3, #1
 8004288:	b2db      	uxtb	r3, r3
 800428a:	2b01      	cmp	r3, #1
 800428c:	d102      	bne.n	8004294 <HAL_RCC_OscConfig+0x218>
 800428e:	4b47      	ldr	r3, [pc, #284]	; (80043ac <HAL_RCC_OscConfig+0x330>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	e015      	b.n	80042c0 <HAL_RCC_OscConfig+0x244>
 8004294:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004298:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800429c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80042a0:	fa93 f3a3 	rbit	r3, r3
 80042a4:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80042a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80042ac:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80042b0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80042b4:	fa93 f3a3 	rbit	r3, r3
 80042b8:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80042bc:	4b3b      	ldr	r3, [pc, #236]	; (80043ac <HAL_RCC_OscConfig+0x330>)
 80042be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80042c4:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80042c8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80042cc:	fa92 f2a2 	rbit	r2, r2
 80042d0:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80042d4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80042d8:	fab2 f282 	clz	r2, r2
 80042dc:	b2d2      	uxtb	r2, r2
 80042de:	f042 0220 	orr.w	r2, r2, #32
 80042e2:	b2d2      	uxtb	r2, r2
 80042e4:	f002 021f 	and.w	r2, r2, #31
 80042e8:	2101      	movs	r1, #1
 80042ea:	fa01 f202 	lsl.w	r2, r1, r2
 80042ee:	4013      	ands	r3, r2
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d0ab      	beq.n	800424c <HAL_RCC_OscConfig+0x1d0>
 80042f4:	e05d      	b.n	80043b2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042f6:	f7fe fb59 	bl	80029ac <HAL_GetTick>
 80042fa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042fe:	e00a      	b.n	8004316 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004300:	f7fe fb54 	bl	80029ac <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800430a:	1ad3      	subs	r3, r2, r3
 800430c:	2b64      	cmp	r3, #100	; 0x64
 800430e:	d902      	bls.n	8004316 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8004310:	2303      	movs	r3, #3
 8004312:	f000 bee9 	b.w	80050e8 <HAL_RCC_OscConfig+0x106c>
 8004316:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800431a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800431e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8004322:	fa93 f3a3 	rbit	r3, r3
 8004326:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800432a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800432e:	fab3 f383 	clz	r3, r3
 8004332:	b2db      	uxtb	r3, r3
 8004334:	095b      	lsrs	r3, r3, #5
 8004336:	b2db      	uxtb	r3, r3
 8004338:	f043 0301 	orr.w	r3, r3, #1
 800433c:	b2db      	uxtb	r3, r3
 800433e:	2b01      	cmp	r3, #1
 8004340:	d102      	bne.n	8004348 <HAL_RCC_OscConfig+0x2cc>
 8004342:	4b1a      	ldr	r3, [pc, #104]	; (80043ac <HAL_RCC_OscConfig+0x330>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	e015      	b.n	8004374 <HAL_RCC_OscConfig+0x2f8>
 8004348:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800434c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004350:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004354:	fa93 f3a3 	rbit	r3, r3
 8004358:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800435c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004360:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004364:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004368:	fa93 f3a3 	rbit	r3, r3
 800436c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004370:	4b0e      	ldr	r3, [pc, #56]	; (80043ac <HAL_RCC_OscConfig+0x330>)
 8004372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004374:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004378:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800437c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004380:	fa92 f2a2 	rbit	r2, r2
 8004384:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8004388:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800438c:	fab2 f282 	clz	r2, r2
 8004390:	b2d2      	uxtb	r2, r2
 8004392:	f042 0220 	orr.w	r2, r2, #32
 8004396:	b2d2      	uxtb	r2, r2
 8004398:	f002 021f 	and.w	r2, r2, #31
 800439c:	2101      	movs	r1, #1
 800439e:	fa01 f202 	lsl.w	r2, r1, r2
 80043a2:	4013      	ands	r3, r2
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d1ab      	bne.n	8004300 <HAL_RCC_OscConfig+0x284>
 80043a8:	e003      	b.n	80043b2 <HAL_RCC_OscConfig+0x336>
 80043aa:	bf00      	nop
 80043ac:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0302 	and.w	r3, r3, #2
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	f000 817d 	beq.w	80046c2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80043c8:	4ba6      	ldr	r3, [pc, #664]	; (8004664 <HAL_RCC_OscConfig+0x5e8>)
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	f003 030c 	and.w	r3, r3, #12
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d00b      	beq.n	80043ec <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80043d4:	4ba3      	ldr	r3, [pc, #652]	; (8004664 <HAL_RCC_OscConfig+0x5e8>)
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	f003 030c 	and.w	r3, r3, #12
 80043dc:	2b08      	cmp	r3, #8
 80043de:	d172      	bne.n	80044c6 <HAL_RCC_OscConfig+0x44a>
 80043e0:	4ba0      	ldr	r3, [pc, #640]	; (8004664 <HAL_RCC_OscConfig+0x5e8>)
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d16c      	bne.n	80044c6 <HAL_RCC_OscConfig+0x44a>
 80043ec:	2302      	movs	r3, #2
 80043ee:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043f2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80043f6:	fa93 f3a3 	rbit	r3, r3
 80043fa:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80043fe:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004402:	fab3 f383 	clz	r3, r3
 8004406:	b2db      	uxtb	r3, r3
 8004408:	095b      	lsrs	r3, r3, #5
 800440a:	b2db      	uxtb	r3, r3
 800440c:	f043 0301 	orr.w	r3, r3, #1
 8004410:	b2db      	uxtb	r3, r3
 8004412:	2b01      	cmp	r3, #1
 8004414:	d102      	bne.n	800441c <HAL_RCC_OscConfig+0x3a0>
 8004416:	4b93      	ldr	r3, [pc, #588]	; (8004664 <HAL_RCC_OscConfig+0x5e8>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	e013      	b.n	8004444 <HAL_RCC_OscConfig+0x3c8>
 800441c:	2302      	movs	r3, #2
 800441e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004422:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004426:	fa93 f3a3 	rbit	r3, r3
 800442a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800442e:	2302      	movs	r3, #2
 8004430:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004434:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004438:	fa93 f3a3 	rbit	r3, r3
 800443c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8004440:	4b88      	ldr	r3, [pc, #544]	; (8004664 <HAL_RCC_OscConfig+0x5e8>)
 8004442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004444:	2202      	movs	r2, #2
 8004446:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800444a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800444e:	fa92 f2a2 	rbit	r2, r2
 8004452:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8004456:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800445a:	fab2 f282 	clz	r2, r2
 800445e:	b2d2      	uxtb	r2, r2
 8004460:	f042 0220 	orr.w	r2, r2, #32
 8004464:	b2d2      	uxtb	r2, r2
 8004466:	f002 021f 	and.w	r2, r2, #31
 800446a:	2101      	movs	r1, #1
 800446c:	fa01 f202 	lsl.w	r2, r1, r2
 8004470:	4013      	ands	r3, r2
 8004472:	2b00      	cmp	r3, #0
 8004474:	d00a      	beq.n	800448c <HAL_RCC_OscConfig+0x410>
 8004476:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800447a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	691b      	ldr	r3, [r3, #16]
 8004482:	2b01      	cmp	r3, #1
 8004484:	d002      	beq.n	800448c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	f000 be2e 	b.w	80050e8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800448c:	4b75      	ldr	r3, [pc, #468]	; (8004664 <HAL_RCC_OscConfig+0x5e8>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004494:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004498:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	695b      	ldr	r3, [r3, #20]
 80044a0:	21f8      	movs	r1, #248	; 0xf8
 80044a2:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044a6:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80044aa:	fa91 f1a1 	rbit	r1, r1
 80044ae:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80044b2:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80044b6:	fab1 f181 	clz	r1, r1
 80044ba:	b2c9      	uxtb	r1, r1
 80044bc:	408b      	lsls	r3, r1
 80044be:	4969      	ldr	r1, [pc, #420]	; (8004664 <HAL_RCC_OscConfig+0x5e8>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044c4:	e0fd      	b.n	80046c2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80044c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	691b      	ldr	r3, [r3, #16]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	f000 8088 	beq.w	80045e8 <HAL_RCC_OscConfig+0x56c>
 80044d8:	2301      	movs	r3, #1
 80044da:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044de:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80044e2:	fa93 f3a3 	rbit	r3, r3
 80044e6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80044ea:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044ee:	fab3 f383 	clz	r3, r3
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80044f8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	461a      	mov	r2, r3
 8004500:	2301      	movs	r3, #1
 8004502:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004504:	f7fe fa52 	bl	80029ac <HAL_GetTick>
 8004508:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800450c:	e00a      	b.n	8004524 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800450e:	f7fe fa4d 	bl	80029ac <HAL_GetTick>
 8004512:	4602      	mov	r2, r0
 8004514:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	2b02      	cmp	r3, #2
 800451c:	d902      	bls.n	8004524 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	f000 bde2 	b.w	80050e8 <HAL_RCC_OscConfig+0x106c>
 8004524:	2302      	movs	r3, #2
 8004526:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800452a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800452e:	fa93 f3a3 	rbit	r3, r3
 8004532:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8004536:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800453a:	fab3 f383 	clz	r3, r3
 800453e:	b2db      	uxtb	r3, r3
 8004540:	095b      	lsrs	r3, r3, #5
 8004542:	b2db      	uxtb	r3, r3
 8004544:	f043 0301 	orr.w	r3, r3, #1
 8004548:	b2db      	uxtb	r3, r3
 800454a:	2b01      	cmp	r3, #1
 800454c:	d102      	bne.n	8004554 <HAL_RCC_OscConfig+0x4d8>
 800454e:	4b45      	ldr	r3, [pc, #276]	; (8004664 <HAL_RCC_OscConfig+0x5e8>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	e013      	b.n	800457c <HAL_RCC_OscConfig+0x500>
 8004554:	2302      	movs	r3, #2
 8004556:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800455a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800455e:	fa93 f3a3 	rbit	r3, r3
 8004562:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004566:	2302      	movs	r3, #2
 8004568:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800456c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004570:	fa93 f3a3 	rbit	r3, r3
 8004574:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004578:	4b3a      	ldr	r3, [pc, #232]	; (8004664 <HAL_RCC_OscConfig+0x5e8>)
 800457a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457c:	2202      	movs	r2, #2
 800457e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8004582:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004586:	fa92 f2a2 	rbit	r2, r2
 800458a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800458e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004592:	fab2 f282 	clz	r2, r2
 8004596:	b2d2      	uxtb	r2, r2
 8004598:	f042 0220 	orr.w	r2, r2, #32
 800459c:	b2d2      	uxtb	r2, r2
 800459e:	f002 021f 	and.w	r2, r2, #31
 80045a2:	2101      	movs	r1, #1
 80045a4:	fa01 f202 	lsl.w	r2, r1, r2
 80045a8:	4013      	ands	r3, r2
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d0af      	beq.n	800450e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045ae:	4b2d      	ldr	r3, [pc, #180]	; (8004664 <HAL_RCC_OscConfig+0x5e8>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	695b      	ldr	r3, [r3, #20]
 80045c2:	21f8      	movs	r1, #248	; 0xf8
 80045c4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045c8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80045cc:	fa91 f1a1 	rbit	r1, r1
 80045d0:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80045d4:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80045d8:	fab1 f181 	clz	r1, r1
 80045dc:	b2c9      	uxtb	r1, r1
 80045de:	408b      	lsls	r3, r1
 80045e0:	4920      	ldr	r1, [pc, #128]	; (8004664 <HAL_RCC_OscConfig+0x5e8>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	600b      	str	r3, [r1, #0]
 80045e6:	e06c      	b.n	80046c2 <HAL_RCC_OscConfig+0x646>
 80045e8:	2301      	movs	r3, #1
 80045ea:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ee:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80045f2:	fa93 f3a3 	rbit	r3, r3
 80045f6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80045fa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045fe:	fab3 f383 	clz	r3, r3
 8004602:	b2db      	uxtb	r3, r3
 8004604:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004608:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	461a      	mov	r2, r3
 8004610:	2300      	movs	r3, #0
 8004612:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004614:	f7fe f9ca 	bl	80029ac <HAL_GetTick>
 8004618:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800461c:	e00a      	b.n	8004634 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800461e:	f7fe f9c5 	bl	80029ac <HAL_GetTick>
 8004622:	4602      	mov	r2, r0
 8004624:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	2b02      	cmp	r3, #2
 800462c:	d902      	bls.n	8004634 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	f000 bd5a 	b.w	80050e8 <HAL_RCC_OscConfig+0x106c>
 8004634:	2302      	movs	r3, #2
 8004636:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800463a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800463e:	fa93 f3a3 	rbit	r3, r3
 8004642:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8004646:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800464a:	fab3 f383 	clz	r3, r3
 800464e:	b2db      	uxtb	r3, r3
 8004650:	095b      	lsrs	r3, r3, #5
 8004652:	b2db      	uxtb	r3, r3
 8004654:	f043 0301 	orr.w	r3, r3, #1
 8004658:	b2db      	uxtb	r3, r3
 800465a:	2b01      	cmp	r3, #1
 800465c:	d104      	bne.n	8004668 <HAL_RCC_OscConfig+0x5ec>
 800465e:	4b01      	ldr	r3, [pc, #4]	; (8004664 <HAL_RCC_OscConfig+0x5e8>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	e015      	b.n	8004690 <HAL_RCC_OscConfig+0x614>
 8004664:	40021000 	.word	0x40021000
 8004668:	2302      	movs	r3, #2
 800466a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800466e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004672:	fa93 f3a3 	rbit	r3, r3
 8004676:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800467a:	2302      	movs	r3, #2
 800467c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004680:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004684:	fa93 f3a3 	rbit	r3, r3
 8004688:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800468c:	4bc8      	ldr	r3, [pc, #800]	; (80049b0 <HAL_RCC_OscConfig+0x934>)
 800468e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004690:	2202      	movs	r2, #2
 8004692:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8004696:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800469a:	fa92 f2a2 	rbit	r2, r2
 800469e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80046a2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80046a6:	fab2 f282 	clz	r2, r2
 80046aa:	b2d2      	uxtb	r2, r2
 80046ac:	f042 0220 	orr.w	r2, r2, #32
 80046b0:	b2d2      	uxtb	r2, r2
 80046b2:	f002 021f 	and.w	r2, r2, #31
 80046b6:	2101      	movs	r1, #1
 80046b8:	fa01 f202 	lsl.w	r2, r1, r2
 80046bc:	4013      	ands	r3, r2
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d1ad      	bne.n	800461e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 0308 	and.w	r3, r3, #8
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	f000 8110 	beq.w	80048f8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80046d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046dc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	699b      	ldr	r3, [r3, #24]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d079      	beq.n	80047dc <HAL_RCC_OscConfig+0x760>
 80046e8:	2301      	movs	r3, #1
 80046ea:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ee:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80046f2:	fa93 f3a3 	rbit	r3, r3
 80046f6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80046fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046fe:	fab3 f383 	clz	r3, r3
 8004702:	b2db      	uxtb	r3, r3
 8004704:	461a      	mov	r2, r3
 8004706:	4bab      	ldr	r3, [pc, #684]	; (80049b4 <HAL_RCC_OscConfig+0x938>)
 8004708:	4413      	add	r3, r2
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	461a      	mov	r2, r3
 800470e:	2301      	movs	r3, #1
 8004710:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004712:	f7fe f94b 	bl	80029ac <HAL_GetTick>
 8004716:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800471a:	e00a      	b.n	8004732 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800471c:	f7fe f946 	bl	80029ac <HAL_GetTick>
 8004720:	4602      	mov	r2, r0
 8004722:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	2b02      	cmp	r3, #2
 800472a:	d902      	bls.n	8004732 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800472c:	2303      	movs	r3, #3
 800472e:	f000 bcdb 	b.w	80050e8 <HAL_RCC_OscConfig+0x106c>
 8004732:	2302      	movs	r3, #2
 8004734:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004738:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800473c:	fa93 f3a3 	rbit	r3, r3
 8004740:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004744:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004748:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800474c:	2202      	movs	r2, #2
 800474e:	601a      	str	r2, [r3, #0]
 8004750:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004754:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	fa93 f2a3 	rbit	r2, r3
 800475e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004762:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004766:	601a      	str	r2, [r3, #0]
 8004768:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800476c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004770:	2202      	movs	r2, #2
 8004772:	601a      	str	r2, [r3, #0]
 8004774:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004778:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	fa93 f2a3 	rbit	r2, r3
 8004782:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004786:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800478a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800478c:	4b88      	ldr	r3, [pc, #544]	; (80049b0 <HAL_RCC_OscConfig+0x934>)
 800478e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004790:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004794:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004798:	2102      	movs	r1, #2
 800479a:	6019      	str	r1, [r3, #0]
 800479c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047a0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	fa93 f1a3 	rbit	r1, r3
 80047aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047ae:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80047b2:	6019      	str	r1, [r3, #0]
  return result;
 80047b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047b8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	fab3 f383 	clz	r3, r3
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	f003 031f 	and.w	r3, r3, #31
 80047ce:	2101      	movs	r1, #1
 80047d0:	fa01 f303 	lsl.w	r3, r1, r3
 80047d4:	4013      	ands	r3, r2
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d0a0      	beq.n	800471c <HAL_RCC_OscConfig+0x6a0>
 80047da:	e08d      	b.n	80048f8 <HAL_RCC_OscConfig+0x87c>
 80047dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047e0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80047e4:	2201      	movs	r2, #1
 80047e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047ec:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	fa93 f2a3 	rbit	r2, r3
 80047f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047fa:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80047fe:	601a      	str	r2, [r3, #0]
  return result;
 8004800:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004804:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004808:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800480a:	fab3 f383 	clz	r3, r3
 800480e:	b2db      	uxtb	r3, r3
 8004810:	461a      	mov	r2, r3
 8004812:	4b68      	ldr	r3, [pc, #416]	; (80049b4 <HAL_RCC_OscConfig+0x938>)
 8004814:	4413      	add	r3, r2
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	461a      	mov	r2, r3
 800481a:	2300      	movs	r3, #0
 800481c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800481e:	f7fe f8c5 	bl	80029ac <HAL_GetTick>
 8004822:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004826:	e00a      	b.n	800483e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004828:	f7fe f8c0 	bl	80029ac <HAL_GetTick>
 800482c:	4602      	mov	r2, r0
 800482e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004832:	1ad3      	subs	r3, r2, r3
 8004834:	2b02      	cmp	r3, #2
 8004836:	d902      	bls.n	800483e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8004838:	2303      	movs	r3, #3
 800483a:	f000 bc55 	b.w	80050e8 <HAL_RCC_OscConfig+0x106c>
 800483e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004842:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004846:	2202      	movs	r2, #2
 8004848:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800484a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800484e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	fa93 f2a3 	rbit	r2, r3
 8004858:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800485c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004860:	601a      	str	r2, [r3, #0]
 8004862:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004866:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800486a:	2202      	movs	r2, #2
 800486c:	601a      	str	r2, [r3, #0]
 800486e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004872:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	fa93 f2a3 	rbit	r2, r3
 800487c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004880:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004884:	601a      	str	r2, [r3, #0]
 8004886:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800488a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800488e:	2202      	movs	r2, #2
 8004890:	601a      	str	r2, [r3, #0]
 8004892:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004896:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	fa93 f2a3 	rbit	r2, r3
 80048a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048a4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80048a8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048aa:	4b41      	ldr	r3, [pc, #260]	; (80049b0 <HAL_RCC_OscConfig+0x934>)
 80048ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048b2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80048b6:	2102      	movs	r1, #2
 80048b8:	6019      	str	r1, [r3, #0]
 80048ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048be:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	fa93 f1a3 	rbit	r1, r3
 80048c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048cc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80048d0:	6019      	str	r1, [r3, #0]
  return result;
 80048d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048d6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	fab3 f383 	clz	r3, r3
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	f003 031f 	and.w	r3, r3, #31
 80048ec:	2101      	movs	r1, #1
 80048ee:	fa01 f303 	lsl.w	r3, r1, r3
 80048f2:	4013      	ands	r3, r2
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d197      	bne.n	8004828 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 0304 	and.w	r3, r3, #4
 8004908:	2b00      	cmp	r3, #0
 800490a:	f000 81a1 	beq.w	8004c50 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800490e:	2300      	movs	r3, #0
 8004910:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004914:	4b26      	ldr	r3, [pc, #152]	; (80049b0 <HAL_RCC_OscConfig+0x934>)
 8004916:	69db      	ldr	r3, [r3, #28]
 8004918:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800491c:	2b00      	cmp	r3, #0
 800491e:	d116      	bne.n	800494e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004920:	4b23      	ldr	r3, [pc, #140]	; (80049b0 <HAL_RCC_OscConfig+0x934>)
 8004922:	69db      	ldr	r3, [r3, #28]
 8004924:	4a22      	ldr	r2, [pc, #136]	; (80049b0 <HAL_RCC_OscConfig+0x934>)
 8004926:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800492a:	61d3      	str	r3, [r2, #28]
 800492c:	4b20      	ldr	r3, [pc, #128]	; (80049b0 <HAL_RCC_OscConfig+0x934>)
 800492e:	69db      	ldr	r3, [r3, #28]
 8004930:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004934:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004938:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800493c:	601a      	str	r2, [r3, #0]
 800493e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004942:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004946:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004948:	2301      	movs	r3, #1
 800494a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800494e:	4b1a      	ldr	r3, [pc, #104]	; (80049b8 <HAL_RCC_OscConfig+0x93c>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004956:	2b00      	cmp	r3, #0
 8004958:	d11a      	bne.n	8004990 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800495a:	4b17      	ldr	r3, [pc, #92]	; (80049b8 <HAL_RCC_OscConfig+0x93c>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a16      	ldr	r2, [pc, #88]	; (80049b8 <HAL_RCC_OscConfig+0x93c>)
 8004960:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004964:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004966:	f7fe f821 	bl	80029ac <HAL_GetTick>
 800496a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800496e:	e009      	b.n	8004984 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004970:	f7fe f81c 	bl	80029ac <HAL_GetTick>
 8004974:	4602      	mov	r2, r0
 8004976:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800497a:	1ad3      	subs	r3, r2, r3
 800497c:	2b64      	cmp	r3, #100	; 0x64
 800497e:	d901      	bls.n	8004984 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8004980:	2303      	movs	r3, #3
 8004982:	e3b1      	b.n	80050e8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004984:	4b0c      	ldr	r3, [pc, #48]	; (80049b8 <HAL_RCC_OscConfig+0x93c>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800498c:	2b00      	cmp	r3, #0
 800498e:	d0ef      	beq.n	8004970 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004990:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004994:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	2b01      	cmp	r3, #1
 800499e:	d10d      	bne.n	80049bc <HAL_RCC_OscConfig+0x940>
 80049a0:	4b03      	ldr	r3, [pc, #12]	; (80049b0 <HAL_RCC_OscConfig+0x934>)
 80049a2:	6a1b      	ldr	r3, [r3, #32]
 80049a4:	4a02      	ldr	r2, [pc, #8]	; (80049b0 <HAL_RCC_OscConfig+0x934>)
 80049a6:	f043 0301 	orr.w	r3, r3, #1
 80049aa:	6213      	str	r3, [r2, #32]
 80049ac:	e03c      	b.n	8004a28 <HAL_RCC_OscConfig+0x9ac>
 80049ae:	bf00      	nop
 80049b0:	40021000 	.word	0x40021000
 80049b4:	10908120 	.word	0x10908120
 80049b8:	40007000 	.word	0x40007000
 80049bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049c0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d10c      	bne.n	80049e6 <HAL_RCC_OscConfig+0x96a>
 80049cc:	4bc1      	ldr	r3, [pc, #772]	; (8004cd4 <HAL_RCC_OscConfig+0xc58>)
 80049ce:	6a1b      	ldr	r3, [r3, #32]
 80049d0:	4ac0      	ldr	r2, [pc, #768]	; (8004cd4 <HAL_RCC_OscConfig+0xc58>)
 80049d2:	f023 0301 	bic.w	r3, r3, #1
 80049d6:	6213      	str	r3, [r2, #32]
 80049d8:	4bbe      	ldr	r3, [pc, #760]	; (8004cd4 <HAL_RCC_OscConfig+0xc58>)
 80049da:	6a1b      	ldr	r3, [r3, #32]
 80049dc:	4abd      	ldr	r2, [pc, #756]	; (8004cd4 <HAL_RCC_OscConfig+0xc58>)
 80049de:	f023 0304 	bic.w	r3, r3, #4
 80049e2:	6213      	str	r3, [r2, #32]
 80049e4:	e020      	b.n	8004a28 <HAL_RCC_OscConfig+0x9ac>
 80049e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	2b05      	cmp	r3, #5
 80049f4:	d10c      	bne.n	8004a10 <HAL_RCC_OscConfig+0x994>
 80049f6:	4bb7      	ldr	r3, [pc, #732]	; (8004cd4 <HAL_RCC_OscConfig+0xc58>)
 80049f8:	6a1b      	ldr	r3, [r3, #32]
 80049fa:	4ab6      	ldr	r2, [pc, #728]	; (8004cd4 <HAL_RCC_OscConfig+0xc58>)
 80049fc:	f043 0304 	orr.w	r3, r3, #4
 8004a00:	6213      	str	r3, [r2, #32]
 8004a02:	4bb4      	ldr	r3, [pc, #720]	; (8004cd4 <HAL_RCC_OscConfig+0xc58>)
 8004a04:	6a1b      	ldr	r3, [r3, #32]
 8004a06:	4ab3      	ldr	r2, [pc, #716]	; (8004cd4 <HAL_RCC_OscConfig+0xc58>)
 8004a08:	f043 0301 	orr.w	r3, r3, #1
 8004a0c:	6213      	str	r3, [r2, #32]
 8004a0e:	e00b      	b.n	8004a28 <HAL_RCC_OscConfig+0x9ac>
 8004a10:	4bb0      	ldr	r3, [pc, #704]	; (8004cd4 <HAL_RCC_OscConfig+0xc58>)
 8004a12:	6a1b      	ldr	r3, [r3, #32]
 8004a14:	4aaf      	ldr	r2, [pc, #700]	; (8004cd4 <HAL_RCC_OscConfig+0xc58>)
 8004a16:	f023 0301 	bic.w	r3, r3, #1
 8004a1a:	6213      	str	r3, [r2, #32]
 8004a1c:	4bad      	ldr	r3, [pc, #692]	; (8004cd4 <HAL_RCC_OscConfig+0xc58>)
 8004a1e:	6a1b      	ldr	r3, [r3, #32]
 8004a20:	4aac      	ldr	r2, [pc, #688]	; (8004cd4 <HAL_RCC_OscConfig+0xc58>)
 8004a22:	f023 0304 	bic.w	r3, r3, #4
 8004a26:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a2c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	f000 8081 	beq.w	8004b3c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a3a:	f7fd ffb7 	bl	80029ac <HAL_GetTick>
 8004a3e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a42:	e00b      	b.n	8004a5c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a44:	f7fd ffb2 	bl	80029ac <HAL_GetTick>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004a4e:	1ad3      	subs	r3, r2, r3
 8004a50:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d901      	bls.n	8004a5c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8004a58:	2303      	movs	r3, #3
 8004a5a:	e345      	b.n	80050e8 <HAL_RCC_OscConfig+0x106c>
 8004a5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a60:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004a64:	2202      	movs	r2, #2
 8004a66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a6c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	fa93 f2a3 	rbit	r2, r3
 8004a76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a7a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004a7e:	601a      	str	r2, [r3, #0]
 8004a80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a84:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004a88:	2202      	movs	r2, #2
 8004a8a:	601a      	str	r2, [r3, #0]
 8004a8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a90:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	fa93 f2a3 	rbit	r2, r3
 8004a9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a9e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004aa2:	601a      	str	r2, [r3, #0]
  return result;
 8004aa4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004aa8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004aac:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004aae:	fab3 f383 	clz	r3, r3
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	095b      	lsrs	r3, r3, #5
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	f043 0302 	orr.w	r3, r3, #2
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	2b02      	cmp	r3, #2
 8004ac0:	d102      	bne.n	8004ac8 <HAL_RCC_OscConfig+0xa4c>
 8004ac2:	4b84      	ldr	r3, [pc, #528]	; (8004cd4 <HAL_RCC_OscConfig+0xc58>)
 8004ac4:	6a1b      	ldr	r3, [r3, #32]
 8004ac6:	e013      	b.n	8004af0 <HAL_RCC_OscConfig+0xa74>
 8004ac8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004acc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004ad0:	2202      	movs	r2, #2
 8004ad2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ad4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ad8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	fa93 f2a3 	rbit	r2, r3
 8004ae2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ae6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004aea:	601a      	str	r2, [r3, #0]
 8004aec:	4b79      	ldr	r3, [pc, #484]	; (8004cd4 <HAL_RCC_OscConfig+0xc58>)
 8004aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004af4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004af8:	2102      	movs	r1, #2
 8004afa:	6011      	str	r1, [r2, #0]
 8004afc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004b00:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004b04:	6812      	ldr	r2, [r2, #0]
 8004b06:	fa92 f1a2 	rbit	r1, r2
 8004b0a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004b0e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004b12:	6011      	str	r1, [r2, #0]
  return result;
 8004b14:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004b18:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004b1c:	6812      	ldr	r2, [r2, #0]
 8004b1e:	fab2 f282 	clz	r2, r2
 8004b22:	b2d2      	uxtb	r2, r2
 8004b24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b28:	b2d2      	uxtb	r2, r2
 8004b2a:	f002 021f 	and.w	r2, r2, #31
 8004b2e:	2101      	movs	r1, #1
 8004b30:	fa01 f202 	lsl.w	r2, r1, r2
 8004b34:	4013      	ands	r3, r2
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d084      	beq.n	8004a44 <HAL_RCC_OscConfig+0x9c8>
 8004b3a:	e07f      	b.n	8004c3c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b3c:	f7fd ff36 	bl	80029ac <HAL_GetTick>
 8004b40:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b44:	e00b      	b.n	8004b5e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b46:	f7fd ff31 	bl	80029ac <HAL_GetTick>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d901      	bls.n	8004b5e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	e2c4      	b.n	80050e8 <HAL_RCC_OscConfig+0x106c>
 8004b5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b62:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004b66:	2202      	movs	r2, #2
 8004b68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b6e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	fa93 f2a3 	rbit	r2, r3
 8004b78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b7c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004b80:	601a      	str	r2, [r3, #0]
 8004b82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b86:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004b8a:	2202      	movs	r2, #2
 8004b8c:	601a      	str	r2, [r3, #0]
 8004b8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b92:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	fa93 f2a3 	rbit	r2, r3
 8004b9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ba0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004ba4:	601a      	str	r2, [r3, #0]
  return result;
 8004ba6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004baa:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004bae:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bb0:	fab3 f383 	clz	r3, r3
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	095b      	lsrs	r3, r3, #5
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	f043 0302 	orr.w	r3, r3, #2
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	2b02      	cmp	r3, #2
 8004bc2:	d102      	bne.n	8004bca <HAL_RCC_OscConfig+0xb4e>
 8004bc4:	4b43      	ldr	r3, [pc, #268]	; (8004cd4 <HAL_RCC_OscConfig+0xc58>)
 8004bc6:	6a1b      	ldr	r3, [r3, #32]
 8004bc8:	e013      	b.n	8004bf2 <HAL_RCC_OscConfig+0xb76>
 8004bca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bce:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004bd2:	2202      	movs	r2, #2
 8004bd4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bda:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	fa93 f2a3 	rbit	r2, r3
 8004be4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004be8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004bec:	601a      	str	r2, [r3, #0]
 8004bee:	4b39      	ldr	r3, [pc, #228]	; (8004cd4 <HAL_RCC_OscConfig+0xc58>)
 8004bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004bf6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004bfa:	2102      	movs	r1, #2
 8004bfc:	6011      	str	r1, [r2, #0]
 8004bfe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004c02:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004c06:	6812      	ldr	r2, [r2, #0]
 8004c08:	fa92 f1a2 	rbit	r1, r2
 8004c0c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004c10:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004c14:	6011      	str	r1, [r2, #0]
  return result;
 8004c16:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004c1a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004c1e:	6812      	ldr	r2, [r2, #0]
 8004c20:	fab2 f282 	clz	r2, r2
 8004c24:	b2d2      	uxtb	r2, r2
 8004c26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c2a:	b2d2      	uxtb	r2, r2
 8004c2c:	f002 021f 	and.w	r2, r2, #31
 8004c30:	2101      	movs	r1, #1
 8004c32:	fa01 f202 	lsl.w	r2, r1, r2
 8004c36:	4013      	ands	r3, r2
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d184      	bne.n	8004b46 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004c3c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d105      	bne.n	8004c50 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c44:	4b23      	ldr	r3, [pc, #140]	; (8004cd4 <HAL_RCC_OscConfig+0xc58>)
 8004c46:	69db      	ldr	r3, [r3, #28]
 8004c48:	4a22      	ldr	r2, [pc, #136]	; (8004cd4 <HAL_RCC_OscConfig+0xc58>)
 8004c4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c4e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c54:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	69db      	ldr	r3, [r3, #28]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	f000 8242 	beq.w	80050e6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c62:	4b1c      	ldr	r3, [pc, #112]	; (8004cd4 <HAL_RCC_OscConfig+0xc58>)
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	f003 030c 	and.w	r3, r3, #12
 8004c6a:	2b08      	cmp	r3, #8
 8004c6c:	f000 8213 	beq.w	8005096 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c74:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	69db      	ldr	r3, [r3, #28]
 8004c7c:	2b02      	cmp	r3, #2
 8004c7e:	f040 8162 	bne.w	8004f46 <HAL_RCC_OscConfig+0xeca>
 8004c82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c86:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004c8a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004c8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c94:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	fa93 f2a3 	rbit	r2, r3
 8004c9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ca2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004ca6:	601a      	str	r2, [r3, #0]
  return result;
 8004ca8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cac:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004cb0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cb2:	fab3 f383 	clz	r3, r3
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004cbc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cc8:	f7fd fe70 	bl	80029ac <HAL_GetTick>
 8004ccc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004cd0:	e00c      	b.n	8004cec <HAL_RCC_OscConfig+0xc70>
 8004cd2:	bf00      	nop
 8004cd4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cd8:	f7fd fe68 	bl	80029ac <HAL_GetTick>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004ce2:	1ad3      	subs	r3, r2, r3
 8004ce4:	2b02      	cmp	r3, #2
 8004ce6:	d901      	bls.n	8004cec <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8004ce8:	2303      	movs	r3, #3
 8004cea:	e1fd      	b.n	80050e8 <HAL_RCC_OscConfig+0x106c>
 8004cec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cf0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004cf4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004cf8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cfe:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	fa93 f2a3 	rbit	r2, r3
 8004d08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d0c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004d10:	601a      	str	r2, [r3, #0]
  return result;
 8004d12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d16:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004d1a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d1c:	fab3 f383 	clz	r3, r3
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	095b      	lsrs	r3, r3, #5
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	f043 0301 	orr.w	r3, r3, #1
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d102      	bne.n	8004d36 <HAL_RCC_OscConfig+0xcba>
 8004d30:	4bb0      	ldr	r3, [pc, #704]	; (8004ff4 <HAL_RCC_OscConfig+0xf78>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	e027      	b.n	8004d86 <HAL_RCC_OscConfig+0xd0a>
 8004d36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d3a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004d3e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004d42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d48:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	fa93 f2a3 	rbit	r2, r3
 8004d52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d56:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004d5a:	601a      	str	r2, [r3, #0]
 8004d5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d60:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004d64:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004d68:	601a      	str	r2, [r3, #0]
 8004d6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d6e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	fa93 f2a3 	rbit	r2, r3
 8004d78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d7c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004d80:	601a      	str	r2, [r3, #0]
 8004d82:	4b9c      	ldr	r3, [pc, #624]	; (8004ff4 <HAL_RCC_OscConfig+0xf78>)
 8004d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d86:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004d8a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004d8e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004d92:	6011      	str	r1, [r2, #0]
 8004d94:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004d98:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004d9c:	6812      	ldr	r2, [r2, #0]
 8004d9e:	fa92 f1a2 	rbit	r1, r2
 8004da2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004da6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004daa:	6011      	str	r1, [r2, #0]
  return result;
 8004dac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004db0:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004db4:	6812      	ldr	r2, [r2, #0]
 8004db6:	fab2 f282 	clz	r2, r2
 8004dba:	b2d2      	uxtb	r2, r2
 8004dbc:	f042 0220 	orr.w	r2, r2, #32
 8004dc0:	b2d2      	uxtb	r2, r2
 8004dc2:	f002 021f 	and.w	r2, r2, #31
 8004dc6:	2101      	movs	r1, #1
 8004dc8:	fa01 f202 	lsl.w	r2, r1, r2
 8004dcc:	4013      	ands	r3, r2
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d182      	bne.n	8004cd8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004dd2:	4b88      	ldr	r3, [pc, #544]	; (8004ff4 <HAL_RCC_OscConfig+0xf78>)
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004dda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dde:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004de6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	6a1b      	ldr	r3, [r3, #32]
 8004df2:	430b      	orrs	r3, r1
 8004df4:	497f      	ldr	r1, [pc, #508]	; (8004ff4 <HAL_RCC_OscConfig+0xf78>)
 8004df6:	4313      	orrs	r3, r2
 8004df8:	604b      	str	r3, [r1, #4]
 8004dfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dfe:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004e02:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004e06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e0c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	fa93 f2a3 	rbit	r2, r3
 8004e16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e1a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004e1e:	601a      	str	r2, [r3, #0]
  return result;
 8004e20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e24:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004e28:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e2a:	fab3 f383 	clz	r3, r3
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004e34:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e40:	f7fd fdb4 	bl	80029ac <HAL_GetTick>
 8004e44:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e48:	e009      	b.n	8004e5e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e4a:	f7fd fdaf 	bl	80029ac <HAL_GetTick>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004e54:	1ad3      	subs	r3, r2, r3
 8004e56:	2b02      	cmp	r3, #2
 8004e58:	d901      	bls.n	8004e5e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8004e5a:	2303      	movs	r3, #3
 8004e5c:	e144      	b.n	80050e8 <HAL_RCC_OscConfig+0x106c>
 8004e5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e62:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004e66:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004e6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e70:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	fa93 f2a3 	rbit	r2, r3
 8004e7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e7e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004e82:	601a      	str	r2, [r3, #0]
  return result;
 8004e84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e88:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004e8c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e8e:	fab3 f383 	clz	r3, r3
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	095b      	lsrs	r3, r3, #5
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	f043 0301 	orr.w	r3, r3, #1
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d102      	bne.n	8004ea8 <HAL_RCC_OscConfig+0xe2c>
 8004ea2:	4b54      	ldr	r3, [pc, #336]	; (8004ff4 <HAL_RCC_OscConfig+0xf78>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	e027      	b.n	8004ef8 <HAL_RCC_OscConfig+0xe7c>
 8004ea8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004eac:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004eb0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004eb4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004eba:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	fa93 f2a3 	rbit	r2, r3
 8004ec4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ec8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004ecc:	601a      	str	r2, [r3, #0]
 8004ece:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ed2:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004ed6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004eda:	601a      	str	r2, [r3, #0]
 8004edc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ee0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	fa93 f2a3 	rbit	r2, r3
 8004eea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004eee:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004ef2:	601a      	str	r2, [r3, #0]
 8004ef4:	4b3f      	ldr	r3, [pc, #252]	; (8004ff4 <HAL_RCC_OscConfig+0xf78>)
 8004ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004efc:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004f00:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004f04:	6011      	str	r1, [r2, #0]
 8004f06:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f0a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004f0e:	6812      	ldr	r2, [r2, #0]
 8004f10:	fa92 f1a2 	rbit	r1, r2
 8004f14:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f18:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004f1c:	6011      	str	r1, [r2, #0]
  return result;
 8004f1e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f22:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004f26:	6812      	ldr	r2, [r2, #0]
 8004f28:	fab2 f282 	clz	r2, r2
 8004f2c:	b2d2      	uxtb	r2, r2
 8004f2e:	f042 0220 	orr.w	r2, r2, #32
 8004f32:	b2d2      	uxtb	r2, r2
 8004f34:	f002 021f 	and.w	r2, r2, #31
 8004f38:	2101      	movs	r1, #1
 8004f3a:	fa01 f202 	lsl.w	r2, r1, r2
 8004f3e:	4013      	ands	r3, r2
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d082      	beq.n	8004e4a <HAL_RCC_OscConfig+0xdce>
 8004f44:	e0cf      	b.n	80050e6 <HAL_RCC_OscConfig+0x106a>
 8004f46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f4a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004f4e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004f52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f58:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	fa93 f2a3 	rbit	r2, r3
 8004f62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f66:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004f6a:	601a      	str	r2, [r3, #0]
  return result;
 8004f6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f70:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004f74:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f76:	fab3 f383 	clz	r3, r3
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004f80:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	461a      	mov	r2, r3
 8004f88:	2300      	movs	r3, #0
 8004f8a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f8c:	f7fd fd0e 	bl	80029ac <HAL_GetTick>
 8004f90:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f94:	e009      	b.n	8004faa <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f96:	f7fd fd09 	bl	80029ac <HAL_GetTick>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	2b02      	cmp	r3, #2
 8004fa4:	d901      	bls.n	8004faa <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	e09e      	b.n	80050e8 <HAL_RCC_OscConfig+0x106c>
 8004faa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fae:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004fb2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004fb6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fbc:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	fa93 f2a3 	rbit	r2, r3
 8004fc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fca:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004fce:	601a      	str	r2, [r3, #0]
  return result;
 8004fd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fd4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004fd8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fda:	fab3 f383 	clz	r3, r3
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	095b      	lsrs	r3, r3, #5
 8004fe2:	b2db      	uxtb	r3, r3
 8004fe4:	f043 0301 	orr.w	r3, r3, #1
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d104      	bne.n	8004ff8 <HAL_RCC_OscConfig+0xf7c>
 8004fee:	4b01      	ldr	r3, [pc, #4]	; (8004ff4 <HAL_RCC_OscConfig+0xf78>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	e029      	b.n	8005048 <HAL_RCC_OscConfig+0xfcc>
 8004ff4:	40021000 	.word	0x40021000
 8004ff8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ffc:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005000:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005004:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005006:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800500a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	fa93 f2a3 	rbit	r2, r3
 8005014:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005018:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800501c:	601a      	str	r2, [r3, #0]
 800501e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005022:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8005026:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800502a:	601a      	str	r2, [r3, #0]
 800502c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005030:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	fa93 f2a3 	rbit	r2, r3
 800503a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800503e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8005042:	601a      	str	r2, [r3, #0]
 8005044:	4b2b      	ldr	r3, [pc, #172]	; (80050f4 <HAL_RCC_OscConfig+0x1078>)
 8005046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005048:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800504c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8005050:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005054:	6011      	str	r1, [r2, #0]
 8005056:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800505a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800505e:	6812      	ldr	r2, [r2, #0]
 8005060:	fa92 f1a2 	rbit	r1, r2
 8005064:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005068:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800506c:	6011      	str	r1, [r2, #0]
  return result;
 800506e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005072:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005076:	6812      	ldr	r2, [r2, #0]
 8005078:	fab2 f282 	clz	r2, r2
 800507c:	b2d2      	uxtb	r2, r2
 800507e:	f042 0220 	orr.w	r2, r2, #32
 8005082:	b2d2      	uxtb	r2, r2
 8005084:	f002 021f 	and.w	r2, r2, #31
 8005088:	2101      	movs	r1, #1
 800508a:	fa01 f202 	lsl.w	r2, r1, r2
 800508e:	4013      	ands	r3, r2
 8005090:	2b00      	cmp	r3, #0
 8005092:	d180      	bne.n	8004f96 <HAL_RCC_OscConfig+0xf1a>
 8005094:	e027      	b.n	80050e6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005096:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800509a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	69db      	ldr	r3, [r3, #28]
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d101      	bne.n	80050aa <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e01e      	b.n	80050e8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80050aa:	4b12      	ldr	r3, [pc, #72]	; (80050f4 <HAL_RCC_OscConfig+0x1078>)
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80050b2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80050b6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80050ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	6a1b      	ldr	r3, [r3, #32]
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d10b      	bne.n	80050e2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80050ca:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80050ce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80050d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80050de:	429a      	cmp	r2, r3
 80050e0:	d001      	beq.n	80050e6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e000      	b.n	80050e8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80050e6:	2300      	movs	r3, #0
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop
 80050f4:	40021000 	.word	0x40021000

080050f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b09e      	sub	sp, #120	; 0x78
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005102:	2300      	movs	r3, #0
 8005104:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d101      	bne.n	8005110 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	e162      	b.n	80053d6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005110:	4b90      	ldr	r3, [pc, #576]	; (8005354 <HAL_RCC_ClockConfig+0x25c>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 0307 	and.w	r3, r3, #7
 8005118:	683a      	ldr	r2, [r7, #0]
 800511a:	429a      	cmp	r2, r3
 800511c:	d910      	bls.n	8005140 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800511e:	4b8d      	ldr	r3, [pc, #564]	; (8005354 <HAL_RCC_ClockConfig+0x25c>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f023 0207 	bic.w	r2, r3, #7
 8005126:	498b      	ldr	r1, [pc, #556]	; (8005354 <HAL_RCC_ClockConfig+0x25c>)
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	4313      	orrs	r3, r2
 800512c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800512e:	4b89      	ldr	r3, [pc, #548]	; (8005354 <HAL_RCC_ClockConfig+0x25c>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f003 0307 	and.w	r3, r3, #7
 8005136:	683a      	ldr	r2, [r7, #0]
 8005138:	429a      	cmp	r2, r3
 800513a:	d001      	beq.n	8005140 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	e14a      	b.n	80053d6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 0302 	and.w	r3, r3, #2
 8005148:	2b00      	cmp	r3, #0
 800514a:	d008      	beq.n	800515e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800514c:	4b82      	ldr	r3, [pc, #520]	; (8005358 <HAL_RCC_ClockConfig+0x260>)
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	497f      	ldr	r1, [pc, #508]	; (8005358 <HAL_RCC_ClockConfig+0x260>)
 800515a:	4313      	orrs	r3, r2
 800515c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 0301 	and.w	r3, r3, #1
 8005166:	2b00      	cmp	r3, #0
 8005168:	f000 80dc 	beq.w	8005324 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	2b01      	cmp	r3, #1
 8005172:	d13c      	bne.n	80051ee <HAL_RCC_ClockConfig+0xf6>
 8005174:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005178:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800517a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800517c:	fa93 f3a3 	rbit	r3, r3
 8005180:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005182:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005184:	fab3 f383 	clz	r3, r3
 8005188:	b2db      	uxtb	r3, r3
 800518a:	095b      	lsrs	r3, r3, #5
 800518c:	b2db      	uxtb	r3, r3
 800518e:	f043 0301 	orr.w	r3, r3, #1
 8005192:	b2db      	uxtb	r3, r3
 8005194:	2b01      	cmp	r3, #1
 8005196:	d102      	bne.n	800519e <HAL_RCC_ClockConfig+0xa6>
 8005198:	4b6f      	ldr	r3, [pc, #444]	; (8005358 <HAL_RCC_ClockConfig+0x260>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	e00f      	b.n	80051be <HAL_RCC_ClockConfig+0xc6>
 800519e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80051a2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80051a6:	fa93 f3a3 	rbit	r3, r3
 80051aa:	667b      	str	r3, [r7, #100]	; 0x64
 80051ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80051b0:	663b      	str	r3, [r7, #96]	; 0x60
 80051b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80051b4:	fa93 f3a3 	rbit	r3, r3
 80051b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051ba:	4b67      	ldr	r3, [pc, #412]	; (8005358 <HAL_RCC_ClockConfig+0x260>)
 80051bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051be:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80051c2:	65ba      	str	r2, [r7, #88]	; 0x58
 80051c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80051c6:	fa92 f2a2 	rbit	r2, r2
 80051ca:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80051cc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80051ce:	fab2 f282 	clz	r2, r2
 80051d2:	b2d2      	uxtb	r2, r2
 80051d4:	f042 0220 	orr.w	r2, r2, #32
 80051d8:	b2d2      	uxtb	r2, r2
 80051da:	f002 021f 	and.w	r2, r2, #31
 80051de:	2101      	movs	r1, #1
 80051e0:	fa01 f202 	lsl.w	r2, r1, r2
 80051e4:	4013      	ands	r3, r2
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d17b      	bne.n	80052e2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e0f3      	b.n	80053d6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	2b02      	cmp	r3, #2
 80051f4:	d13c      	bne.n	8005270 <HAL_RCC_ClockConfig+0x178>
 80051f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80051fa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051fe:	fa93 f3a3 	rbit	r3, r3
 8005202:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005204:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005206:	fab3 f383 	clz	r3, r3
 800520a:	b2db      	uxtb	r3, r3
 800520c:	095b      	lsrs	r3, r3, #5
 800520e:	b2db      	uxtb	r3, r3
 8005210:	f043 0301 	orr.w	r3, r3, #1
 8005214:	b2db      	uxtb	r3, r3
 8005216:	2b01      	cmp	r3, #1
 8005218:	d102      	bne.n	8005220 <HAL_RCC_ClockConfig+0x128>
 800521a:	4b4f      	ldr	r3, [pc, #316]	; (8005358 <HAL_RCC_ClockConfig+0x260>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	e00f      	b.n	8005240 <HAL_RCC_ClockConfig+0x148>
 8005220:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005224:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005226:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005228:	fa93 f3a3 	rbit	r3, r3
 800522c:	647b      	str	r3, [r7, #68]	; 0x44
 800522e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005232:	643b      	str	r3, [r7, #64]	; 0x40
 8005234:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005236:	fa93 f3a3 	rbit	r3, r3
 800523a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800523c:	4b46      	ldr	r3, [pc, #280]	; (8005358 <HAL_RCC_ClockConfig+0x260>)
 800523e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005240:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005244:	63ba      	str	r2, [r7, #56]	; 0x38
 8005246:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005248:	fa92 f2a2 	rbit	r2, r2
 800524c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800524e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005250:	fab2 f282 	clz	r2, r2
 8005254:	b2d2      	uxtb	r2, r2
 8005256:	f042 0220 	orr.w	r2, r2, #32
 800525a:	b2d2      	uxtb	r2, r2
 800525c:	f002 021f 	and.w	r2, r2, #31
 8005260:	2101      	movs	r1, #1
 8005262:	fa01 f202 	lsl.w	r2, r1, r2
 8005266:	4013      	ands	r3, r2
 8005268:	2b00      	cmp	r3, #0
 800526a:	d13a      	bne.n	80052e2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	e0b2      	b.n	80053d6 <HAL_RCC_ClockConfig+0x2de>
 8005270:	2302      	movs	r3, #2
 8005272:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005276:	fa93 f3a3 	rbit	r3, r3
 800527a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800527c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800527e:	fab3 f383 	clz	r3, r3
 8005282:	b2db      	uxtb	r3, r3
 8005284:	095b      	lsrs	r3, r3, #5
 8005286:	b2db      	uxtb	r3, r3
 8005288:	f043 0301 	orr.w	r3, r3, #1
 800528c:	b2db      	uxtb	r3, r3
 800528e:	2b01      	cmp	r3, #1
 8005290:	d102      	bne.n	8005298 <HAL_RCC_ClockConfig+0x1a0>
 8005292:	4b31      	ldr	r3, [pc, #196]	; (8005358 <HAL_RCC_ClockConfig+0x260>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	e00d      	b.n	80052b4 <HAL_RCC_ClockConfig+0x1bc>
 8005298:	2302      	movs	r3, #2
 800529a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800529c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800529e:	fa93 f3a3 	rbit	r3, r3
 80052a2:	627b      	str	r3, [r7, #36]	; 0x24
 80052a4:	2302      	movs	r3, #2
 80052a6:	623b      	str	r3, [r7, #32]
 80052a8:	6a3b      	ldr	r3, [r7, #32]
 80052aa:	fa93 f3a3 	rbit	r3, r3
 80052ae:	61fb      	str	r3, [r7, #28]
 80052b0:	4b29      	ldr	r3, [pc, #164]	; (8005358 <HAL_RCC_ClockConfig+0x260>)
 80052b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b4:	2202      	movs	r2, #2
 80052b6:	61ba      	str	r2, [r7, #24]
 80052b8:	69ba      	ldr	r2, [r7, #24]
 80052ba:	fa92 f2a2 	rbit	r2, r2
 80052be:	617a      	str	r2, [r7, #20]
  return result;
 80052c0:	697a      	ldr	r2, [r7, #20]
 80052c2:	fab2 f282 	clz	r2, r2
 80052c6:	b2d2      	uxtb	r2, r2
 80052c8:	f042 0220 	orr.w	r2, r2, #32
 80052cc:	b2d2      	uxtb	r2, r2
 80052ce:	f002 021f 	and.w	r2, r2, #31
 80052d2:	2101      	movs	r1, #1
 80052d4:	fa01 f202 	lsl.w	r2, r1, r2
 80052d8:	4013      	ands	r3, r2
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d101      	bne.n	80052e2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e079      	b.n	80053d6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80052e2:	4b1d      	ldr	r3, [pc, #116]	; (8005358 <HAL_RCC_ClockConfig+0x260>)
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	f023 0203 	bic.w	r2, r3, #3
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	491a      	ldr	r1, [pc, #104]	; (8005358 <HAL_RCC_ClockConfig+0x260>)
 80052f0:	4313      	orrs	r3, r2
 80052f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80052f4:	f7fd fb5a 	bl	80029ac <HAL_GetTick>
 80052f8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052fa:	e00a      	b.n	8005312 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052fc:	f7fd fb56 	bl	80029ac <HAL_GetTick>
 8005300:	4602      	mov	r2, r0
 8005302:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005304:	1ad3      	subs	r3, r2, r3
 8005306:	f241 3288 	movw	r2, #5000	; 0x1388
 800530a:	4293      	cmp	r3, r2
 800530c:	d901      	bls.n	8005312 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800530e:	2303      	movs	r3, #3
 8005310:	e061      	b.n	80053d6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005312:	4b11      	ldr	r3, [pc, #68]	; (8005358 <HAL_RCC_ClockConfig+0x260>)
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	f003 020c 	and.w	r2, r3, #12
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	429a      	cmp	r2, r3
 8005322:	d1eb      	bne.n	80052fc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005324:	4b0b      	ldr	r3, [pc, #44]	; (8005354 <HAL_RCC_ClockConfig+0x25c>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 0307 	and.w	r3, r3, #7
 800532c:	683a      	ldr	r2, [r7, #0]
 800532e:	429a      	cmp	r2, r3
 8005330:	d214      	bcs.n	800535c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005332:	4b08      	ldr	r3, [pc, #32]	; (8005354 <HAL_RCC_ClockConfig+0x25c>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f023 0207 	bic.w	r2, r3, #7
 800533a:	4906      	ldr	r1, [pc, #24]	; (8005354 <HAL_RCC_ClockConfig+0x25c>)
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	4313      	orrs	r3, r2
 8005340:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005342:	4b04      	ldr	r3, [pc, #16]	; (8005354 <HAL_RCC_ClockConfig+0x25c>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 0307 	and.w	r3, r3, #7
 800534a:	683a      	ldr	r2, [r7, #0]
 800534c:	429a      	cmp	r2, r3
 800534e:	d005      	beq.n	800535c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	e040      	b.n	80053d6 <HAL_RCC_ClockConfig+0x2de>
 8005354:	40022000 	.word	0x40022000
 8005358:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f003 0304 	and.w	r3, r3, #4
 8005364:	2b00      	cmp	r3, #0
 8005366:	d008      	beq.n	800537a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005368:	4b1d      	ldr	r3, [pc, #116]	; (80053e0 <HAL_RCC_ClockConfig+0x2e8>)
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	491a      	ldr	r1, [pc, #104]	; (80053e0 <HAL_RCC_ClockConfig+0x2e8>)
 8005376:	4313      	orrs	r3, r2
 8005378:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 0308 	and.w	r3, r3, #8
 8005382:	2b00      	cmp	r3, #0
 8005384:	d009      	beq.n	800539a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005386:	4b16      	ldr	r3, [pc, #88]	; (80053e0 <HAL_RCC_ClockConfig+0x2e8>)
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	691b      	ldr	r3, [r3, #16]
 8005392:	00db      	lsls	r3, r3, #3
 8005394:	4912      	ldr	r1, [pc, #72]	; (80053e0 <HAL_RCC_ClockConfig+0x2e8>)
 8005396:	4313      	orrs	r3, r2
 8005398:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800539a:	f000 f829 	bl	80053f0 <HAL_RCC_GetSysClockFreq>
 800539e:	4601      	mov	r1, r0
 80053a0:	4b0f      	ldr	r3, [pc, #60]	; (80053e0 <HAL_RCC_ClockConfig+0x2e8>)
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80053a8:	22f0      	movs	r2, #240	; 0xf0
 80053aa:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053ac:	693a      	ldr	r2, [r7, #16]
 80053ae:	fa92 f2a2 	rbit	r2, r2
 80053b2:	60fa      	str	r2, [r7, #12]
  return result;
 80053b4:	68fa      	ldr	r2, [r7, #12]
 80053b6:	fab2 f282 	clz	r2, r2
 80053ba:	b2d2      	uxtb	r2, r2
 80053bc:	40d3      	lsrs	r3, r2
 80053be:	4a09      	ldr	r2, [pc, #36]	; (80053e4 <HAL_RCC_ClockConfig+0x2ec>)
 80053c0:	5cd3      	ldrb	r3, [r2, r3]
 80053c2:	fa21 f303 	lsr.w	r3, r1, r3
 80053c6:	4a08      	ldr	r2, [pc, #32]	; (80053e8 <HAL_RCC_ClockConfig+0x2f0>)
 80053c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80053ca:	4b08      	ldr	r3, [pc, #32]	; (80053ec <HAL_RCC_ClockConfig+0x2f4>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4618      	mov	r0, r3
 80053d0:	f7fd faa8 	bl	8002924 <HAL_InitTick>
  
  return HAL_OK;
 80053d4:	2300      	movs	r3, #0
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3778      	adds	r7, #120	; 0x78
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
 80053de:	bf00      	nop
 80053e0:	40021000 	.word	0x40021000
 80053e4:	08008fb4 	.word	0x08008fb4
 80053e8:	2000277c 	.word	0x2000277c
 80053ec:	20002780 	.word	0x20002780

080053f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b08b      	sub	sp, #44	; 0x2c
 80053f4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80053f6:	2300      	movs	r3, #0
 80053f8:	61fb      	str	r3, [r7, #28]
 80053fa:	2300      	movs	r3, #0
 80053fc:	61bb      	str	r3, [r7, #24]
 80053fe:	2300      	movs	r3, #0
 8005400:	627b      	str	r3, [r7, #36]	; 0x24
 8005402:	2300      	movs	r3, #0
 8005404:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005406:	2300      	movs	r3, #0
 8005408:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800540a:	4b29      	ldr	r3, [pc, #164]	; (80054b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005410:	69fb      	ldr	r3, [r7, #28]
 8005412:	f003 030c 	and.w	r3, r3, #12
 8005416:	2b04      	cmp	r3, #4
 8005418:	d002      	beq.n	8005420 <HAL_RCC_GetSysClockFreq+0x30>
 800541a:	2b08      	cmp	r3, #8
 800541c:	d003      	beq.n	8005426 <HAL_RCC_GetSysClockFreq+0x36>
 800541e:	e03c      	b.n	800549a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005420:	4b24      	ldr	r3, [pc, #144]	; (80054b4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005422:	623b      	str	r3, [r7, #32]
      break;
 8005424:	e03c      	b.n	80054a0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800542c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005430:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005432:	68ba      	ldr	r2, [r7, #8]
 8005434:	fa92 f2a2 	rbit	r2, r2
 8005438:	607a      	str	r2, [r7, #4]
  return result;
 800543a:	687a      	ldr	r2, [r7, #4]
 800543c:	fab2 f282 	clz	r2, r2
 8005440:	b2d2      	uxtb	r2, r2
 8005442:	40d3      	lsrs	r3, r2
 8005444:	4a1c      	ldr	r2, [pc, #112]	; (80054b8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005446:	5cd3      	ldrb	r3, [r2, r3]
 8005448:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800544a:	4b19      	ldr	r3, [pc, #100]	; (80054b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800544c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800544e:	f003 030f 	and.w	r3, r3, #15
 8005452:	220f      	movs	r2, #15
 8005454:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005456:	693a      	ldr	r2, [r7, #16]
 8005458:	fa92 f2a2 	rbit	r2, r2
 800545c:	60fa      	str	r2, [r7, #12]
  return result;
 800545e:	68fa      	ldr	r2, [r7, #12]
 8005460:	fab2 f282 	clz	r2, r2
 8005464:	b2d2      	uxtb	r2, r2
 8005466:	40d3      	lsrs	r3, r2
 8005468:	4a14      	ldr	r2, [pc, #80]	; (80054bc <HAL_RCC_GetSysClockFreq+0xcc>)
 800546a:	5cd3      	ldrb	r3, [r2, r3]
 800546c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005474:	2b00      	cmp	r3, #0
 8005476:	d008      	beq.n	800548a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005478:	4a0e      	ldr	r2, [pc, #56]	; (80054b4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800547a:	69bb      	ldr	r3, [r7, #24]
 800547c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	fb02 f303 	mul.w	r3, r2, r3
 8005486:	627b      	str	r3, [r7, #36]	; 0x24
 8005488:	e004      	b.n	8005494 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	4a0c      	ldr	r2, [pc, #48]	; (80054c0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800548e:	fb02 f303 	mul.w	r3, r2, r3
 8005492:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005496:	623b      	str	r3, [r7, #32]
      break;
 8005498:	e002      	b.n	80054a0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800549a:	4b06      	ldr	r3, [pc, #24]	; (80054b4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800549c:	623b      	str	r3, [r7, #32]
      break;
 800549e:	bf00      	nop
    }
  }
  return sysclockfreq;
 80054a0:	6a3b      	ldr	r3, [r7, #32]
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	372c      	adds	r7, #44	; 0x2c
 80054a6:	46bd      	mov	sp, r7
 80054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ac:	4770      	bx	lr
 80054ae:	bf00      	nop
 80054b0:	40021000 	.word	0x40021000
 80054b4:	007a1200 	.word	0x007a1200
 80054b8:	08008fcc 	.word	0x08008fcc
 80054bc:	08008fdc 	.word	0x08008fdc
 80054c0:	003d0900 	.word	0x003d0900

080054c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054c4:	b480      	push	{r7}
 80054c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054c8:	4b03      	ldr	r3, [pc, #12]	; (80054d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80054ca:	681b      	ldr	r3, [r3, #0]
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr
 80054d6:	bf00      	nop
 80054d8:	2000277c 	.word	0x2000277c

080054dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b082      	sub	sp, #8
 80054e0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80054e2:	f7ff ffef 	bl	80054c4 <HAL_RCC_GetHCLKFreq>
 80054e6:	4601      	mov	r1, r0
 80054e8:	4b0b      	ldr	r3, [pc, #44]	; (8005518 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80054f0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80054f4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	fa92 f2a2 	rbit	r2, r2
 80054fc:	603a      	str	r2, [r7, #0]
  return result;
 80054fe:	683a      	ldr	r2, [r7, #0]
 8005500:	fab2 f282 	clz	r2, r2
 8005504:	b2d2      	uxtb	r2, r2
 8005506:	40d3      	lsrs	r3, r2
 8005508:	4a04      	ldr	r2, [pc, #16]	; (800551c <HAL_RCC_GetPCLK1Freq+0x40>)
 800550a:	5cd3      	ldrb	r3, [r2, r3]
 800550c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005510:	4618      	mov	r0, r3
 8005512:	3708      	adds	r7, #8
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}
 8005518:	40021000 	.word	0x40021000
 800551c:	08008fc4 	.word	0x08008fc4

08005520 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b082      	sub	sp, #8
 8005524:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005526:	f7ff ffcd 	bl	80054c4 <HAL_RCC_GetHCLKFreq>
 800552a:	4601      	mov	r1, r0
 800552c:	4b0b      	ldr	r3, [pc, #44]	; (800555c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005534:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005538:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	fa92 f2a2 	rbit	r2, r2
 8005540:	603a      	str	r2, [r7, #0]
  return result;
 8005542:	683a      	ldr	r2, [r7, #0]
 8005544:	fab2 f282 	clz	r2, r2
 8005548:	b2d2      	uxtb	r2, r2
 800554a:	40d3      	lsrs	r3, r2
 800554c:	4a04      	ldr	r2, [pc, #16]	; (8005560 <HAL_RCC_GetPCLK2Freq+0x40>)
 800554e:	5cd3      	ldrb	r3, [r2, r3]
 8005550:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005554:	4618      	mov	r0, r3
 8005556:	3708      	adds	r7, #8
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}
 800555c:	40021000 	.word	0x40021000
 8005560:	08008fc4 	.word	0x08008fc4

08005564 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b092      	sub	sp, #72	; 0x48
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800556c:	2300      	movs	r3, #0
 800556e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005570:	2300      	movs	r3, #0
 8005572:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005574:	2300      	movs	r3, #0
 8005576:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005582:	2b00      	cmp	r3, #0
 8005584:	f000 80d4 	beq.w	8005730 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005588:	4b4e      	ldr	r3, [pc, #312]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800558a:	69db      	ldr	r3, [r3, #28]
 800558c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005590:	2b00      	cmp	r3, #0
 8005592:	d10e      	bne.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005594:	4b4b      	ldr	r3, [pc, #300]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005596:	69db      	ldr	r3, [r3, #28]
 8005598:	4a4a      	ldr	r2, [pc, #296]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800559a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800559e:	61d3      	str	r3, [r2, #28]
 80055a0:	4b48      	ldr	r3, [pc, #288]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055a2:	69db      	ldr	r3, [r3, #28]
 80055a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055a8:	60bb      	str	r3, [r7, #8]
 80055aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055ac:	2301      	movs	r3, #1
 80055ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055b2:	4b45      	ldr	r3, [pc, #276]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d118      	bne.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055be:	4b42      	ldr	r3, [pc, #264]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a41      	ldr	r2, [pc, #260]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80055c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055c8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055ca:	f7fd f9ef 	bl	80029ac <HAL_GetTick>
 80055ce:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055d0:	e008      	b.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055d2:	f7fd f9eb 	bl	80029ac <HAL_GetTick>
 80055d6:	4602      	mov	r2, r0
 80055d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055da:	1ad3      	subs	r3, r2, r3
 80055dc:	2b64      	cmp	r3, #100	; 0x64
 80055de:	d901      	bls.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80055e0:	2303      	movs	r3, #3
 80055e2:	e13c      	b.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055e4:	4b38      	ldr	r3, [pc, #224]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d0f0      	beq.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80055f0:	4b34      	ldr	r3, [pc, #208]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055f2:	6a1b      	ldr	r3, [r3, #32]
 80055f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055f8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80055fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	f000 8084 	beq.w	800570a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800560a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800560c:	429a      	cmp	r2, r3
 800560e:	d07c      	beq.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005610:	4b2c      	ldr	r3, [pc, #176]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005612:	6a1b      	ldr	r3, [r3, #32]
 8005614:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005618:	63fb      	str	r3, [r7, #60]	; 0x3c
 800561a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800561e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005622:	fa93 f3a3 	rbit	r3, r3
 8005626:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800562a:	fab3 f383 	clz	r3, r3
 800562e:	b2db      	uxtb	r3, r3
 8005630:	461a      	mov	r2, r3
 8005632:	4b26      	ldr	r3, [pc, #152]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005634:	4413      	add	r3, r2
 8005636:	009b      	lsls	r3, r3, #2
 8005638:	461a      	mov	r2, r3
 800563a:	2301      	movs	r3, #1
 800563c:	6013      	str	r3, [r2, #0]
 800563e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005642:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005646:	fa93 f3a3 	rbit	r3, r3
 800564a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800564c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800564e:	fab3 f383 	clz	r3, r3
 8005652:	b2db      	uxtb	r3, r3
 8005654:	461a      	mov	r2, r3
 8005656:	4b1d      	ldr	r3, [pc, #116]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005658:	4413      	add	r3, r2
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	461a      	mov	r2, r3
 800565e:	2300      	movs	r3, #0
 8005660:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005662:	4a18      	ldr	r2, [pc, #96]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005664:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005666:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800566a:	f003 0301 	and.w	r3, r3, #1
 800566e:	2b00      	cmp	r3, #0
 8005670:	d04b      	beq.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005672:	f7fd f99b 	bl	80029ac <HAL_GetTick>
 8005676:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005678:	e00a      	b.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800567a:	f7fd f997 	bl	80029ac <HAL_GetTick>
 800567e:	4602      	mov	r2, r0
 8005680:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005682:	1ad3      	subs	r3, r2, r3
 8005684:	f241 3288 	movw	r2, #5000	; 0x1388
 8005688:	4293      	cmp	r3, r2
 800568a:	d901      	bls.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800568c:	2303      	movs	r3, #3
 800568e:	e0e6      	b.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 8005690:	2302      	movs	r3, #2
 8005692:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005696:	fa93 f3a3 	rbit	r3, r3
 800569a:	627b      	str	r3, [r7, #36]	; 0x24
 800569c:	2302      	movs	r3, #2
 800569e:	623b      	str	r3, [r7, #32]
 80056a0:	6a3b      	ldr	r3, [r7, #32]
 80056a2:	fa93 f3a3 	rbit	r3, r3
 80056a6:	61fb      	str	r3, [r7, #28]
  return result;
 80056a8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056aa:	fab3 f383 	clz	r3, r3
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	095b      	lsrs	r3, r3, #5
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	f043 0302 	orr.w	r3, r3, #2
 80056b8:	b2db      	uxtb	r3, r3
 80056ba:	2b02      	cmp	r3, #2
 80056bc:	d108      	bne.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80056be:	4b01      	ldr	r3, [pc, #4]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056c0:	6a1b      	ldr	r3, [r3, #32]
 80056c2:	e00d      	b.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80056c4:	40021000 	.word	0x40021000
 80056c8:	40007000 	.word	0x40007000
 80056cc:	10908100 	.word	0x10908100
 80056d0:	2302      	movs	r3, #2
 80056d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056d4:	69bb      	ldr	r3, [r7, #24]
 80056d6:	fa93 f3a3 	rbit	r3, r3
 80056da:	617b      	str	r3, [r7, #20]
 80056dc:	4b62      	ldr	r3, [pc, #392]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80056de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e0:	2202      	movs	r2, #2
 80056e2:	613a      	str	r2, [r7, #16]
 80056e4:	693a      	ldr	r2, [r7, #16]
 80056e6:	fa92 f2a2 	rbit	r2, r2
 80056ea:	60fa      	str	r2, [r7, #12]
  return result;
 80056ec:	68fa      	ldr	r2, [r7, #12]
 80056ee:	fab2 f282 	clz	r2, r2
 80056f2:	b2d2      	uxtb	r2, r2
 80056f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056f8:	b2d2      	uxtb	r2, r2
 80056fa:	f002 021f 	and.w	r2, r2, #31
 80056fe:	2101      	movs	r1, #1
 8005700:	fa01 f202 	lsl.w	r2, r1, r2
 8005704:	4013      	ands	r3, r2
 8005706:	2b00      	cmp	r3, #0
 8005708:	d0b7      	beq.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800570a:	4b57      	ldr	r3, [pc, #348]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800570c:	6a1b      	ldr	r3, [r3, #32]
 800570e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	4954      	ldr	r1, [pc, #336]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005718:	4313      	orrs	r3, r2
 800571a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800571c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005720:	2b01      	cmp	r3, #1
 8005722:	d105      	bne.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005724:	4b50      	ldr	r3, [pc, #320]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005726:	69db      	ldr	r3, [r3, #28]
 8005728:	4a4f      	ldr	r2, [pc, #316]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800572a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800572e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f003 0301 	and.w	r3, r3, #1
 8005738:	2b00      	cmp	r3, #0
 800573a:	d008      	beq.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800573c:	4b4a      	ldr	r3, [pc, #296]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800573e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005740:	f023 0203 	bic.w	r2, r3, #3
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	4947      	ldr	r1, [pc, #284]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800574a:	4313      	orrs	r3, r2
 800574c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f003 0320 	and.w	r3, r3, #32
 8005756:	2b00      	cmp	r3, #0
 8005758:	d008      	beq.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800575a:	4b43      	ldr	r3, [pc, #268]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800575c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800575e:	f023 0210 	bic.w	r2, r3, #16
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	4940      	ldr	r1, [pc, #256]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005768:	4313      	orrs	r3, r2
 800576a:	630b      	str	r3, [r1, #48]	; 0x30
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005774:	2b00      	cmp	r3, #0
 8005776:	d008      	beq.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005778:	4b3b      	ldr	r3, [pc, #236]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800577a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800577c:	f023 0220 	bic.w	r2, r3, #32
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	691b      	ldr	r3, [r3, #16]
 8005784:	4938      	ldr	r1, [pc, #224]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005786:	4313      	orrs	r3, r2
 8005788:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005792:	2b00      	cmp	r3, #0
 8005794:	d008      	beq.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005796:	4b34      	ldr	r3, [pc, #208]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800579a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	695b      	ldr	r3, [r3, #20]
 80057a2:	4931      	ldr	r1, [pc, #196]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80057a4:	4313      	orrs	r3, r2
 80057a6:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d008      	beq.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80057b4:	4b2c      	ldr	r3, [pc, #176]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	69db      	ldr	r3, [r3, #28]
 80057c0:	4929      	ldr	r1, [pc, #164]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80057c2:	4313      	orrs	r3, r2
 80057c4:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d008      	beq.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 80057d2:	4b25      	ldr	r3, [pc, #148]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80057d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d6:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	699b      	ldr	r3, [r3, #24]
 80057de:	4922      	ldr	r1, [pc, #136]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80057e0:	4313      	orrs	r3, r2
 80057e2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d008      	beq.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80057f0:	4b1d      	ldr	r3, [pc, #116]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80057f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057f4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6a1b      	ldr	r3, [r3, #32]
 80057fc:	491a      	ldr	r1, [pc, #104]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80057fe:	4313      	orrs	r3, r2
 8005800:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800580a:	2b00      	cmp	r3, #0
 800580c:	d008      	beq.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800580e:	4b16      	ldr	r3, [pc, #88]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005812:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581a:	4913      	ldr	r1, [pc, #76]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800581c:	4313      	orrs	r3, r2
 800581e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005828:	2b00      	cmp	r3, #0
 800582a:	d008      	beq.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800582c:	4b0e      	ldr	r3, [pc, #56]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800582e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005830:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005838:	490b      	ldr	r1, [pc, #44]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800583a:	4313      	orrs	r3, r2
 800583c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005846:	2b00      	cmp	r3, #0
 8005848:	d008      	beq.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800584a:	4b07      	ldr	r3, [pc, #28]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800584c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800584e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005856:	4904      	ldr	r1, [pc, #16]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005858:	4313      	orrs	r3, r2
 800585a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800585c:	2300      	movs	r3, #0
}
 800585e:	4618      	mov	r0, r3
 8005860:	3748      	adds	r7, #72	; 0x48
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}
 8005866:	bf00      	nop
 8005868:	40021000 	.word	0x40021000

0800586c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b084      	sub	sp, #16
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d101      	bne.n	800587e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	e09d      	b.n	80059ba <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005882:	2b00      	cmp	r3, #0
 8005884:	d108      	bne.n	8005898 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800588e:	d009      	beq.n	80058a4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2200      	movs	r2, #0
 8005894:	61da      	str	r2, [r3, #28]
 8005896:	e005      	b.n	80058a4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2200      	movs	r2, #0
 800589c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d106      	bne.n	80058c4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f7fc fdcc 	bl	800245c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2202      	movs	r2, #2
 80058c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058da:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80058e4:	d902      	bls.n	80058ec <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80058e6:	2300      	movs	r3, #0
 80058e8:	60fb      	str	r3, [r7, #12]
 80058ea:	e002      	b.n	80058f2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80058ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80058f0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	68db      	ldr	r3, [r3, #12]
 80058f6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80058fa:	d007      	beq.n	800590c <HAL_SPI_Init+0xa0>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005904:	d002      	beq.n	800590c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2200      	movs	r2, #0
 800590a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800591c:	431a      	orrs	r2, r3
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	691b      	ldr	r3, [r3, #16]
 8005922:	f003 0302 	and.w	r3, r3, #2
 8005926:	431a      	orrs	r2, r3
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	695b      	ldr	r3, [r3, #20]
 800592c:	f003 0301 	and.w	r3, r3, #1
 8005930:	431a      	orrs	r2, r3
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	699b      	ldr	r3, [r3, #24]
 8005936:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800593a:	431a      	orrs	r2, r3
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	69db      	ldr	r3, [r3, #28]
 8005940:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005944:	431a      	orrs	r2, r3
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6a1b      	ldr	r3, [r3, #32]
 800594a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800594e:	ea42 0103 	orr.w	r1, r2, r3
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005956:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	430a      	orrs	r2, r1
 8005960:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	699b      	ldr	r3, [r3, #24]
 8005966:	0c1b      	lsrs	r3, r3, #16
 8005968:	f003 0204 	and.w	r2, r3, #4
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005970:	f003 0310 	and.w	r3, r3, #16
 8005974:	431a      	orrs	r2, r3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800597a:	f003 0308 	and.w	r3, r3, #8
 800597e:	431a      	orrs	r2, r3
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005988:	ea42 0103 	orr.w	r1, r2, r3
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	430a      	orrs	r2, r1
 8005998:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	69da      	ldr	r2, [r3, #28]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059a8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2200      	movs	r2, #0
 80059ae:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80059b8:	2300      	movs	r3, #0
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3710      	adds	r7, #16
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}

080059c2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059c2:	b580      	push	{r7, lr}
 80059c4:	b088      	sub	sp, #32
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	60f8      	str	r0, [r7, #12]
 80059ca:	60b9      	str	r1, [r7, #8]
 80059cc:	603b      	str	r3, [r7, #0]
 80059ce:	4613      	mov	r3, r2
 80059d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80059d2:	2300      	movs	r3, #0
 80059d4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d101      	bne.n	80059e4 <HAL_SPI_Transmit+0x22>
 80059e0:	2302      	movs	r3, #2
 80059e2:	e15f      	b.n	8005ca4 <HAL_SPI_Transmit+0x2e2>
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2201      	movs	r2, #1
 80059e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80059ec:	f7fc ffde 	bl	80029ac <HAL_GetTick>
 80059f0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80059f2:	88fb      	ldrh	r3, [r7, #6]
 80059f4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d002      	beq.n	8005a08 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005a02:	2302      	movs	r3, #2
 8005a04:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005a06:	e148      	b.n	8005c9a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d002      	beq.n	8005a14 <HAL_SPI_Transmit+0x52>
 8005a0e:	88fb      	ldrh	r3, [r7, #6]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d102      	bne.n	8005a1a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005a18:	e13f      	b.n	8005c9a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2203      	movs	r2, #3
 8005a1e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2200      	movs	r2, #0
 8005a26:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	68ba      	ldr	r2, [r7, #8]
 8005a2c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	88fa      	ldrh	r2, [r7, #6]
 8005a32:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	88fa      	ldrh	r2, [r7, #6]
 8005a38:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2200      	movs	r2, #0
 8005a44:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2200      	movs	r2, #0
 8005a54:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a64:	d10f      	bne.n	8005a86 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a74:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a84:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a90:	2b40      	cmp	r3, #64	; 0x40
 8005a92:	d007      	beq.n	8005aa4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005aa2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005aac:	d94f      	bls.n	8005b4e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d002      	beq.n	8005abc <HAL_SPI_Transmit+0xfa>
 8005ab6:	8afb      	ldrh	r3, [r7, #22]
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d142      	bne.n	8005b42 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac0:	881a      	ldrh	r2, [r3, #0]
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005acc:	1c9a      	adds	r2, r3, #2
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	3b01      	subs	r3, #1
 8005ada:	b29a      	uxth	r2, r3
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005ae0:	e02f      	b.n	8005b42 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	f003 0302 	and.w	r3, r3, #2
 8005aec:	2b02      	cmp	r3, #2
 8005aee:	d112      	bne.n	8005b16 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af4:	881a      	ldrh	r2, [r3, #0]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b00:	1c9a      	adds	r2, r3, #2
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	3b01      	subs	r3, #1
 8005b0e:	b29a      	uxth	r2, r3
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005b14:	e015      	b.n	8005b42 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b16:	f7fc ff49 	bl	80029ac <HAL_GetTick>
 8005b1a:	4602      	mov	r2, r0
 8005b1c:	69bb      	ldr	r3, [r7, #24]
 8005b1e:	1ad3      	subs	r3, r2, r3
 8005b20:	683a      	ldr	r2, [r7, #0]
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d803      	bhi.n	8005b2e <HAL_SPI_Transmit+0x16c>
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b2c:	d102      	bne.n	8005b34 <HAL_SPI_Transmit+0x172>
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d106      	bne.n	8005b42 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8005b34:	2303      	movs	r3, #3
 8005b36:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8005b40:	e0ab      	b.n	8005c9a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d1ca      	bne.n	8005ae2 <HAL_SPI_Transmit+0x120>
 8005b4c:	e080      	b.n	8005c50 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d002      	beq.n	8005b5c <HAL_SPI_Transmit+0x19a>
 8005b56:	8afb      	ldrh	r3, [r7, #22]
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d174      	bne.n	8005c46 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d912      	bls.n	8005b8c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b6a:	881a      	ldrh	r2, [r3, #0]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b76:	1c9a      	adds	r2, r3, #2
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	3b02      	subs	r3, #2
 8005b84:	b29a      	uxth	r2, r3
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005b8a:	e05c      	b.n	8005c46 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	330c      	adds	r3, #12
 8005b96:	7812      	ldrb	r2, [r2, #0]
 8005b98:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b9e:	1c5a      	adds	r2, r3, #1
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ba8:	b29b      	uxth	r3, r3
 8005baa:	3b01      	subs	r3, #1
 8005bac:	b29a      	uxth	r2, r3
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005bb2:	e048      	b.n	8005c46 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	f003 0302 	and.w	r3, r3, #2
 8005bbe:	2b02      	cmp	r3, #2
 8005bc0:	d12b      	bne.n	8005c1a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d912      	bls.n	8005bf2 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bd0:	881a      	ldrh	r2, [r3, #0]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bdc:	1c9a      	adds	r2, r3, #2
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	3b02      	subs	r3, #2
 8005bea:	b29a      	uxth	r2, r3
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005bf0:	e029      	b.n	8005c46 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	330c      	adds	r3, #12
 8005bfc:	7812      	ldrb	r2, [r2, #0]
 8005bfe:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c04:	1c5a      	adds	r2, r3, #1
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	3b01      	subs	r3, #1
 8005c12:	b29a      	uxth	r2, r3
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005c18:	e015      	b.n	8005c46 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c1a:	f7fc fec7 	bl	80029ac <HAL_GetTick>
 8005c1e:	4602      	mov	r2, r0
 8005c20:	69bb      	ldr	r3, [r7, #24]
 8005c22:	1ad3      	subs	r3, r2, r3
 8005c24:	683a      	ldr	r2, [r7, #0]
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d803      	bhi.n	8005c32 <HAL_SPI_Transmit+0x270>
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c30:	d102      	bne.n	8005c38 <HAL_SPI_Transmit+0x276>
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d106      	bne.n	8005c46 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8005c38:	2303      	movs	r3, #3
 8005c3a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8005c44:	e029      	b.n	8005c9a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c4a:	b29b      	uxth	r3, r3
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d1b1      	bne.n	8005bb4 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005c50:	69ba      	ldr	r2, [r7, #24]
 8005c52:	6839      	ldr	r1, [r7, #0]
 8005c54:	68f8      	ldr	r0, [r7, #12]
 8005c56:	f000 f947 	bl	8005ee8 <SPI_EndRxTxTransaction>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d002      	beq.n	8005c66 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2220      	movs	r2, #32
 8005c64:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d10a      	bne.n	8005c84 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c6e:	2300      	movs	r3, #0
 8005c70:	613b      	str	r3, [r7, #16]
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	68db      	ldr	r3, [r3, #12]
 8005c78:	613b      	str	r3, [r7, #16]
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	613b      	str	r3, [r7, #16]
 8005c82:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d002      	beq.n	8005c92 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	77fb      	strb	r3, [r7, #31]
 8005c90:	e003      	b.n	8005c9a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2201      	movs	r2, #1
 8005c96:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005ca2:	7ffb      	ldrb	r3, [r7, #31]
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3720      	adds	r7, #32
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}

08005cac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b088      	sub	sp, #32
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	60f8      	str	r0, [r7, #12]
 8005cb4:	60b9      	str	r1, [r7, #8]
 8005cb6:	603b      	str	r3, [r7, #0]
 8005cb8:	4613      	mov	r3, r2
 8005cba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005cbc:	f7fc fe76 	bl	80029ac <HAL_GetTick>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc4:	1a9b      	subs	r3, r3, r2
 8005cc6:	683a      	ldr	r2, [r7, #0]
 8005cc8:	4413      	add	r3, r2
 8005cca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005ccc:	f7fc fe6e 	bl	80029ac <HAL_GetTick>
 8005cd0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005cd2:	4b39      	ldr	r3, [pc, #228]	; (8005db8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	015b      	lsls	r3, r3, #5
 8005cd8:	0d1b      	lsrs	r3, r3, #20
 8005cda:	69fa      	ldr	r2, [r7, #28]
 8005cdc:	fb02 f303 	mul.w	r3, r2, r3
 8005ce0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ce2:	e054      	b.n	8005d8e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cea:	d050      	beq.n	8005d8e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005cec:	f7fc fe5e 	bl	80029ac <HAL_GetTick>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	69bb      	ldr	r3, [r7, #24]
 8005cf4:	1ad3      	subs	r3, r2, r3
 8005cf6:	69fa      	ldr	r2, [r7, #28]
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d902      	bls.n	8005d02 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005cfc:	69fb      	ldr	r3, [r7, #28]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d13d      	bne.n	8005d7e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	685a      	ldr	r2, [r3, #4]
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005d10:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d1a:	d111      	bne.n	8005d40 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d24:	d004      	beq.n	8005d30 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d2e:	d107      	bne.n	8005d40 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d3e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d48:	d10f      	bne.n	8005d6a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d58:	601a      	str	r2, [r3, #0]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d68:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2200      	movs	r2, #0
 8005d76:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005d7a:	2303      	movs	r3, #3
 8005d7c:	e017      	b.n	8005dae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d101      	bne.n	8005d88 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005d84:	2300      	movs	r3, #0
 8005d86:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	3b01      	subs	r3, #1
 8005d8c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	689a      	ldr	r2, [r3, #8]
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	4013      	ands	r3, r2
 8005d98:	68ba      	ldr	r2, [r7, #8]
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	bf0c      	ite	eq
 8005d9e:	2301      	moveq	r3, #1
 8005da0:	2300      	movne	r3, #0
 8005da2:	b2db      	uxtb	r3, r3
 8005da4:	461a      	mov	r2, r3
 8005da6:	79fb      	ldrb	r3, [r7, #7]
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d19b      	bne.n	8005ce4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005dac:	2300      	movs	r3, #0
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3720      	adds	r7, #32
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}
 8005db6:	bf00      	nop
 8005db8:	2000277c 	.word	0x2000277c

08005dbc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b08a      	sub	sp, #40	; 0x28
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	60f8      	str	r0, [r7, #12]
 8005dc4:	60b9      	str	r1, [r7, #8]
 8005dc6:	607a      	str	r2, [r7, #4]
 8005dc8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005dce:	f7fc fded 	bl	80029ac <HAL_GetTick>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd6:	1a9b      	subs	r3, r3, r2
 8005dd8:	683a      	ldr	r2, [r7, #0]
 8005dda:	4413      	add	r3, r2
 8005ddc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005dde:	f7fc fde5 	bl	80029ac <HAL_GetTick>
 8005de2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	330c      	adds	r3, #12
 8005dea:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005dec:	4b3d      	ldr	r3, [pc, #244]	; (8005ee4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	4613      	mov	r3, r2
 8005df2:	009b      	lsls	r3, r3, #2
 8005df4:	4413      	add	r3, r2
 8005df6:	00da      	lsls	r2, r3, #3
 8005df8:	1ad3      	subs	r3, r2, r3
 8005dfa:	0d1b      	lsrs	r3, r3, #20
 8005dfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dfe:	fb02 f303 	mul.w	r3, r2, r3
 8005e02:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005e04:	e060      	b.n	8005ec8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005e0c:	d107      	bne.n	8005e1e <SPI_WaitFifoStateUntilTimeout+0x62>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d104      	bne.n	8005e1e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005e14:	69fb      	ldr	r3, [r7, #28]
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005e1c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e24:	d050      	beq.n	8005ec8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005e26:	f7fc fdc1 	bl	80029ac <HAL_GetTick>
 8005e2a:	4602      	mov	r2, r0
 8005e2c:	6a3b      	ldr	r3, [r7, #32]
 8005e2e:	1ad3      	subs	r3, r2, r3
 8005e30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e32:	429a      	cmp	r2, r3
 8005e34:	d902      	bls.n	8005e3c <SPI_WaitFifoStateUntilTimeout+0x80>
 8005e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d13d      	bne.n	8005eb8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	685a      	ldr	r2, [r3, #4]
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005e4a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e54:	d111      	bne.n	8005e7a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e5e:	d004      	beq.n	8005e6a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e68:	d107      	bne.n	8005e7a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e78:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e82:	d10f      	bne.n	8005ea4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e92:	601a      	str	r2, [r3, #0]
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ea2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005eb4:	2303      	movs	r3, #3
 8005eb6:	e010      	b.n	8005eda <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005eb8:	69bb      	ldr	r3, [r7, #24]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d101      	bne.n	8005ec2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005ec2:	69bb      	ldr	r3, [r7, #24]
 8005ec4:	3b01      	subs	r3, #1
 8005ec6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	689a      	ldr	r2, [r3, #8]
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	4013      	ands	r3, r2
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d196      	bne.n	8005e06 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005ed8:	2300      	movs	r3, #0
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3728      	adds	r7, #40	; 0x28
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}
 8005ee2:	bf00      	nop
 8005ee4:	2000277c 	.word	0x2000277c

08005ee8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b086      	sub	sp, #24
 8005eec:	af02      	add	r7, sp, #8
 8005eee:	60f8      	str	r0, [r7, #12]
 8005ef0:	60b9      	str	r1, [r7, #8]
 8005ef2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	9300      	str	r3, [sp, #0]
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	2200      	movs	r2, #0
 8005efc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005f00:	68f8      	ldr	r0, [r7, #12]
 8005f02:	f7ff ff5b 	bl	8005dbc <SPI_WaitFifoStateUntilTimeout>
 8005f06:	4603      	mov	r3, r0
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d007      	beq.n	8005f1c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f10:	f043 0220 	orr.w	r2, r3, #32
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005f18:	2303      	movs	r3, #3
 8005f1a:	e027      	b.n	8005f6c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	9300      	str	r3, [sp, #0]
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	2200      	movs	r2, #0
 8005f24:	2180      	movs	r1, #128	; 0x80
 8005f26:	68f8      	ldr	r0, [r7, #12]
 8005f28:	f7ff fec0 	bl	8005cac <SPI_WaitFlagStateUntilTimeout>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d007      	beq.n	8005f42 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f36:	f043 0220 	orr.w	r2, r3, #32
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005f3e:	2303      	movs	r3, #3
 8005f40:	e014      	b.n	8005f6c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	9300      	str	r3, [sp, #0]
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005f4e:	68f8      	ldr	r0, [r7, #12]
 8005f50:	f7ff ff34 	bl	8005dbc <SPI_WaitFifoStateUntilTimeout>
 8005f54:	4603      	mov	r3, r0
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d007      	beq.n	8005f6a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f5e:	f043 0220 	orr.w	r2, r3, #32
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005f66:	2303      	movs	r3, #3
 8005f68:	e000      	b.n	8005f6c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005f6a:	2300      	movs	r3, #0
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3710      	adds	r7, #16
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}

08005f74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b082      	sub	sp, #8
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d101      	bne.n	8005f86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	e049      	b.n	800601a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d106      	bne.n	8005fa0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2200      	movs	r2, #0
 8005f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f7fc fae0 	bl	8002560 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2202      	movs	r2, #2
 8005fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	3304      	adds	r3, #4
 8005fb0:	4619      	mov	r1, r3
 8005fb2:	4610      	mov	r0, r2
 8005fb4:	f000 fc52 	bl	800685c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2201      	movs	r2, #1
 8005fec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2201      	movs	r2, #1
 8006004:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2201      	movs	r2, #1
 800600c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2201      	movs	r2, #1
 8006014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006018:	2300      	movs	r3, #0
}
 800601a:	4618      	mov	r0, r3
 800601c:	3708      	adds	r7, #8
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}
	...

08006024 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006024:	b480      	push	{r7}
 8006026:	b085      	sub	sp, #20
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006032:	b2db      	uxtb	r3, r3
 8006034:	2b01      	cmp	r3, #1
 8006036:	d001      	beq.n	800603c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006038:	2301      	movs	r3, #1
 800603a:	e033      	b.n	80060a4 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2202      	movs	r2, #2
 8006040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a19      	ldr	r2, [pc, #100]	; (80060b0 <HAL_TIM_Base_Start+0x8c>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d009      	beq.n	8006062 <HAL_TIM_Base_Start+0x3e>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006056:	d004      	beq.n	8006062 <HAL_TIM_Base_Start+0x3e>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a15      	ldr	r2, [pc, #84]	; (80060b4 <HAL_TIM_Base_Start+0x90>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d115      	bne.n	800608e <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	689a      	ldr	r2, [r3, #8]
 8006068:	4b13      	ldr	r3, [pc, #76]	; (80060b8 <HAL_TIM_Base_Start+0x94>)
 800606a:	4013      	ands	r3, r2
 800606c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2b06      	cmp	r3, #6
 8006072:	d015      	beq.n	80060a0 <HAL_TIM_Base_Start+0x7c>
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800607a:	d011      	beq.n	80060a0 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f042 0201 	orr.w	r2, r2, #1
 800608a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800608c:	e008      	b.n	80060a0 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f042 0201 	orr.w	r2, r2, #1
 800609c:	601a      	str	r2, [r3, #0]
 800609e:	e000      	b.n	80060a2 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060a0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80060a2:	2300      	movs	r3, #0
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3714      	adds	r7, #20
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr
 80060b0:	40012c00 	.word	0x40012c00
 80060b4:	40014000 	.word	0x40014000
 80060b8:	00010007 	.word	0x00010007

080060bc <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80060bc:	b480      	push	{r7}
 80060be:	b083      	sub	sp, #12
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	6a1a      	ldr	r2, [r3, #32]
 80060ca:	f241 1311 	movw	r3, #4369	; 0x1111
 80060ce:	4013      	ands	r3, r2
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d10f      	bne.n	80060f4 <HAL_TIM_Base_Stop+0x38>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	6a1a      	ldr	r2, [r3, #32]
 80060da:	f240 4344 	movw	r3, #1092	; 0x444
 80060de:	4013      	ands	r3, r2
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d107      	bne.n	80060f4 <HAL_TIM_Base_Stop+0x38>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f022 0201 	bic.w	r2, r2, #1
 80060f2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2201      	movs	r2, #1
 80060f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80060fc:	2300      	movs	r3, #0
}
 80060fe:	4618      	mov	r0, r3
 8006100:	370c      	adds	r7, #12
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr

0800610a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800610a:	b580      	push	{r7, lr}
 800610c:	b082      	sub	sp, #8
 800610e:	af00      	add	r7, sp, #0
 8006110:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d101      	bne.n	800611c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006118:	2301      	movs	r3, #1
 800611a:	e049      	b.n	80061b0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006122:	b2db      	uxtb	r3, r3
 8006124:	2b00      	cmp	r3, #0
 8006126:	d106      	bne.n	8006136 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2200      	movs	r2, #0
 800612c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f7fc f9f5 	bl	8002520 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2202      	movs	r2, #2
 800613a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	3304      	adds	r3, #4
 8006146:	4619      	mov	r1, r3
 8006148:	4610      	mov	r0, r2
 800614a:	f000 fb87 	bl	800685c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2201      	movs	r2, #1
 8006152:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2201      	movs	r2, #1
 800615a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2201      	movs	r2, #1
 8006162:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2201      	movs	r2, #1
 800616a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2201      	movs	r2, #1
 8006172:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2201      	movs	r2, #1
 800617a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2201      	movs	r2, #1
 8006182:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2201      	movs	r2, #1
 800618a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2201      	movs	r2, #1
 8006192:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2201      	movs	r2, #1
 800619a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2201      	movs	r2, #1
 80061a2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2201      	movs	r2, #1
 80061aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061ae:	2300      	movs	r3, #0
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3708      	adds	r7, #8
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}

080061b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b084      	sub	sp, #16
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d109      	bne.n	80061dc <HAL_TIM_PWM_Start+0x24>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061ce:	b2db      	uxtb	r3, r3
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	bf14      	ite	ne
 80061d4:	2301      	movne	r3, #1
 80061d6:	2300      	moveq	r3, #0
 80061d8:	b2db      	uxtb	r3, r3
 80061da:	e03c      	b.n	8006256 <HAL_TIM_PWM_Start+0x9e>
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	2b04      	cmp	r3, #4
 80061e0:	d109      	bne.n	80061f6 <HAL_TIM_PWM_Start+0x3e>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80061e8:	b2db      	uxtb	r3, r3
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	bf14      	ite	ne
 80061ee:	2301      	movne	r3, #1
 80061f0:	2300      	moveq	r3, #0
 80061f2:	b2db      	uxtb	r3, r3
 80061f4:	e02f      	b.n	8006256 <HAL_TIM_PWM_Start+0x9e>
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	2b08      	cmp	r3, #8
 80061fa:	d109      	bne.n	8006210 <HAL_TIM_PWM_Start+0x58>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006202:	b2db      	uxtb	r3, r3
 8006204:	2b01      	cmp	r3, #1
 8006206:	bf14      	ite	ne
 8006208:	2301      	movne	r3, #1
 800620a:	2300      	moveq	r3, #0
 800620c:	b2db      	uxtb	r3, r3
 800620e:	e022      	b.n	8006256 <HAL_TIM_PWM_Start+0x9e>
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	2b0c      	cmp	r3, #12
 8006214:	d109      	bne.n	800622a <HAL_TIM_PWM_Start+0x72>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800621c:	b2db      	uxtb	r3, r3
 800621e:	2b01      	cmp	r3, #1
 8006220:	bf14      	ite	ne
 8006222:	2301      	movne	r3, #1
 8006224:	2300      	moveq	r3, #0
 8006226:	b2db      	uxtb	r3, r3
 8006228:	e015      	b.n	8006256 <HAL_TIM_PWM_Start+0x9e>
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	2b10      	cmp	r3, #16
 800622e:	d109      	bne.n	8006244 <HAL_TIM_PWM_Start+0x8c>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006236:	b2db      	uxtb	r3, r3
 8006238:	2b01      	cmp	r3, #1
 800623a:	bf14      	ite	ne
 800623c:	2301      	movne	r3, #1
 800623e:	2300      	moveq	r3, #0
 8006240:	b2db      	uxtb	r3, r3
 8006242:	e008      	b.n	8006256 <HAL_TIM_PWM_Start+0x9e>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800624a:	b2db      	uxtb	r3, r3
 800624c:	2b01      	cmp	r3, #1
 800624e:	bf14      	ite	ne
 8006250:	2301      	movne	r3, #1
 8006252:	2300      	moveq	r3, #0
 8006254:	b2db      	uxtb	r3, r3
 8006256:	2b00      	cmp	r3, #0
 8006258:	d001      	beq.n	800625e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	e083      	b.n	8006366 <HAL_TIM_PWM_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d104      	bne.n	800626e <HAL_TIM_PWM_Start+0xb6>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2202      	movs	r2, #2
 8006268:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800626c:	e023      	b.n	80062b6 <HAL_TIM_PWM_Start+0xfe>
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	2b04      	cmp	r3, #4
 8006272:	d104      	bne.n	800627e <HAL_TIM_PWM_Start+0xc6>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2202      	movs	r2, #2
 8006278:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800627c:	e01b      	b.n	80062b6 <HAL_TIM_PWM_Start+0xfe>
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	2b08      	cmp	r3, #8
 8006282:	d104      	bne.n	800628e <HAL_TIM_PWM_Start+0xd6>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2202      	movs	r2, #2
 8006288:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800628c:	e013      	b.n	80062b6 <HAL_TIM_PWM_Start+0xfe>
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	2b0c      	cmp	r3, #12
 8006292:	d104      	bne.n	800629e <HAL_TIM_PWM_Start+0xe6>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2202      	movs	r2, #2
 8006298:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800629c:	e00b      	b.n	80062b6 <HAL_TIM_PWM_Start+0xfe>
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	2b10      	cmp	r3, #16
 80062a2:	d104      	bne.n	80062ae <HAL_TIM_PWM_Start+0xf6>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2202      	movs	r2, #2
 80062a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80062ac:	e003      	b.n	80062b6 <HAL_TIM_PWM_Start+0xfe>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2202      	movs	r2, #2
 80062b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	2201      	movs	r2, #1
 80062bc:	6839      	ldr	r1, [r7, #0]
 80062be:	4618      	mov	r0, r3
 80062c0:	f000 fe7a 	bl	8006fb8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a29      	ldr	r2, [pc, #164]	; (8006370 <HAL_TIM_PWM_Start+0x1b8>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d00e      	beq.n	80062ec <HAL_TIM_PWM_Start+0x134>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a28      	ldr	r2, [pc, #160]	; (8006374 <HAL_TIM_PWM_Start+0x1bc>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d009      	beq.n	80062ec <HAL_TIM_PWM_Start+0x134>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a26      	ldr	r2, [pc, #152]	; (8006378 <HAL_TIM_PWM_Start+0x1c0>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d004      	beq.n	80062ec <HAL_TIM_PWM_Start+0x134>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a25      	ldr	r2, [pc, #148]	; (800637c <HAL_TIM_PWM_Start+0x1c4>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d101      	bne.n	80062f0 <HAL_TIM_PWM_Start+0x138>
 80062ec:	2301      	movs	r3, #1
 80062ee:	e000      	b.n	80062f2 <HAL_TIM_PWM_Start+0x13a>
 80062f0:	2300      	movs	r3, #0
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d007      	beq.n	8006306 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006304:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a19      	ldr	r2, [pc, #100]	; (8006370 <HAL_TIM_PWM_Start+0x1b8>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d009      	beq.n	8006324 <HAL_TIM_PWM_Start+0x16c>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006318:	d004      	beq.n	8006324 <HAL_TIM_PWM_Start+0x16c>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a15      	ldr	r2, [pc, #84]	; (8006374 <HAL_TIM_PWM_Start+0x1bc>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d115      	bne.n	8006350 <HAL_TIM_PWM_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	689a      	ldr	r2, [r3, #8]
 800632a:	4b15      	ldr	r3, [pc, #84]	; (8006380 <HAL_TIM_PWM_Start+0x1c8>)
 800632c:	4013      	ands	r3, r2
 800632e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2b06      	cmp	r3, #6
 8006334:	d015      	beq.n	8006362 <HAL_TIM_PWM_Start+0x1aa>
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800633c:	d011      	beq.n	8006362 <HAL_TIM_PWM_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f042 0201 	orr.w	r2, r2, #1
 800634c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800634e:	e008      	b.n	8006362 <HAL_TIM_PWM_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f042 0201 	orr.w	r2, r2, #1
 800635e:	601a      	str	r2, [r3, #0]
 8006360:	e000      	b.n	8006364 <HAL_TIM_PWM_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006362:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006364:	2300      	movs	r3, #0
}
 8006366:	4618      	mov	r0, r3
 8006368:	3710      	adds	r7, #16
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}
 800636e:	bf00      	nop
 8006370:	40012c00 	.word	0x40012c00
 8006374:	40014000 	.word	0x40014000
 8006378:	40014400 	.word	0x40014400
 800637c:	40014800 	.word	0x40014800
 8006380:	00010007 	.word	0x00010007

08006384 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b082      	sub	sp, #8
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	2200      	movs	r2, #0
 8006394:	6839      	ldr	r1, [r7, #0]
 8006396:	4618      	mov	r0, r3
 8006398:	f000 fe0e 	bl	8006fb8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a3b      	ldr	r2, [pc, #236]	; (8006490 <HAL_TIM_PWM_Stop+0x10c>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d00e      	beq.n	80063c4 <HAL_TIM_PWM_Stop+0x40>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a3a      	ldr	r2, [pc, #232]	; (8006494 <HAL_TIM_PWM_Stop+0x110>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d009      	beq.n	80063c4 <HAL_TIM_PWM_Stop+0x40>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a38      	ldr	r2, [pc, #224]	; (8006498 <HAL_TIM_PWM_Stop+0x114>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d004      	beq.n	80063c4 <HAL_TIM_PWM_Stop+0x40>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a37      	ldr	r2, [pc, #220]	; (800649c <HAL_TIM_PWM_Stop+0x118>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d101      	bne.n	80063c8 <HAL_TIM_PWM_Stop+0x44>
 80063c4:	2301      	movs	r3, #1
 80063c6:	e000      	b.n	80063ca <HAL_TIM_PWM_Stop+0x46>
 80063c8:	2300      	movs	r3, #0
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d017      	beq.n	80063fe <HAL_TIM_PWM_Stop+0x7a>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	6a1a      	ldr	r2, [r3, #32]
 80063d4:	f241 1311 	movw	r3, #4369	; 0x1111
 80063d8:	4013      	ands	r3, r2
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d10f      	bne.n	80063fe <HAL_TIM_PWM_Stop+0x7a>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	6a1a      	ldr	r2, [r3, #32]
 80063e4:	f240 4344 	movw	r3, #1092	; 0x444
 80063e8:	4013      	ands	r3, r2
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d107      	bne.n	80063fe <HAL_TIM_PWM_Stop+0x7a>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80063fc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	6a1a      	ldr	r2, [r3, #32]
 8006404:	f241 1311 	movw	r3, #4369	; 0x1111
 8006408:	4013      	ands	r3, r2
 800640a:	2b00      	cmp	r3, #0
 800640c:	d10f      	bne.n	800642e <HAL_TIM_PWM_Stop+0xaa>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	6a1a      	ldr	r2, [r3, #32]
 8006414:	f240 4344 	movw	r3, #1092	; 0x444
 8006418:	4013      	ands	r3, r2
 800641a:	2b00      	cmp	r3, #0
 800641c:	d107      	bne.n	800642e <HAL_TIM_PWM_Stop+0xaa>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	681a      	ldr	r2, [r3, #0]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f022 0201 	bic.w	r2, r2, #1
 800642c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d104      	bne.n	800643e <HAL_TIM_PWM_Stop+0xba>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2201      	movs	r2, #1
 8006438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800643c:	e023      	b.n	8006486 <HAL_TIM_PWM_Stop+0x102>
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	2b04      	cmp	r3, #4
 8006442:	d104      	bne.n	800644e <HAL_TIM_PWM_Stop+0xca>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2201      	movs	r2, #1
 8006448:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800644c:	e01b      	b.n	8006486 <HAL_TIM_PWM_Stop+0x102>
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	2b08      	cmp	r3, #8
 8006452:	d104      	bne.n	800645e <HAL_TIM_PWM_Stop+0xda>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2201      	movs	r2, #1
 8006458:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800645c:	e013      	b.n	8006486 <HAL_TIM_PWM_Stop+0x102>
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	2b0c      	cmp	r3, #12
 8006462:	d104      	bne.n	800646e <HAL_TIM_PWM_Stop+0xea>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2201      	movs	r2, #1
 8006468:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800646c:	e00b      	b.n	8006486 <HAL_TIM_PWM_Stop+0x102>
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	2b10      	cmp	r3, #16
 8006472:	d104      	bne.n	800647e <HAL_TIM_PWM_Stop+0xfa>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2201      	movs	r2, #1
 8006478:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800647c:	e003      	b.n	8006486 <HAL_TIM_PWM_Stop+0x102>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2201      	movs	r2, #1
 8006482:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8006486:	2300      	movs	r3, #0
}
 8006488:	4618      	mov	r0, r3
 800648a:	3708      	adds	r7, #8
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}
 8006490:	40012c00 	.word	0x40012c00
 8006494:	40014000 	.word	0x40014000
 8006498:	40014400 	.word	0x40014400
 800649c:	40014800 	.word	0x40014800

080064a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b086      	sub	sp, #24
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	60f8      	str	r0, [r7, #12]
 80064a8:	60b9      	str	r1, [r7, #8]
 80064aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80064ac:	2300      	movs	r3, #0
 80064ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	d101      	bne.n	80064be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80064ba:	2302      	movs	r3, #2
 80064bc:	e0ff      	b.n	80066be <HAL_TIM_PWM_ConfigChannel+0x21e>
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2201      	movs	r2, #1
 80064c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2b14      	cmp	r3, #20
 80064ca:	f200 80f0 	bhi.w	80066ae <HAL_TIM_PWM_ConfigChannel+0x20e>
 80064ce:	a201      	add	r2, pc, #4	; (adr r2, 80064d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80064d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064d4:	08006529 	.word	0x08006529
 80064d8:	080066af 	.word	0x080066af
 80064dc:	080066af 	.word	0x080066af
 80064e0:	080066af 	.word	0x080066af
 80064e4:	08006569 	.word	0x08006569
 80064e8:	080066af 	.word	0x080066af
 80064ec:	080066af 	.word	0x080066af
 80064f0:	080066af 	.word	0x080066af
 80064f4:	080065ab 	.word	0x080065ab
 80064f8:	080066af 	.word	0x080066af
 80064fc:	080066af 	.word	0x080066af
 8006500:	080066af 	.word	0x080066af
 8006504:	080065eb 	.word	0x080065eb
 8006508:	080066af 	.word	0x080066af
 800650c:	080066af 	.word	0x080066af
 8006510:	080066af 	.word	0x080066af
 8006514:	0800662d 	.word	0x0800662d
 8006518:	080066af 	.word	0x080066af
 800651c:	080066af 	.word	0x080066af
 8006520:	080066af 	.word	0x080066af
 8006524:	0800666d 	.word	0x0800666d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	68b9      	ldr	r1, [r7, #8]
 800652e:	4618      	mov	r0, r3
 8006530:	f000 fa02 	bl	8006938 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	699a      	ldr	r2, [r3, #24]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f042 0208 	orr.w	r2, r2, #8
 8006542:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	699a      	ldr	r2, [r3, #24]
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f022 0204 	bic.w	r2, r2, #4
 8006552:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	6999      	ldr	r1, [r3, #24]
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	691a      	ldr	r2, [r3, #16]
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	430a      	orrs	r2, r1
 8006564:	619a      	str	r2, [r3, #24]
      break;
 8006566:	e0a5      	b.n	80066b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	68b9      	ldr	r1, [r7, #8]
 800656e:	4618      	mov	r0, r3
 8006570:	f000 fa68 	bl	8006a44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	699a      	ldr	r2, [r3, #24]
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006582:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	699a      	ldr	r2, [r3, #24]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006592:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	6999      	ldr	r1, [r3, #24]
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	691b      	ldr	r3, [r3, #16]
 800659e:	021a      	lsls	r2, r3, #8
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	430a      	orrs	r2, r1
 80065a6:	619a      	str	r2, [r3, #24]
      break;
 80065a8:	e084      	b.n	80066b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	68b9      	ldr	r1, [r7, #8]
 80065b0:	4618      	mov	r0, r3
 80065b2:	f000 fac7 	bl	8006b44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	69da      	ldr	r2, [r3, #28]
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f042 0208 	orr.w	r2, r2, #8
 80065c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	69da      	ldr	r2, [r3, #28]
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f022 0204 	bic.w	r2, r2, #4
 80065d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	69d9      	ldr	r1, [r3, #28]
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	691a      	ldr	r2, [r3, #16]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	430a      	orrs	r2, r1
 80065e6:	61da      	str	r2, [r3, #28]
      break;
 80065e8:	e064      	b.n	80066b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	68b9      	ldr	r1, [r7, #8]
 80065f0:	4618      	mov	r0, r3
 80065f2:	f000 fb25 	bl	8006c40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	69da      	ldr	r2, [r3, #28]
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006604:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	69da      	ldr	r2, [r3, #28]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006614:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	69d9      	ldr	r1, [r3, #28]
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	691b      	ldr	r3, [r3, #16]
 8006620:	021a      	lsls	r2, r3, #8
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	430a      	orrs	r2, r1
 8006628:	61da      	str	r2, [r3, #28]
      break;
 800662a:	e043      	b.n	80066b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	68b9      	ldr	r1, [r7, #8]
 8006632:	4618      	mov	r0, r3
 8006634:	f000 fb68 	bl	8006d08 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f042 0208 	orr.w	r2, r2, #8
 8006646:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f022 0204 	bic.w	r2, r2, #4
 8006656:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	691a      	ldr	r2, [r3, #16]
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	430a      	orrs	r2, r1
 8006668:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800666a:	e023      	b.n	80066b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	68b9      	ldr	r1, [r7, #8]
 8006672:	4618      	mov	r0, r3
 8006674:	f000 fba6 	bl	8006dc4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006686:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006696:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	691b      	ldr	r3, [r3, #16]
 80066a2:	021a      	lsls	r2, r3, #8
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	430a      	orrs	r2, r1
 80066aa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80066ac:	e002      	b.n	80066b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80066ae:	2301      	movs	r3, #1
 80066b0:	75fb      	strb	r3, [r7, #23]
      break;
 80066b2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2200      	movs	r2, #0
 80066b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80066bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3718      	adds	r7, #24
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}
 80066c6:	bf00      	nop

080066c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b084      	sub	sp, #16
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
 80066d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80066d2:	2300      	movs	r3, #0
 80066d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d101      	bne.n	80066e4 <HAL_TIM_ConfigClockSource+0x1c>
 80066e0:	2302      	movs	r3, #2
 80066e2:	e0b6      	b.n	8006852 <HAL_TIM_ConfigClockSource+0x18a>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2201      	movs	r2, #1
 80066e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2202      	movs	r2, #2
 80066f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006702:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006706:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800670e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	68ba      	ldr	r2, [r7, #8]
 8006716:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006720:	d03e      	beq.n	80067a0 <HAL_TIM_ConfigClockSource+0xd8>
 8006722:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006726:	f200 8087 	bhi.w	8006838 <HAL_TIM_ConfigClockSource+0x170>
 800672a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800672e:	f000 8086 	beq.w	800683e <HAL_TIM_ConfigClockSource+0x176>
 8006732:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006736:	d87f      	bhi.n	8006838 <HAL_TIM_ConfigClockSource+0x170>
 8006738:	2b70      	cmp	r3, #112	; 0x70
 800673a:	d01a      	beq.n	8006772 <HAL_TIM_ConfigClockSource+0xaa>
 800673c:	2b70      	cmp	r3, #112	; 0x70
 800673e:	d87b      	bhi.n	8006838 <HAL_TIM_ConfigClockSource+0x170>
 8006740:	2b60      	cmp	r3, #96	; 0x60
 8006742:	d050      	beq.n	80067e6 <HAL_TIM_ConfigClockSource+0x11e>
 8006744:	2b60      	cmp	r3, #96	; 0x60
 8006746:	d877      	bhi.n	8006838 <HAL_TIM_ConfigClockSource+0x170>
 8006748:	2b50      	cmp	r3, #80	; 0x50
 800674a:	d03c      	beq.n	80067c6 <HAL_TIM_ConfigClockSource+0xfe>
 800674c:	2b50      	cmp	r3, #80	; 0x50
 800674e:	d873      	bhi.n	8006838 <HAL_TIM_ConfigClockSource+0x170>
 8006750:	2b40      	cmp	r3, #64	; 0x40
 8006752:	d058      	beq.n	8006806 <HAL_TIM_ConfigClockSource+0x13e>
 8006754:	2b40      	cmp	r3, #64	; 0x40
 8006756:	d86f      	bhi.n	8006838 <HAL_TIM_ConfigClockSource+0x170>
 8006758:	2b30      	cmp	r3, #48	; 0x30
 800675a:	d064      	beq.n	8006826 <HAL_TIM_ConfigClockSource+0x15e>
 800675c:	2b30      	cmp	r3, #48	; 0x30
 800675e:	d86b      	bhi.n	8006838 <HAL_TIM_ConfigClockSource+0x170>
 8006760:	2b20      	cmp	r3, #32
 8006762:	d060      	beq.n	8006826 <HAL_TIM_ConfigClockSource+0x15e>
 8006764:	2b20      	cmp	r3, #32
 8006766:	d867      	bhi.n	8006838 <HAL_TIM_ConfigClockSource+0x170>
 8006768:	2b00      	cmp	r3, #0
 800676a:	d05c      	beq.n	8006826 <HAL_TIM_ConfigClockSource+0x15e>
 800676c:	2b10      	cmp	r3, #16
 800676e:	d05a      	beq.n	8006826 <HAL_TIM_ConfigClockSource+0x15e>
 8006770:	e062      	b.n	8006838 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6818      	ldr	r0, [r3, #0]
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	6899      	ldr	r1, [r3, #8]
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	685a      	ldr	r2, [r3, #4]
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	68db      	ldr	r3, [r3, #12]
 8006782:	f000 fbf9 	bl	8006f78 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	689b      	ldr	r3, [r3, #8]
 800678c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006794:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	68ba      	ldr	r2, [r7, #8]
 800679c:	609a      	str	r2, [r3, #8]
      break;
 800679e:	e04f      	b.n	8006840 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6818      	ldr	r0, [r3, #0]
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	6899      	ldr	r1, [r3, #8]
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	685a      	ldr	r2, [r3, #4]
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	68db      	ldr	r3, [r3, #12]
 80067b0:	f000 fbe2 	bl	8006f78 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	689a      	ldr	r2, [r3, #8]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80067c2:	609a      	str	r2, [r3, #8]
      break;
 80067c4:	e03c      	b.n	8006840 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6818      	ldr	r0, [r3, #0]
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	6859      	ldr	r1, [r3, #4]
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	68db      	ldr	r3, [r3, #12]
 80067d2:	461a      	mov	r2, r3
 80067d4:	f000 fb56 	bl	8006e84 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	2150      	movs	r1, #80	; 0x50
 80067de:	4618      	mov	r0, r3
 80067e0:	f000 fbaf 	bl	8006f42 <TIM_ITRx_SetConfig>
      break;
 80067e4:	e02c      	b.n	8006840 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6818      	ldr	r0, [r3, #0]
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	6859      	ldr	r1, [r3, #4]
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	68db      	ldr	r3, [r3, #12]
 80067f2:	461a      	mov	r2, r3
 80067f4:	f000 fb75 	bl	8006ee2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	2160      	movs	r1, #96	; 0x60
 80067fe:	4618      	mov	r0, r3
 8006800:	f000 fb9f 	bl	8006f42 <TIM_ITRx_SetConfig>
      break;
 8006804:	e01c      	b.n	8006840 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6818      	ldr	r0, [r3, #0]
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	6859      	ldr	r1, [r3, #4]
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	68db      	ldr	r3, [r3, #12]
 8006812:	461a      	mov	r2, r3
 8006814:	f000 fb36 	bl	8006e84 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	2140      	movs	r1, #64	; 0x40
 800681e:	4618      	mov	r0, r3
 8006820:	f000 fb8f 	bl	8006f42 <TIM_ITRx_SetConfig>
      break;
 8006824:	e00c      	b.n	8006840 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681a      	ldr	r2, [r3, #0]
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4619      	mov	r1, r3
 8006830:	4610      	mov	r0, r2
 8006832:	f000 fb86 	bl	8006f42 <TIM_ITRx_SetConfig>
      break;
 8006836:	e003      	b.n	8006840 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006838:	2301      	movs	r3, #1
 800683a:	73fb      	strb	r3, [r7, #15]
      break;
 800683c:	e000      	b.n	8006840 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800683e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2201      	movs	r2, #1
 8006844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2200      	movs	r2, #0
 800684c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006850:	7bfb      	ldrb	r3, [r7, #15]
}
 8006852:	4618      	mov	r0, r3
 8006854:	3710      	adds	r7, #16
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}
	...

0800685c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800685c:	b480      	push	{r7}
 800685e:	b085      	sub	sp, #20
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	4a2e      	ldr	r2, [pc, #184]	; (8006928 <TIM_Base_SetConfig+0xcc>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d003      	beq.n	800687c <TIM_Base_SetConfig+0x20>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800687a:	d108      	bne.n	800688e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006882:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	68fa      	ldr	r2, [r7, #12]
 800688a:	4313      	orrs	r3, r2
 800688c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	4a25      	ldr	r2, [pc, #148]	; (8006928 <TIM_Base_SetConfig+0xcc>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d00f      	beq.n	80068b6 <TIM_Base_SetConfig+0x5a>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800689c:	d00b      	beq.n	80068b6 <TIM_Base_SetConfig+0x5a>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	4a22      	ldr	r2, [pc, #136]	; (800692c <TIM_Base_SetConfig+0xd0>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d007      	beq.n	80068b6 <TIM_Base_SetConfig+0x5a>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	4a21      	ldr	r2, [pc, #132]	; (8006930 <TIM_Base_SetConfig+0xd4>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d003      	beq.n	80068b6 <TIM_Base_SetConfig+0x5a>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	4a20      	ldr	r2, [pc, #128]	; (8006934 <TIM_Base_SetConfig+0xd8>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d108      	bne.n	80068c8 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	68db      	ldr	r3, [r3, #12]
 80068c2:	68fa      	ldr	r2, [r7, #12]
 80068c4:	4313      	orrs	r3, r2
 80068c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	695b      	ldr	r3, [r3, #20]
 80068d2:	4313      	orrs	r3, r2
 80068d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	68fa      	ldr	r2, [r7, #12]
 80068da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	689a      	ldr	r2, [r3, #8]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	681a      	ldr	r2, [r3, #0]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	4a0e      	ldr	r2, [pc, #56]	; (8006928 <TIM_Base_SetConfig+0xcc>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d00b      	beq.n	800690c <TIM_Base_SetConfig+0xb0>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	4a0d      	ldr	r2, [pc, #52]	; (800692c <TIM_Base_SetConfig+0xd0>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d007      	beq.n	800690c <TIM_Base_SetConfig+0xb0>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	4a0c      	ldr	r2, [pc, #48]	; (8006930 <TIM_Base_SetConfig+0xd4>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d003      	beq.n	800690c <TIM_Base_SetConfig+0xb0>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	4a0b      	ldr	r2, [pc, #44]	; (8006934 <TIM_Base_SetConfig+0xd8>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d103      	bne.n	8006914 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	691a      	ldr	r2, [r3, #16]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2201      	movs	r2, #1
 8006918:	615a      	str	r2, [r3, #20]
}
 800691a:	bf00      	nop
 800691c:	3714      	adds	r7, #20
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr
 8006926:	bf00      	nop
 8006928:	40012c00 	.word	0x40012c00
 800692c:	40014000 	.word	0x40014000
 8006930:	40014400 	.word	0x40014400
 8006934:	40014800 	.word	0x40014800

08006938 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006938:	b480      	push	{r7}
 800693a:	b087      	sub	sp, #28
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6a1b      	ldr	r3, [r3, #32]
 8006946:	f023 0201 	bic.w	r2, r3, #1
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6a1b      	ldr	r3, [r3, #32]
 8006952:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	699b      	ldr	r3, [r3, #24]
 800695e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800696a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	f023 0303 	bic.w	r3, r3, #3
 8006972:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	68fa      	ldr	r2, [r7, #12]
 800697a:	4313      	orrs	r3, r2
 800697c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	f023 0302 	bic.w	r3, r3, #2
 8006984:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	689b      	ldr	r3, [r3, #8]
 800698a:	697a      	ldr	r2, [r7, #20]
 800698c:	4313      	orrs	r3, r2
 800698e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	4a28      	ldr	r2, [pc, #160]	; (8006a34 <TIM_OC1_SetConfig+0xfc>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d00b      	beq.n	80069b0 <TIM_OC1_SetConfig+0x78>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	4a27      	ldr	r2, [pc, #156]	; (8006a38 <TIM_OC1_SetConfig+0x100>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d007      	beq.n	80069b0 <TIM_OC1_SetConfig+0x78>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	4a26      	ldr	r2, [pc, #152]	; (8006a3c <TIM_OC1_SetConfig+0x104>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d003      	beq.n	80069b0 <TIM_OC1_SetConfig+0x78>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	4a25      	ldr	r2, [pc, #148]	; (8006a40 <TIM_OC1_SetConfig+0x108>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d10c      	bne.n	80069ca <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	f023 0308 	bic.w	r3, r3, #8
 80069b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	68db      	ldr	r3, [r3, #12]
 80069bc:	697a      	ldr	r2, [r7, #20]
 80069be:	4313      	orrs	r3, r2
 80069c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	f023 0304 	bic.w	r3, r3, #4
 80069c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	4a19      	ldr	r2, [pc, #100]	; (8006a34 <TIM_OC1_SetConfig+0xfc>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d00b      	beq.n	80069ea <TIM_OC1_SetConfig+0xb2>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	4a18      	ldr	r2, [pc, #96]	; (8006a38 <TIM_OC1_SetConfig+0x100>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d007      	beq.n	80069ea <TIM_OC1_SetConfig+0xb2>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	4a17      	ldr	r2, [pc, #92]	; (8006a3c <TIM_OC1_SetConfig+0x104>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d003      	beq.n	80069ea <TIM_OC1_SetConfig+0xb2>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	4a16      	ldr	r2, [pc, #88]	; (8006a40 <TIM_OC1_SetConfig+0x108>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d111      	bne.n	8006a0e <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80069f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	695b      	ldr	r3, [r3, #20]
 80069fe:	693a      	ldr	r2, [r7, #16]
 8006a00:	4313      	orrs	r3, r2
 8006a02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	699b      	ldr	r3, [r3, #24]
 8006a08:	693a      	ldr	r2, [r7, #16]
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	693a      	ldr	r2, [r7, #16]
 8006a12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	68fa      	ldr	r2, [r7, #12]
 8006a18:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	685a      	ldr	r2, [r3, #4]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	697a      	ldr	r2, [r7, #20]
 8006a26:	621a      	str	r2, [r3, #32]
}
 8006a28:	bf00      	nop
 8006a2a:	371c      	adds	r7, #28
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a32:	4770      	bx	lr
 8006a34:	40012c00 	.word	0x40012c00
 8006a38:	40014000 	.word	0x40014000
 8006a3c:	40014400 	.word	0x40014400
 8006a40:	40014800 	.word	0x40014800

08006a44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b087      	sub	sp, #28
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
 8006a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6a1b      	ldr	r3, [r3, #32]
 8006a52:	f023 0210 	bic.w	r2, r3, #16
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6a1b      	ldr	r3, [r3, #32]
 8006a5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	699b      	ldr	r3, [r3, #24]
 8006a6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	021b      	lsls	r3, r3, #8
 8006a86:	68fa      	ldr	r2, [r7, #12]
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	f023 0320 	bic.w	r3, r3, #32
 8006a92:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	689b      	ldr	r3, [r3, #8]
 8006a98:	011b      	lsls	r3, r3, #4
 8006a9a:	697a      	ldr	r2, [r7, #20]
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	4a24      	ldr	r2, [pc, #144]	; (8006b34 <TIM_OC2_SetConfig+0xf0>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d10d      	bne.n	8006ac4 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006aae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	68db      	ldr	r3, [r3, #12]
 8006ab4:	011b      	lsls	r3, r3, #4
 8006ab6:	697a      	ldr	r2, [r7, #20]
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ac2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	4a1b      	ldr	r2, [pc, #108]	; (8006b34 <TIM_OC2_SetConfig+0xf0>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d00b      	beq.n	8006ae4 <TIM_OC2_SetConfig+0xa0>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	4a1a      	ldr	r2, [pc, #104]	; (8006b38 <TIM_OC2_SetConfig+0xf4>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d007      	beq.n	8006ae4 <TIM_OC2_SetConfig+0xa0>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	4a19      	ldr	r2, [pc, #100]	; (8006b3c <TIM_OC2_SetConfig+0xf8>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d003      	beq.n	8006ae4 <TIM_OC2_SetConfig+0xa0>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	4a18      	ldr	r2, [pc, #96]	; (8006b40 <TIM_OC2_SetConfig+0xfc>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d113      	bne.n	8006b0c <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006aea:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006af2:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	695b      	ldr	r3, [r3, #20]
 8006af8:	009b      	lsls	r3, r3, #2
 8006afa:	693a      	ldr	r2, [r7, #16]
 8006afc:	4313      	orrs	r3, r2
 8006afe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	699b      	ldr	r3, [r3, #24]
 8006b04:	009b      	lsls	r3, r3, #2
 8006b06:	693a      	ldr	r2, [r7, #16]
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	693a      	ldr	r2, [r7, #16]
 8006b10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	68fa      	ldr	r2, [r7, #12]
 8006b16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	685a      	ldr	r2, [r3, #4]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	697a      	ldr	r2, [r7, #20]
 8006b24:	621a      	str	r2, [r3, #32]
}
 8006b26:	bf00      	nop
 8006b28:	371c      	adds	r7, #28
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b30:	4770      	bx	lr
 8006b32:	bf00      	nop
 8006b34:	40012c00 	.word	0x40012c00
 8006b38:	40014000 	.word	0x40014000
 8006b3c:	40014400 	.word	0x40014400
 8006b40:	40014800 	.word	0x40014800

08006b44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b087      	sub	sp, #28
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
 8006b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6a1b      	ldr	r3, [r3, #32]
 8006b52:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6a1b      	ldr	r3, [r3, #32]
 8006b5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	69db      	ldr	r3, [r3, #28]
 8006b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f023 0303 	bic.w	r3, r3, #3
 8006b7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	68fa      	ldr	r2, [r7, #12]
 8006b86:	4313      	orrs	r3, r2
 8006b88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	689b      	ldr	r3, [r3, #8]
 8006b96:	021b      	lsls	r3, r3, #8
 8006b98:	697a      	ldr	r2, [r7, #20]
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	4a23      	ldr	r2, [pc, #140]	; (8006c30 <TIM_OC3_SetConfig+0xec>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d10d      	bne.n	8006bc2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006bac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	68db      	ldr	r3, [r3, #12]
 8006bb2:	021b      	lsls	r3, r3, #8
 8006bb4:	697a      	ldr	r2, [r7, #20]
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006bc0:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	4a1a      	ldr	r2, [pc, #104]	; (8006c30 <TIM_OC3_SetConfig+0xec>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d00b      	beq.n	8006be2 <TIM_OC3_SetConfig+0x9e>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	4a19      	ldr	r2, [pc, #100]	; (8006c34 <TIM_OC3_SetConfig+0xf0>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d007      	beq.n	8006be2 <TIM_OC3_SetConfig+0x9e>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	4a18      	ldr	r2, [pc, #96]	; (8006c38 <TIM_OC3_SetConfig+0xf4>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d003      	beq.n	8006be2 <TIM_OC3_SetConfig+0x9e>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	4a17      	ldr	r2, [pc, #92]	; (8006c3c <TIM_OC3_SetConfig+0xf8>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d113      	bne.n	8006c0a <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006be8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006bf0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	695b      	ldr	r3, [r3, #20]
 8006bf6:	011b      	lsls	r3, r3, #4
 8006bf8:	693a      	ldr	r2, [r7, #16]
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	699b      	ldr	r3, [r3, #24]
 8006c02:	011b      	lsls	r3, r3, #4
 8006c04:	693a      	ldr	r2, [r7, #16]
 8006c06:	4313      	orrs	r3, r2
 8006c08:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	693a      	ldr	r2, [r7, #16]
 8006c0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	68fa      	ldr	r2, [r7, #12]
 8006c14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	685a      	ldr	r2, [r3, #4]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	697a      	ldr	r2, [r7, #20]
 8006c22:	621a      	str	r2, [r3, #32]
}
 8006c24:	bf00      	nop
 8006c26:	371c      	adds	r7, #28
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2e:	4770      	bx	lr
 8006c30:	40012c00 	.word	0x40012c00
 8006c34:	40014000 	.word	0x40014000
 8006c38:	40014400 	.word	0x40014400
 8006c3c:	40014800 	.word	0x40014800

08006c40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b087      	sub	sp, #28
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6a1b      	ldr	r3, [r3, #32]
 8006c4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6a1b      	ldr	r3, [r3, #32]
 8006c5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	69db      	ldr	r3, [r3, #28]
 8006c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	021b      	lsls	r3, r3, #8
 8006c82:	68fa      	ldr	r2, [r7, #12]
 8006c84:	4313      	orrs	r3, r2
 8006c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	689b      	ldr	r3, [r3, #8]
 8006c94:	031b      	lsls	r3, r3, #12
 8006c96:	693a      	ldr	r2, [r7, #16]
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	4a16      	ldr	r2, [pc, #88]	; (8006cf8 <TIM_OC4_SetConfig+0xb8>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d00b      	beq.n	8006cbc <TIM_OC4_SetConfig+0x7c>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	4a15      	ldr	r2, [pc, #84]	; (8006cfc <TIM_OC4_SetConfig+0xbc>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d007      	beq.n	8006cbc <TIM_OC4_SetConfig+0x7c>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	4a14      	ldr	r2, [pc, #80]	; (8006d00 <TIM_OC4_SetConfig+0xc0>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d003      	beq.n	8006cbc <TIM_OC4_SetConfig+0x7c>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	4a13      	ldr	r2, [pc, #76]	; (8006d04 <TIM_OC4_SetConfig+0xc4>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d109      	bne.n	8006cd0 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006cc2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	695b      	ldr	r3, [r3, #20]
 8006cc8:	019b      	lsls	r3, r3, #6
 8006cca:	697a      	ldr	r2, [r7, #20]
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	697a      	ldr	r2, [r7, #20]
 8006cd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	68fa      	ldr	r2, [r7, #12]
 8006cda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	685a      	ldr	r2, [r3, #4]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	693a      	ldr	r2, [r7, #16]
 8006ce8:	621a      	str	r2, [r3, #32]
}
 8006cea:	bf00      	nop
 8006cec:	371c      	adds	r7, #28
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf4:	4770      	bx	lr
 8006cf6:	bf00      	nop
 8006cf8:	40012c00 	.word	0x40012c00
 8006cfc:	40014000 	.word	0x40014000
 8006d00:	40014400 	.word	0x40014400
 8006d04:	40014800 	.word	0x40014800

08006d08 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b087      	sub	sp, #28
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6a1b      	ldr	r3, [r3, #32]
 8006d16:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6a1b      	ldr	r3, [r3, #32]
 8006d22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	68fa      	ldr	r2, [r7, #12]
 8006d42:	4313      	orrs	r3, r2
 8006d44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006d4c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	689b      	ldr	r3, [r3, #8]
 8006d52:	041b      	lsls	r3, r3, #16
 8006d54:	693a      	ldr	r2, [r7, #16]
 8006d56:	4313      	orrs	r3, r2
 8006d58:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	4a15      	ldr	r2, [pc, #84]	; (8006db4 <TIM_OC5_SetConfig+0xac>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d00b      	beq.n	8006d7a <TIM_OC5_SetConfig+0x72>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	4a14      	ldr	r2, [pc, #80]	; (8006db8 <TIM_OC5_SetConfig+0xb0>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d007      	beq.n	8006d7a <TIM_OC5_SetConfig+0x72>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	4a13      	ldr	r2, [pc, #76]	; (8006dbc <TIM_OC5_SetConfig+0xb4>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d003      	beq.n	8006d7a <TIM_OC5_SetConfig+0x72>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	4a12      	ldr	r2, [pc, #72]	; (8006dc0 <TIM_OC5_SetConfig+0xb8>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d109      	bne.n	8006d8e <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d80:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	695b      	ldr	r3, [r3, #20]
 8006d86:	021b      	lsls	r3, r3, #8
 8006d88:	697a      	ldr	r2, [r7, #20]
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	697a      	ldr	r2, [r7, #20]
 8006d92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	68fa      	ldr	r2, [r7, #12]
 8006d98:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	685a      	ldr	r2, [r3, #4]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	693a      	ldr	r2, [r7, #16]
 8006da6:	621a      	str	r2, [r3, #32]
}
 8006da8:	bf00      	nop
 8006daa:	371c      	adds	r7, #28
 8006dac:	46bd      	mov	sp, r7
 8006dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db2:	4770      	bx	lr
 8006db4:	40012c00 	.word	0x40012c00
 8006db8:	40014000 	.word	0x40014000
 8006dbc:	40014400 	.word	0x40014400
 8006dc0:	40014800 	.word	0x40014800

08006dc4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b087      	sub	sp, #28
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
 8006dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6a1b      	ldr	r3, [r3, #32]
 8006dd2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6a1b      	ldr	r3, [r3, #32]
 8006dde:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006df2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006df6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	021b      	lsls	r3, r3, #8
 8006dfe:	68fa      	ldr	r2, [r7, #12]
 8006e00:	4313      	orrs	r3, r2
 8006e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006e0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	689b      	ldr	r3, [r3, #8]
 8006e10:	051b      	lsls	r3, r3, #20
 8006e12:	693a      	ldr	r2, [r7, #16]
 8006e14:	4313      	orrs	r3, r2
 8006e16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	4a16      	ldr	r2, [pc, #88]	; (8006e74 <TIM_OC6_SetConfig+0xb0>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d00b      	beq.n	8006e38 <TIM_OC6_SetConfig+0x74>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	4a15      	ldr	r2, [pc, #84]	; (8006e78 <TIM_OC6_SetConfig+0xb4>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d007      	beq.n	8006e38 <TIM_OC6_SetConfig+0x74>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	4a14      	ldr	r2, [pc, #80]	; (8006e7c <TIM_OC6_SetConfig+0xb8>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d003      	beq.n	8006e38 <TIM_OC6_SetConfig+0x74>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	4a13      	ldr	r2, [pc, #76]	; (8006e80 <TIM_OC6_SetConfig+0xbc>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d109      	bne.n	8006e4c <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e3e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	695b      	ldr	r3, [r3, #20]
 8006e44:	029b      	lsls	r3, r3, #10
 8006e46:	697a      	ldr	r2, [r7, #20]
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	697a      	ldr	r2, [r7, #20]
 8006e50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	68fa      	ldr	r2, [r7, #12]
 8006e56:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	685a      	ldr	r2, [r3, #4]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	693a      	ldr	r2, [r7, #16]
 8006e64:	621a      	str	r2, [r3, #32]
}
 8006e66:	bf00      	nop
 8006e68:	371c      	adds	r7, #28
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e70:	4770      	bx	lr
 8006e72:	bf00      	nop
 8006e74:	40012c00 	.word	0x40012c00
 8006e78:	40014000 	.word	0x40014000
 8006e7c:	40014400 	.word	0x40014400
 8006e80:	40014800 	.word	0x40014800

08006e84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b087      	sub	sp, #28
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	60f8      	str	r0, [r7, #12]
 8006e8c:	60b9      	str	r1, [r7, #8]
 8006e8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	6a1b      	ldr	r3, [r3, #32]
 8006e94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	6a1b      	ldr	r3, [r3, #32]
 8006e9a:	f023 0201 	bic.w	r2, r3, #1
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	699b      	ldr	r3, [r3, #24]
 8006ea6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006eae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	011b      	lsls	r3, r3, #4
 8006eb4:	693a      	ldr	r2, [r7, #16]
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	f023 030a 	bic.w	r3, r3, #10
 8006ec0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006ec2:	697a      	ldr	r2, [r7, #20]
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	693a      	ldr	r2, [r7, #16]
 8006ece:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	697a      	ldr	r2, [r7, #20]
 8006ed4:	621a      	str	r2, [r3, #32]
}
 8006ed6:	bf00      	nop
 8006ed8:	371c      	adds	r7, #28
 8006eda:	46bd      	mov	sp, r7
 8006edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee0:	4770      	bx	lr

08006ee2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ee2:	b480      	push	{r7}
 8006ee4:	b087      	sub	sp, #28
 8006ee6:	af00      	add	r7, sp, #0
 8006ee8:	60f8      	str	r0, [r7, #12]
 8006eea:	60b9      	str	r1, [r7, #8]
 8006eec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	6a1b      	ldr	r3, [r3, #32]
 8006ef2:	f023 0210 	bic.w	r2, r3, #16
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	699b      	ldr	r3, [r3, #24]
 8006efe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	6a1b      	ldr	r3, [r3, #32]
 8006f04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006f0c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	031b      	lsls	r3, r3, #12
 8006f12:	697a      	ldr	r2, [r7, #20]
 8006f14:	4313      	orrs	r3, r2
 8006f16:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006f1e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	011b      	lsls	r3, r3, #4
 8006f24:	693a      	ldr	r2, [r7, #16]
 8006f26:	4313      	orrs	r3, r2
 8006f28:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	697a      	ldr	r2, [r7, #20]
 8006f2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	693a      	ldr	r2, [r7, #16]
 8006f34:	621a      	str	r2, [r3, #32]
}
 8006f36:	bf00      	nop
 8006f38:	371c      	adds	r7, #28
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr

08006f42 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006f42:	b480      	push	{r7}
 8006f44:	b085      	sub	sp, #20
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	6078      	str	r0, [r7, #4]
 8006f4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	689b      	ldr	r3, [r3, #8]
 8006f50:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f58:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f5a:	683a      	ldr	r2, [r7, #0]
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	f043 0307 	orr.w	r3, r3, #7
 8006f64:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	68fa      	ldr	r2, [r7, #12]
 8006f6a:	609a      	str	r2, [r3, #8]
}
 8006f6c:	bf00      	nop
 8006f6e:	3714      	adds	r7, #20
 8006f70:	46bd      	mov	sp, r7
 8006f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f76:	4770      	bx	lr

08006f78 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b087      	sub	sp, #28
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	60f8      	str	r0, [r7, #12]
 8006f80:	60b9      	str	r1, [r7, #8]
 8006f82:	607a      	str	r2, [r7, #4]
 8006f84:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	689b      	ldr	r3, [r3, #8]
 8006f8a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f92:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	021a      	lsls	r2, r3, #8
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	431a      	orrs	r2, r3
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	697a      	ldr	r2, [r7, #20]
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	697a      	ldr	r2, [r7, #20]
 8006faa:	609a      	str	r2, [r3, #8]
}
 8006fac:	bf00      	nop
 8006fae:	371c      	adds	r7, #28
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr

08006fb8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b087      	sub	sp, #28
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	60f8      	str	r0, [r7, #12]
 8006fc0:	60b9      	str	r1, [r7, #8]
 8006fc2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	f003 031f 	and.w	r3, r3, #31
 8006fca:	2201      	movs	r2, #1
 8006fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8006fd0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	6a1a      	ldr	r2, [r3, #32]
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	43db      	mvns	r3, r3
 8006fda:	401a      	ands	r2, r3
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6a1a      	ldr	r2, [r3, #32]
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	f003 031f 	and.w	r3, r3, #31
 8006fea:	6879      	ldr	r1, [r7, #4]
 8006fec:	fa01 f303 	lsl.w	r3, r1, r3
 8006ff0:	431a      	orrs	r2, r3
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	621a      	str	r2, [r3, #32]
}
 8006ff6:	bf00      	nop
 8006ff8:	371c      	adds	r7, #28
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr
	...

08007004 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007004:	b480      	push	{r7}
 8007006:	b085      	sub	sp, #20
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007014:	2b01      	cmp	r3, #1
 8007016:	d101      	bne.n	800701c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007018:	2302      	movs	r3, #2
 800701a:	e04f      	b.n	80070bc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2201      	movs	r2, #1
 8007020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2202      	movs	r2, #2
 8007028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	689b      	ldr	r3, [r3, #8]
 800703a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a21      	ldr	r2, [pc, #132]	; (80070c8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d108      	bne.n	8007058 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800704c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	68fa      	ldr	r2, [r7, #12]
 8007054:	4313      	orrs	r3, r2
 8007056:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800705e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	68fa      	ldr	r2, [r7, #12]
 8007066:	4313      	orrs	r3, r2
 8007068:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	68fa      	ldr	r2, [r7, #12]
 8007070:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a14      	ldr	r2, [pc, #80]	; (80070c8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d009      	beq.n	8007090 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007084:	d004      	beq.n	8007090 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a10      	ldr	r2, [pc, #64]	; (80070cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d10c      	bne.n	80070aa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007096:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	68ba      	ldr	r2, [r7, #8]
 800709e:	4313      	orrs	r3, r2
 80070a0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	68ba      	ldr	r2, [r7, #8]
 80070a8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2201      	movs	r2, #1
 80070ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2200      	movs	r2, #0
 80070b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80070ba:	2300      	movs	r3, #0
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3714      	adds	r7, #20
 80070c0:	46bd      	mov	sp, r7
 80070c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c6:	4770      	bx	lr
 80070c8:	40012c00 	.word	0x40012c00
 80070cc:	40014000 	.word	0x40014000

080070d0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80070d0:	b480      	push	{r7}
 80070d2:	b085      	sub	sp, #20
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80070da:	2300      	movs	r3, #0
 80070dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070e4:	2b01      	cmp	r3, #1
 80070e6:	d101      	bne.n	80070ec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80070e8:	2302      	movs	r3, #2
 80070ea:	e060      	b.n	80071ae <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2201      	movs	r2, #1
 80070f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	68db      	ldr	r3, [r3, #12]
 80070fe:	4313      	orrs	r3, r2
 8007100:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	4313      	orrs	r3, r2
 800710e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	4313      	orrs	r3, r2
 800711c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4313      	orrs	r3, r2
 800712a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	691b      	ldr	r3, [r3, #16]
 8007136:	4313      	orrs	r3, r2
 8007138:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	695b      	ldr	r3, [r3, #20]
 8007144:	4313      	orrs	r3, r2
 8007146:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007152:	4313      	orrs	r3, r2
 8007154:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	699b      	ldr	r3, [r3, #24]
 8007160:	041b      	lsls	r3, r3, #16
 8007162:	4313      	orrs	r3, r2
 8007164:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a14      	ldr	r2, [pc, #80]	; (80071bc <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d115      	bne.n	800719c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800717a:	051b      	lsls	r3, r3, #20
 800717c:	4313      	orrs	r3, r2
 800717e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	69db      	ldr	r3, [r3, #28]
 800718a:	4313      	orrs	r3, r2
 800718c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	6a1b      	ldr	r3, [r3, #32]
 8007198:	4313      	orrs	r3, r2
 800719a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	68fa      	ldr	r2, [r7, #12]
 80071a2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2200      	movs	r2, #0
 80071a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80071ac:	2300      	movs	r3, #0
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3714      	adds	r7, #20
 80071b2:	46bd      	mov	sp, r7
 80071b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b8:	4770      	bx	lr
 80071ba:	bf00      	nop
 80071bc:	40012c00 	.word	0x40012c00

080071c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b082      	sub	sp, #8
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d101      	bne.n	80071d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80071ce:	2301      	movs	r3, #1
 80071d0:	e040      	b.n	8007254 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d106      	bne.n	80071e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2200      	movs	r2, #0
 80071de:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f7fb fa4e 	bl	8002684 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2224      	movs	r2, #36	; 0x24
 80071ec:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	681a      	ldr	r2, [r3, #0]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f022 0201 	bic.w	r2, r2, #1
 80071fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f000 f8b6 	bl	8007370 <UART_SetConfig>
 8007204:	4603      	mov	r3, r0
 8007206:	2b01      	cmp	r3, #1
 8007208:	d101      	bne.n	800720e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800720a:	2301      	movs	r3, #1
 800720c:	e022      	b.n	8007254 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007212:	2b00      	cmp	r3, #0
 8007214:	d002      	beq.n	800721c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f000 f9e0 	bl	80075dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	685a      	ldr	r2, [r3, #4]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800722a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	689a      	ldr	r2, [r3, #8]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800723a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	681a      	ldr	r2, [r3, #0]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f042 0201 	orr.w	r2, r2, #1
 800724a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f000 fa67 	bl	8007720 <UART_CheckIdleState>
 8007252:	4603      	mov	r3, r0
}
 8007254:	4618      	mov	r0, r3
 8007256:	3708      	adds	r7, #8
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}

0800725c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b08a      	sub	sp, #40	; 0x28
 8007260:	af02      	add	r7, sp, #8
 8007262:	60f8      	str	r0, [r7, #12]
 8007264:	60b9      	str	r1, [r7, #8]
 8007266:	603b      	str	r3, [r7, #0]
 8007268:	4613      	mov	r3, r2
 800726a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007270:	2b20      	cmp	r3, #32
 8007272:	d178      	bne.n	8007366 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d002      	beq.n	8007280 <HAL_UART_Transmit+0x24>
 800727a:	88fb      	ldrh	r3, [r7, #6]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d101      	bne.n	8007284 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007280:	2301      	movs	r3, #1
 8007282:	e071      	b.n	8007368 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	2200      	movs	r2, #0
 8007288:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	2221      	movs	r2, #33	; 0x21
 8007290:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007292:	f7fb fb8b 	bl	80029ac <HAL_GetTick>
 8007296:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	88fa      	ldrh	r2, [r7, #6]
 800729c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	88fa      	ldrh	r2, [r7, #6]
 80072a4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	689b      	ldr	r3, [r3, #8]
 80072ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072b0:	d108      	bne.n	80072c4 <HAL_UART_Transmit+0x68>
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	691b      	ldr	r3, [r3, #16]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d104      	bne.n	80072c4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80072ba:	2300      	movs	r3, #0
 80072bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	61bb      	str	r3, [r7, #24]
 80072c2:	e003      	b.n	80072cc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80072c8:	2300      	movs	r3, #0
 80072ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80072cc:	e030      	b.n	8007330 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	9300      	str	r3, [sp, #0]
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	2200      	movs	r2, #0
 80072d6:	2180      	movs	r1, #128	; 0x80
 80072d8:	68f8      	ldr	r0, [r7, #12]
 80072da:	f000 fac9 	bl	8007870 <UART_WaitOnFlagUntilTimeout>
 80072de:	4603      	mov	r3, r0
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d004      	beq.n	80072ee <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2220      	movs	r2, #32
 80072e8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80072ea:	2303      	movs	r3, #3
 80072ec:	e03c      	b.n	8007368 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80072ee:	69fb      	ldr	r3, [r7, #28]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d10b      	bne.n	800730c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80072f4:	69bb      	ldr	r3, [r7, #24]
 80072f6:	881a      	ldrh	r2, [r3, #0]
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007300:	b292      	uxth	r2, r2
 8007302:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007304:	69bb      	ldr	r3, [r7, #24]
 8007306:	3302      	adds	r3, #2
 8007308:	61bb      	str	r3, [r7, #24]
 800730a:	e008      	b.n	800731e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800730c:	69fb      	ldr	r3, [r7, #28]
 800730e:	781a      	ldrb	r2, [r3, #0]
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	b292      	uxth	r2, r2
 8007316:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007318:	69fb      	ldr	r3, [r7, #28]
 800731a:	3301      	adds	r3, #1
 800731c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007324:	b29b      	uxth	r3, r3
 8007326:	3b01      	subs	r3, #1
 8007328:	b29a      	uxth	r2, r3
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007336:	b29b      	uxth	r3, r3
 8007338:	2b00      	cmp	r3, #0
 800733a:	d1c8      	bne.n	80072ce <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	9300      	str	r3, [sp, #0]
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	2200      	movs	r2, #0
 8007344:	2140      	movs	r1, #64	; 0x40
 8007346:	68f8      	ldr	r0, [r7, #12]
 8007348:	f000 fa92 	bl	8007870 <UART_WaitOnFlagUntilTimeout>
 800734c:	4603      	mov	r3, r0
 800734e:	2b00      	cmp	r3, #0
 8007350:	d004      	beq.n	800735c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2220      	movs	r2, #32
 8007356:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8007358:	2303      	movs	r3, #3
 800735a:	e005      	b.n	8007368 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	2220      	movs	r2, #32
 8007360:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007362:	2300      	movs	r3, #0
 8007364:	e000      	b.n	8007368 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8007366:	2302      	movs	r3, #2
  }
}
 8007368:	4618      	mov	r0, r3
 800736a:	3720      	adds	r7, #32
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}

08007370 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b088      	sub	sp, #32
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007378:	2300      	movs	r3, #0
 800737a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	689a      	ldr	r2, [r3, #8]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	691b      	ldr	r3, [r3, #16]
 8007384:	431a      	orrs	r2, r3
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	695b      	ldr	r3, [r3, #20]
 800738a:	431a      	orrs	r2, r3
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	69db      	ldr	r3, [r3, #28]
 8007390:	4313      	orrs	r3, r2
 8007392:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	681a      	ldr	r2, [r3, #0]
 800739a:	4b8a      	ldr	r3, [pc, #552]	; (80075c4 <UART_SetConfig+0x254>)
 800739c:	4013      	ands	r3, r2
 800739e:	687a      	ldr	r2, [r7, #4]
 80073a0:	6812      	ldr	r2, [r2, #0]
 80073a2:	6979      	ldr	r1, [r7, #20]
 80073a4:	430b      	orrs	r3, r1
 80073a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	68da      	ldr	r2, [r3, #12]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	430a      	orrs	r2, r1
 80073bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	699b      	ldr	r3, [r3, #24]
 80073c2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6a1b      	ldr	r3, [r3, #32]
 80073c8:	697a      	ldr	r2, [r7, #20]
 80073ca:	4313      	orrs	r3, r2
 80073cc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	689b      	ldr	r3, [r3, #8]
 80073d4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	697a      	ldr	r2, [r7, #20]
 80073de:	430a      	orrs	r2, r1
 80073e0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4a78      	ldr	r2, [pc, #480]	; (80075c8 <UART_SetConfig+0x258>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d120      	bne.n	800742e <UART_SetConfig+0xbe>
 80073ec:	4b77      	ldr	r3, [pc, #476]	; (80075cc <UART_SetConfig+0x25c>)
 80073ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073f0:	f003 0303 	and.w	r3, r3, #3
 80073f4:	2b03      	cmp	r3, #3
 80073f6:	d817      	bhi.n	8007428 <UART_SetConfig+0xb8>
 80073f8:	a201      	add	r2, pc, #4	; (adr r2, 8007400 <UART_SetConfig+0x90>)
 80073fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073fe:	bf00      	nop
 8007400:	08007411 	.word	0x08007411
 8007404:	0800741d 	.word	0x0800741d
 8007408:	08007423 	.word	0x08007423
 800740c:	08007417 	.word	0x08007417
 8007410:	2300      	movs	r3, #0
 8007412:	77fb      	strb	r3, [r7, #31]
 8007414:	e01d      	b.n	8007452 <UART_SetConfig+0xe2>
 8007416:	2302      	movs	r3, #2
 8007418:	77fb      	strb	r3, [r7, #31]
 800741a:	e01a      	b.n	8007452 <UART_SetConfig+0xe2>
 800741c:	2304      	movs	r3, #4
 800741e:	77fb      	strb	r3, [r7, #31]
 8007420:	e017      	b.n	8007452 <UART_SetConfig+0xe2>
 8007422:	2308      	movs	r3, #8
 8007424:	77fb      	strb	r3, [r7, #31]
 8007426:	e014      	b.n	8007452 <UART_SetConfig+0xe2>
 8007428:	2310      	movs	r3, #16
 800742a:	77fb      	strb	r3, [r7, #31]
 800742c:	e011      	b.n	8007452 <UART_SetConfig+0xe2>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4a67      	ldr	r2, [pc, #412]	; (80075d0 <UART_SetConfig+0x260>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d102      	bne.n	800743e <UART_SetConfig+0xce>
 8007438:	2300      	movs	r3, #0
 800743a:	77fb      	strb	r3, [r7, #31]
 800743c:	e009      	b.n	8007452 <UART_SetConfig+0xe2>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a64      	ldr	r2, [pc, #400]	; (80075d4 <UART_SetConfig+0x264>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d102      	bne.n	800744e <UART_SetConfig+0xde>
 8007448:	2300      	movs	r3, #0
 800744a:	77fb      	strb	r3, [r7, #31]
 800744c:	e001      	b.n	8007452 <UART_SetConfig+0xe2>
 800744e:	2310      	movs	r3, #16
 8007450:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	69db      	ldr	r3, [r3, #28]
 8007456:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800745a:	d15a      	bne.n	8007512 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 800745c:	7ffb      	ldrb	r3, [r7, #31]
 800745e:	2b08      	cmp	r3, #8
 8007460:	d827      	bhi.n	80074b2 <UART_SetConfig+0x142>
 8007462:	a201      	add	r2, pc, #4	; (adr r2, 8007468 <UART_SetConfig+0xf8>)
 8007464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007468:	0800748d 	.word	0x0800748d
 800746c:	08007495 	.word	0x08007495
 8007470:	0800749d 	.word	0x0800749d
 8007474:	080074b3 	.word	0x080074b3
 8007478:	080074a3 	.word	0x080074a3
 800747c:	080074b3 	.word	0x080074b3
 8007480:	080074b3 	.word	0x080074b3
 8007484:	080074b3 	.word	0x080074b3
 8007488:	080074ab 	.word	0x080074ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800748c:	f7fe f826 	bl	80054dc <HAL_RCC_GetPCLK1Freq>
 8007490:	61b8      	str	r0, [r7, #24]
        break;
 8007492:	e013      	b.n	80074bc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007494:	f7fe f844 	bl	8005520 <HAL_RCC_GetPCLK2Freq>
 8007498:	61b8      	str	r0, [r7, #24]
        break;
 800749a:	e00f      	b.n	80074bc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800749c:	4b4e      	ldr	r3, [pc, #312]	; (80075d8 <UART_SetConfig+0x268>)
 800749e:	61bb      	str	r3, [r7, #24]
        break;
 80074a0:	e00c      	b.n	80074bc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80074a2:	f7fd ffa5 	bl	80053f0 <HAL_RCC_GetSysClockFreq>
 80074a6:	61b8      	str	r0, [r7, #24]
        break;
 80074a8:	e008      	b.n	80074bc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80074ae:	61bb      	str	r3, [r7, #24]
        break;
 80074b0:	e004      	b.n	80074bc <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80074b2:	2300      	movs	r3, #0
 80074b4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80074b6:	2301      	movs	r3, #1
 80074b8:	77bb      	strb	r3, [r7, #30]
        break;
 80074ba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80074bc:	69bb      	ldr	r3, [r7, #24]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d074      	beq.n	80075ac <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80074c2:	69bb      	ldr	r3, [r7, #24]
 80074c4:	005a      	lsls	r2, r3, #1
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	685b      	ldr	r3, [r3, #4]
 80074ca:	085b      	lsrs	r3, r3, #1
 80074cc:	441a      	add	r2, r3
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80074d6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	2b0f      	cmp	r3, #15
 80074dc:	d916      	bls.n	800750c <UART_SetConfig+0x19c>
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074e4:	d212      	bcs.n	800750c <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	b29b      	uxth	r3, r3
 80074ea:	f023 030f 	bic.w	r3, r3, #15
 80074ee:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	085b      	lsrs	r3, r3, #1
 80074f4:	b29b      	uxth	r3, r3
 80074f6:	f003 0307 	and.w	r3, r3, #7
 80074fa:	b29a      	uxth	r2, r3
 80074fc:	89fb      	ldrh	r3, [r7, #14]
 80074fe:	4313      	orrs	r3, r2
 8007500:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	89fa      	ldrh	r2, [r7, #14]
 8007508:	60da      	str	r2, [r3, #12]
 800750a:	e04f      	b.n	80075ac <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800750c:	2301      	movs	r3, #1
 800750e:	77bb      	strb	r3, [r7, #30]
 8007510:	e04c      	b.n	80075ac <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007512:	7ffb      	ldrb	r3, [r7, #31]
 8007514:	2b08      	cmp	r3, #8
 8007516:	d828      	bhi.n	800756a <UART_SetConfig+0x1fa>
 8007518:	a201      	add	r2, pc, #4	; (adr r2, 8007520 <UART_SetConfig+0x1b0>)
 800751a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800751e:	bf00      	nop
 8007520:	08007545 	.word	0x08007545
 8007524:	0800754d 	.word	0x0800754d
 8007528:	08007555 	.word	0x08007555
 800752c:	0800756b 	.word	0x0800756b
 8007530:	0800755b 	.word	0x0800755b
 8007534:	0800756b 	.word	0x0800756b
 8007538:	0800756b 	.word	0x0800756b
 800753c:	0800756b 	.word	0x0800756b
 8007540:	08007563 	.word	0x08007563
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007544:	f7fd ffca 	bl	80054dc <HAL_RCC_GetPCLK1Freq>
 8007548:	61b8      	str	r0, [r7, #24]
        break;
 800754a:	e013      	b.n	8007574 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800754c:	f7fd ffe8 	bl	8005520 <HAL_RCC_GetPCLK2Freq>
 8007550:	61b8      	str	r0, [r7, #24]
        break;
 8007552:	e00f      	b.n	8007574 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007554:	4b20      	ldr	r3, [pc, #128]	; (80075d8 <UART_SetConfig+0x268>)
 8007556:	61bb      	str	r3, [r7, #24]
        break;
 8007558:	e00c      	b.n	8007574 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800755a:	f7fd ff49 	bl	80053f0 <HAL_RCC_GetSysClockFreq>
 800755e:	61b8      	str	r0, [r7, #24]
        break;
 8007560:	e008      	b.n	8007574 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007562:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007566:	61bb      	str	r3, [r7, #24]
        break;
 8007568:	e004      	b.n	8007574 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800756a:	2300      	movs	r3, #0
 800756c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800756e:	2301      	movs	r3, #1
 8007570:	77bb      	strb	r3, [r7, #30]
        break;
 8007572:	bf00      	nop
    }

    if (pclk != 0U)
 8007574:	69bb      	ldr	r3, [r7, #24]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d018      	beq.n	80075ac <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	085a      	lsrs	r2, r3, #1
 8007580:	69bb      	ldr	r3, [r7, #24]
 8007582:	441a      	add	r2, r3
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	685b      	ldr	r3, [r3, #4]
 8007588:	fbb2 f3f3 	udiv	r3, r2, r3
 800758c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	2b0f      	cmp	r3, #15
 8007592:	d909      	bls.n	80075a8 <UART_SetConfig+0x238>
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800759a:	d205      	bcs.n	80075a8 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800759c:	693b      	ldr	r3, [r7, #16]
 800759e:	b29a      	uxth	r2, r3
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	60da      	str	r2, [r3, #12]
 80075a6:	e001      	b.n	80075ac <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80075a8:	2301      	movs	r3, #1
 80075aa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2200      	movs	r2, #0
 80075b0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2200      	movs	r2, #0
 80075b6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80075b8:	7fbb      	ldrb	r3, [r7, #30]
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3720      	adds	r7, #32
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}
 80075c2:	bf00      	nop
 80075c4:	efff69f3 	.word	0xefff69f3
 80075c8:	40013800 	.word	0x40013800
 80075cc:	40021000 	.word	0x40021000
 80075d0:	40004400 	.word	0x40004400
 80075d4:	40004800 	.word	0x40004800
 80075d8:	007a1200 	.word	0x007a1200

080075dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80075dc:	b480      	push	{r7}
 80075de:	b083      	sub	sp, #12
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e8:	f003 0301 	and.w	r3, r3, #1
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d00a      	beq.n	8007606 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	685b      	ldr	r3, [r3, #4]
 80075f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	430a      	orrs	r2, r1
 8007604:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800760a:	f003 0302 	and.w	r3, r3, #2
 800760e:	2b00      	cmp	r3, #0
 8007610:	d00a      	beq.n	8007628 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	430a      	orrs	r2, r1
 8007626:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800762c:	f003 0304 	and.w	r3, r3, #4
 8007630:	2b00      	cmp	r3, #0
 8007632:	d00a      	beq.n	800764a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	685b      	ldr	r3, [r3, #4]
 800763a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	430a      	orrs	r2, r1
 8007648:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800764e:	f003 0308 	and.w	r3, r3, #8
 8007652:	2b00      	cmp	r3, #0
 8007654:	d00a      	beq.n	800766c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	430a      	orrs	r2, r1
 800766a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007670:	f003 0310 	and.w	r3, r3, #16
 8007674:	2b00      	cmp	r3, #0
 8007676:	d00a      	beq.n	800768e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	430a      	orrs	r2, r1
 800768c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007692:	f003 0320 	and.w	r3, r3, #32
 8007696:	2b00      	cmp	r3, #0
 8007698:	d00a      	beq.n	80076b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	689b      	ldr	r3, [r3, #8]
 80076a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	430a      	orrs	r2, r1
 80076ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d01a      	beq.n	80076f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	685b      	ldr	r3, [r3, #4]
 80076c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	430a      	orrs	r2, r1
 80076d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80076da:	d10a      	bne.n	80076f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	685b      	ldr	r3, [r3, #4]
 80076e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	430a      	orrs	r2, r1
 80076f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d00a      	beq.n	8007714 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	685b      	ldr	r3, [r3, #4]
 8007704:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	430a      	orrs	r2, r1
 8007712:	605a      	str	r2, [r3, #4]
  }
}
 8007714:	bf00      	nop
 8007716:	370c      	adds	r7, #12
 8007718:	46bd      	mov	sp, r7
 800771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771e:	4770      	bx	lr

08007720 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b098      	sub	sp, #96	; 0x60
 8007724:	af02      	add	r7, sp, #8
 8007726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2200      	movs	r2, #0
 800772c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007730:	f7fb f93c 	bl	80029ac <HAL_GetTick>
 8007734:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f003 0308 	and.w	r3, r3, #8
 8007740:	2b08      	cmp	r3, #8
 8007742:	d12e      	bne.n	80077a2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007744:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007748:	9300      	str	r3, [sp, #0]
 800774a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800774c:	2200      	movs	r2, #0
 800774e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f000 f88c 	bl	8007870 <UART_WaitOnFlagUntilTimeout>
 8007758:	4603      	mov	r3, r0
 800775a:	2b00      	cmp	r3, #0
 800775c:	d021      	beq.n	80077a2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007766:	e853 3f00 	ldrex	r3, [r3]
 800776a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800776c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800776e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007772:	653b      	str	r3, [r7, #80]	; 0x50
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	461a      	mov	r2, r3
 800777a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800777c:	647b      	str	r3, [r7, #68]	; 0x44
 800777e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007780:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007782:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007784:	e841 2300 	strex	r3, r2, [r1]
 8007788:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800778a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800778c:	2b00      	cmp	r3, #0
 800778e:	d1e6      	bne.n	800775e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2220      	movs	r2, #32
 8007794:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2200      	movs	r2, #0
 800779a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800779e:	2303      	movs	r3, #3
 80077a0:	e062      	b.n	8007868 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f003 0304 	and.w	r3, r3, #4
 80077ac:	2b04      	cmp	r3, #4
 80077ae:	d149      	bne.n	8007844 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80077b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80077b4:	9300      	str	r3, [sp, #0]
 80077b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80077b8:	2200      	movs	r2, #0
 80077ba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f000 f856 	bl	8007870 <UART_WaitOnFlagUntilTimeout>
 80077c4:	4603      	mov	r3, r0
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d03c      	beq.n	8007844 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d2:	e853 3f00 	ldrex	r3, [r3]
 80077d6:	623b      	str	r3, [r7, #32]
   return(result);
 80077d8:	6a3b      	ldr	r3, [r7, #32]
 80077da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80077de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	461a      	mov	r2, r3
 80077e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077e8:	633b      	str	r3, [r7, #48]	; 0x30
 80077ea:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80077ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077f0:	e841 2300 	strex	r3, r2, [r1]
 80077f4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80077f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d1e6      	bne.n	80077ca <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	3308      	adds	r3, #8
 8007802:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	e853 3f00 	ldrex	r3, [r3]
 800780a:	60fb      	str	r3, [r7, #12]
   return(result);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f023 0301 	bic.w	r3, r3, #1
 8007812:	64bb      	str	r3, [r7, #72]	; 0x48
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	3308      	adds	r3, #8
 800781a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800781c:	61fa      	str	r2, [r7, #28]
 800781e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007820:	69b9      	ldr	r1, [r7, #24]
 8007822:	69fa      	ldr	r2, [r7, #28]
 8007824:	e841 2300 	strex	r3, r2, [r1]
 8007828:	617b      	str	r3, [r7, #20]
   return(result);
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d1e5      	bne.n	80077fc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2220      	movs	r2, #32
 8007834:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2200      	movs	r2, #0
 800783c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007840:	2303      	movs	r3, #3
 8007842:	e011      	b.n	8007868 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2220      	movs	r2, #32
 8007848:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2220      	movs	r2, #32
 800784e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2200      	movs	r2, #0
 8007856:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2200      	movs	r2, #0
 800785c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2200      	movs	r2, #0
 8007862:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007866:	2300      	movs	r3, #0
}
 8007868:	4618      	mov	r0, r3
 800786a:	3758      	adds	r7, #88	; 0x58
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}

08007870 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b084      	sub	sp, #16
 8007874:	af00      	add	r7, sp, #0
 8007876:	60f8      	str	r0, [r7, #12]
 8007878:	60b9      	str	r1, [r7, #8]
 800787a:	603b      	str	r3, [r7, #0]
 800787c:	4613      	mov	r3, r2
 800787e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007880:	e049      	b.n	8007916 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007882:	69bb      	ldr	r3, [r7, #24]
 8007884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007888:	d045      	beq.n	8007916 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800788a:	f7fb f88f 	bl	80029ac <HAL_GetTick>
 800788e:	4602      	mov	r2, r0
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	1ad3      	subs	r3, r2, r3
 8007894:	69ba      	ldr	r2, [r7, #24]
 8007896:	429a      	cmp	r2, r3
 8007898:	d302      	bcc.n	80078a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800789a:	69bb      	ldr	r3, [r7, #24]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d101      	bne.n	80078a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80078a0:	2303      	movs	r3, #3
 80078a2:	e048      	b.n	8007936 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f003 0304 	and.w	r3, r3, #4
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d031      	beq.n	8007916 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	69db      	ldr	r3, [r3, #28]
 80078b8:	f003 0308 	and.w	r3, r3, #8
 80078bc:	2b08      	cmp	r3, #8
 80078be:	d110      	bne.n	80078e2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	2208      	movs	r2, #8
 80078c6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80078c8:	68f8      	ldr	r0, [r7, #12]
 80078ca:	f000 f838 	bl	800793e <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2208      	movs	r2, #8
 80078d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	2200      	movs	r2, #0
 80078da:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80078de:	2301      	movs	r3, #1
 80078e0:	e029      	b.n	8007936 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	69db      	ldr	r3, [r3, #28]
 80078e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80078ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078f0:	d111      	bne.n	8007916 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80078fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80078fc:	68f8      	ldr	r0, [r7, #12]
 80078fe:	f000 f81e 	bl	800793e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	2220      	movs	r2, #32
 8007906:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	2200      	movs	r2, #0
 800790e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007912:	2303      	movs	r3, #3
 8007914:	e00f      	b.n	8007936 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	69da      	ldr	r2, [r3, #28]
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	4013      	ands	r3, r2
 8007920:	68ba      	ldr	r2, [r7, #8]
 8007922:	429a      	cmp	r2, r3
 8007924:	bf0c      	ite	eq
 8007926:	2301      	moveq	r3, #1
 8007928:	2300      	movne	r3, #0
 800792a:	b2db      	uxtb	r3, r3
 800792c:	461a      	mov	r2, r3
 800792e:	79fb      	ldrb	r3, [r7, #7]
 8007930:	429a      	cmp	r2, r3
 8007932:	d0a6      	beq.n	8007882 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007934:	2300      	movs	r3, #0
}
 8007936:	4618      	mov	r0, r3
 8007938:	3710      	adds	r7, #16
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}

0800793e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800793e:	b480      	push	{r7}
 8007940:	b095      	sub	sp, #84	; 0x54
 8007942:	af00      	add	r7, sp, #0
 8007944:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800794c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800794e:	e853 3f00 	ldrex	r3, [r3]
 8007952:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007956:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800795a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	461a      	mov	r2, r3
 8007962:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007964:	643b      	str	r3, [r7, #64]	; 0x40
 8007966:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007968:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800796a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800796c:	e841 2300 	strex	r3, r2, [r1]
 8007970:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007974:	2b00      	cmp	r3, #0
 8007976:	d1e6      	bne.n	8007946 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	3308      	adds	r3, #8
 800797e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007980:	6a3b      	ldr	r3, [r7, #32]
 8007982:	e853 3f00 	ldrex	r3, [r3]
 8007986:	61fb      	str	r3, [r7, #28]
   return(result);
 8007988:	69fb      	ldr	r3, [r7, #28]
 800798a:	f023 0301 	bic.w	r3, r3, #1
 800798e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	3308      	adds	r3, #8
 8007996:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007998:	62fa      	str	r2, [r7, #44]	; 0x2c
 800799a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800799c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800799e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079a0:	e841 2300 	strex	r3, r2, [r1]
 80079a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80079a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d1e5      	bne.n	8007978 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079b0:	2b01      	cmp	r3, #1
 80079b2:	d118      	bne.n	80079e6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	e853 3f00 	ldrex	r3, [r3]
 80079c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	f023 0310 	bic.w	r3, r3, #16
 80079c8:	647b      	str	r3, [r7, #68]	; 0x44
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	461a      	mov	r2, r3
 80079d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079d2:	61bb      	str	r3, [r7, #24]
 80079d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079d6:	6979      	ldr	r1, [r7, #20]
 80079d8:	69ba      	ldr	r2, [r7, #24]
 80079da:	e841 2300 	strex	r3, r2, [r1]
 80079de:	613b      	str	r3, [r7, #16]
   return(result);
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d1e6      	bne.n	80079b4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2220      	movs	r2, #32
 80079ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2200      	movs	r2, #0
 80079f2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2200      	movs	r2, #0
 80079f8:	669a      	str	r2, [r3, #104]	; 0x68
}
 80079fa:	bf00      	nop
 80079fc:	3754      	adds	r7, #84	; 0x54
 80079fe:	46bd      	mov	sp, r7
 8007a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a04:	4770      	bx	lr
	...

08007a08 <__errno>:
 8007a08:	4b01      	ldr	r3, [pc, #4]	; (8007a10 <__errno+0x8>)
 8007a0a:	6818      	ldr	r0, [r3, #0]
 8007a0c:	4770      	bx	lr
 8007a0e:	bf00      	nop
 8007a10:	20002788 	.word	0x20002788

08007a14 <__libc_init_array>:
 8007a14:	b570      	push	{r4, r5, r6, lr}
 8007a16:	4d0d      	ldr	r5, [pc, #52]	; (8007a4c <__libc_init_array+0x38>)
 8007a18:	4c0d      	ldr	r4, [pc, #52]	; (8007a50 <__libc_init_array+0x3c>)
 8007a1a:	1b64      	subs	r4, r4, r5
 8007a1c:	10a4      	asrs	r4, r4, #2
 8007a1e:	2600      	movs	r6, #0
 8007a20:	42a6      	cmp	r6, r4
 8007a22:	d109      	bne.n	8007a38 <__libc_init_array+0x24>
 8007a24:	4d0b      	ldr	r5, [pc, #44]	; (8007a54 <__libc_init_array+0x40>)
 8007a26:	4c0c      	ldr	r4, [pc, #48]	; (8007a58 <__libc_init_array+0x44>)
 8007a28:	f001 f824 	bl	8008a74 <_init>
 8007a2c:	1b64      	subs	r4, r4, r5
 8007a2e:	10a4      	asrs	r4, r4, #2
 8007a30:	2600      	movs	r6, #0
 8007a32:	42a6      	cmp	r6, r4
 8007a34:	d105      	bne.n	8007a42 <__libc_init_array+0x2e>
 8007a36:	bd70      	pop	{r4, r5, r6, pc}
 8007a38:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a3c:	4798      	blx	r3
 8007a3e:	3601      	adds	r6, #1
 8007a40:	e7ee      	b.n	8007a20 <__libc_init_array+0xc>
 8007a42:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a46:	4798      	blx	r3
 8007a48:	3601      	adds	r6, #1
 8007a4a:	e7f2      	b.n	8007a32 <__libc_init_array+0x1e>
 8007a4c:	08009084 	.word	0x08009084
 8007a50:	08009084 	.word	0x08009084
 8007a54:	08009084 	.word	0x08009084
 8007a58:	08009088 	.word	0x08009088

08007a5c <memset>:
 8007a5c:	4402      	add	r2, r0
 8007a5e:	4603      	mov	r3, r0
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d100      	bne.n	8007a66 <memset+0xa>
 8007a64:	4770      	bx	lr
 8007a66:	f803 1b01 	strb.w	r1, [r3], #1
 8007a6a:	e7f9      	b.n	8007a60 <memset+0x4>

08007a6c <iprintf>:
 8007a6c:	b40f      	push	{r0, r1, r2, r3}
 8007a6e:	4b0a      	ldr	r3, [pc, #40]	; (8007a98 <iprintf+0x2c>)
 8007a70:	b513      	push	{r0, r1, r4, lr}
 8007a72:	681c      	ldr	r4, [r3, #0]
 8007a74:	b124      	cbz	r4, 8007a80 <iprintf+0x14>
 8007a76:	69a3      	ldr	r3, [r4, #24]
 8007a78:	b913      	cbnz	r3, 8007a80 <iprintf+0x14>
 8007a7a:	4620      	mov	r0, r4
 8007a7c:	f000 fa5e 	bl	8007f3c <__sinit>
 8007a80:	ab05      	add	r3, sp, #20
 8007a82:	9a04      	ldr	r2, [sp, #16]
 8007a84:	68a1      	ldr	r1, [r4, #8]
 8007a86:	9301      	str	r3, [sp, #4]
 8007a88:	4620      	mov	r0, r4
 8007a8a:	f000 fc67 	bl	800835c <_vfiprintf_r>
 8007a8e:	b002      	add	sp, #8
 8007a90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a94:	b004      	add	sp, #16
 8007a96:	4770      	bx	lr
 8007a98:	20002788 	.word	0x20002788

08007a9c <_puts_r>:
 8007a9c:	b570      	push	{r4, r5, r6, lr}
 8007a9e:	460e      	mov	r6, r1
 8007aa0:	4605      	mov	r5, r0
 8007aa2:	b118      	cbz	r0, 8007aac <_puts_r+0x10>
 8007aa4:	6983      	ldr	r3, [r0, #24]
 8007aa6:	b90b      	cbnz	r3, 8007aac <_puts_r+0x10>
 8007aa8:	f000 fa48 	bl	8007f3c <__sinit>
 8007aac:	69ab      	ldr	r3, [r5, #24]
 8007aae:	68ac      	ldr	r4, [r5, #8]
 8007ab0:	b913      	cbnz	r3, 8007ab8 <_puts_r+0x1c>
 8007ab2:	4628      	mov	r0, r5
 8007ab4:	f000 fa42 	bl	8007f3c <__sinit>
 8007ab8:	4b2c      	ldr	r3, [pc, #176]	; (8007b6c <_puts_r+0xd0>)
 8007aba:	429c      	cmp	r4, r3
 8007abc:	d120      	bne.n	8007b00 <_puts_r+0x64>
 8007abe:	686c      	ldr	r4, [r5, #4]
 8007ac0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ac2:	07db      	lsls	r3, r3, #31
 8007ac4:	d405      	bmi.n	8007ad2 <_puts_r+0x36>
 8007ac6:	89a3      	ldrh	r3, [r4, #12]
 8007ac8:	0598      	lsls	r0, r3, #22
 8007aca:	d402      	bmi.n	8007ad2 <_puts_r+0x36>
 8007acc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ace:	f000 fad3 	bl	8008078 <__retarget_lock_acquire_recursive>
 8007ad2:	89a3      	ldrh	r3, [r4, #12]
 8007ad4:	0719      	lsls	r1, r3, #28
 8007ad6:	d51d      	bpl.n	8007b14 <_puts_r+0x78>
 8007ad8:	6923      	ldr	r3, [r4, #16]
 8007ada:	b1db      	cbz	r3, 8007b14 <_puts_r+0x78>
 8007adc:	3e01      	subs	r6, #1
 8007ade:	68a3      	ldr	r3, [r4, #8]
 8007ae0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007ae4:	3b01      	subs	r3, #1
 8007ae6:	60a3      	str	r3, [r4, #8]
 8007ae8:	bb39      	cbnz	r1, 8007b3a <_puts_r+0x9e>
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	da38      	bge.n	8007b60 <_puts_r+0xc4>
 8007aee:	4622      	mov	r2, r4
 8007af0:	210a      	movs	r1, #10
 8007af2:	4628      	mov	r0, r5
 8007af4:	f000 f848 	bl	8007b88 <__swbuf_r>
 8007af8:	3001      	adds	r0, #1
 8007afa:	d011      	beq.n	8007b20 <_puts_r+0x84>
 8007afc:	250a      	movs	r5, #10
 8007afe:	e011      	b.n	8007b24 <_puts_r+0x88>
 8007b00:	4b1b      	ldr	r3, [pc, #108]	; (8007b70 <_puts_r+0xd4>)
 8007b02:	429c      	cmp	r4, r3
 8007b04:	d101      	bne.n	8007b0a <_puts_r+0x6e>
 8007b06:	68ac      	ldr	r4, [r5, #8]
 8007b08:	e7da      	b.n	8007ac0 <_puts_r+0x24>
 8007b0a:	4b1a      	ldr	r3, [pc, #104]	; (8007b74 <_puts_r+0xd8>)
 8007b0c:	429c      	cmp	r4, r3
 8007b0e:	bf08      	it	eq
 8007b10:	68ec      	ldreq	r4, [r5, #12]
 8007b12:	e7d5      	b.n	8007ac0 <_puts_r+0x24>
 8007b14:	4621      	mov	r1, r4
 8007b16:	4628      	mov	r0, r5
 8007b18:	f000 f888 	bl	8007c2c <__swsetup_r>
 8007b1c:	2800      	cmp	r0, #0
 8007b1e:	d0dd      	beq.n	8007adc <_puts_r+0x40>
 8007b20:	f04f 35ff 	mov.w	r5, #4294967295
 8007b24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b26:	07da      	lsls	r2, r3, #31
 8007b28:	d405      	bmi.n	8007b36 <_puts_r+0x9a>
 8007b2a:	89a3      	ldrh	r3, [r4, #12]
 8007b2c:	059b      	lsls	r3, r3, #22
 8007b2e:	d402      	bmi.n	8007b36 <_puts_r+0x9a>
 8007b30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b32:	f000 faa2 	bl	800807a <__retarget_lock_release_recursive>
 8007b36:	4628      	mov	r0, r5
 8007b38:	bd70      	pop	{r4, r5, r6, pc}
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	da04      	bge.n	8007b48 <_puts_r+0xac>
 8007b3e:	69a2      	ldr	r2, [r4, #24]
 8007b40:	429a      	cmp	r2, r3
 8007b42:	dc06      	bgt.n	8007b52 <_puts_r+0xb6>
 8007b44:	290a      	cmp	r1, #10
 8007b46:	d004      	beq.n	8007b52 <_puts_r+0xb6>
 8007b48:	6823      	ldr	r3, [r4, #0]
 8007b4a:	1c5a      	adds	r2, r3, #1
 8007b4c:	6022      	str	r2, [r4, #0]
 8007b4e:	7019      	strb	r1, [r3, #0]
 8007b50:	e7c5      	b.n	8007ade <_puts_r+0x42>
 8007b52:	4622      	mov	r2, r4
 8007b54:	4628      	mov	r0, r5
 8007b56:	f000 f817 	bl	8007b88 <__swbuf_r>
 8007b5a:	3001      	adds	r0, #1
 8007b5c:	d1bf      	bne.n	8007ade <_puts_r+0x42>
 8007b5e:	e7df      	b.n	8007b20 <_puts_r+0x84>
 8007b60:	6823      	ldr	r3, [r4, #0]
 8007b62:	250a      	movs	r5, #10
 8007b64:	1c5a      	adds	r2, r3, #1
 8007b66:	6022      	str	r2, [r4, #0]
 8007b68:	701d      	strb	r5, [r3, #0]
 8007b6a:	e7db      	b.n	8007b24 <_puts_r+0x88>
 8007b6c:	08009010 	.word	0x08009010
 8007b70:	08009030 	.word	0x08009030
 8007b74:	08008ff0 	.word	0x08008ff0

08007b78 <puts>:
 8007b78:	4b02      	ldr	r3, [pc, #8]	; (8007b84 <puts+0xc>)
 8007b7a:	4601      	mov	r1, r0
 8007b7c:	6818      	ldr	r0, [r3, #0]
 8007b7e:	f7ff bf8d 	b.w	8007a9c <_puts_r>
 8007b82:	bf00      	nop
 8007b84:	20002788 	.word	0x20002788

08007b88 <__swbuf_r>:
 8007b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b8a:	460e      	mov	r6, r1
 8007b8c:	4614      	mov	r4, r2
 8007b8e:	4605      	mov	r5, r0
 8007b90:	b118      	cbz	r0, 8007b9a <__swbuf_r+0x12>
 8007b92:	6983      	ldr	r3, [r0, #24]
 8007b94:	b90b      	cbnz	r3, 8007b9a <__swbuf_r+0x12>
 8007b96:	f000 f9d1 	bl	8007f3c <__sinit>
 8007b9a:	4b21      	ldr	r3, [pc, #132]	; (8007c20 <__swbuf_r+0x98>)
 8007b9c:	429c      	cmp	r4, r3
 8007b9e:	d12b      	bne.n	8007bf8 <__swbuf_r+0x70>
 8007ba0:	686c      	ldr	r4, [r5, #4]
 8007ba2:	69a3      	ldr	r3, [r4, #24]
 8007ba4:	60a3      	str	r3, [r4, #8]
 8007ba6:	89a3      	ldrh	r3, [r4, #12]
 8007ba8:	071a      	lsls	r2, r3, #28
 8007baa:	d52f      	bpl.n	8007c0c <__swbuf_r+0x84>
 8007bac:	6923      	ldr	r3, [r4, #16]
 8007bae:	b36b      	cbz	r3, 8007c0c <__swbuf_r+0x84>
 8007bb0:	6923      	ldr	r3, [r4, #16]
 8007bb2:	6820      	ldr	r0, [r4, #0]
 8007bb4:	1ac0      	subs	r0, r0, r3
 8007bb6:	6963      	ldr	r3, [r4, #20]
 8007bb8:	b2f6      	uxtb	r6, r6
 8007bba:	4283      	cmp	r3, r0
 8007bbc:	4637      	mov	r7, r6
 8007bbe:	dc04      	bgt.n	8007bca <__swbuf_r+0x42>
 8007bc0:	4621      	mov	r1, r4
 8007bc2:	4628      	mov	r0, r5
 8007bc4:	f000 f926 	bl	8007e14 <_fflush_r>
 8007bc8:	bb30      	cbnz	r0, 8007c18 <__swbuf_r+0x90>
 8007bca:	68a3      	ldr	r3, [r4, #8]
 8007bcc:	3b01      	subs	r3, #1
 8007bce:	60a3      	str	r3, [r4, #8]
 8007bd0:	6823      	ldr	r3, [r4, #0]
 8007bd2:	1c5a      	adds	r2, r3, #1
 8007bd4:	6022      	str	r2, [r4, #0]
 8007bd6:	701e      	strb	r6, [r3, #0]
 8007bd8:	6963      	ldr	r3, [r4, #20]
 8007bda:	3001      	adds	r0, #1
 8007bdc:	4283      	cmp	r3, r0
 8007bde:	d004      	beq.n	8007bea <__swbuf_r+0x62>
 8007be0:	89a3      	ldrh	r3, [r4, #12]
 8007be2:	07db      	lsls	r3, r3, #31
 8007be4:	d506      	bpl.n	8007bf4 <__swbuf_r+0x6c>
 8007be6:	2e0a      	cmp	r6, #10
 8007be8:	d104      	bne.n	8007bf4 <__swbuf_r+0x6c>
 8007bea:	4621      	mov	r1, r4
 8007bec:	4628      	mov	r0, r5
 8007bee:	f000 f911 	bl	8007e14 <_fflush_r>
 8007bf2:	b988      	cbnz	r0, 8007c18 <__swbuf_r+0x90>
 8007bf4:	4638      	mov	r0, r7
 8007bf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007bf8:	4b0a      	ldr	r3, [pc, #40]	; (8007c24 <__swbuf_r+0x9c>)
 8007bfa:	429c      	cmp	r4, r3
 8007bfc:	d101      	bne.n	8007c02 <__swbuf_r+0x7a>
 8007bfe:	68ac      	ldr	r4, [r5, #8]
 8007c00:	e7cf      	b.n	8007ba2 <__swbuf_r+0x1a>
 8007c02:	4b09      	ldr	r3, [pc, #36]	; (8007c28 <__swbuf_r+0xa0>)
 8007c04:	429c      	cmp	r4, r3
 8007c06:	bf08      	it	eq
 8007c08:	68ec      	ldreq	r4, [r5, #12]
 8007c0a:	e7ca      	b.n	8007ba2 <__swbuf_r+0x1a>
 8007c0c:	4621      	mov	r1, r4
 8007c0e:	4628      	mov	r0, r5
 8007c10:	f000 f80c 	bl	8007c2c <__swsetup_r>
 8007c14:	2800      	cmp	r0, #0
 8007c16:	d0cb      	beq.n	8007bb0 <__swbuf_r+0x28>
 8007c18:	f04f 37ff 	mov.w	r7, #4294967295
 8007c1c:	e7ea      	b.n	8007bf4 <__swbuf_r+0x6c>
 8007c1e:	bf00      	nop
 8007c20:	08009010 	.word	0x08009010
 8007c24:	08009030 	.word	0x08009030
 8007c28:	08008ff0 	.word	0x08008ff0

08007c2c <__swsetup_r>:
 8007c2c:	4b32      	ldr	r3, [pc, #200]	; (8007cf8 <__swsetup_r+0xcc>)
 8007c2e:	b570      	push	{r4, r5, r6, lr}
 8007c30:	681d      	ldr	r5, [r3, #0]
 8007c32:	4606      	mov	r6, r0
 8007c34:	460c      	mov	r4, r1
 8007c36:	b125      	cbz	r5, 8007c42 <__swsetup_r+0x16>
 8007c38:	69ab      	ldr	r3, [r5, #24]
 8007c3a:	b913      	cbnz	r3, 8007c42 <__swsetup_r+0x16>
 8007c3c:	4628      	mov	r0, r5
 8007c3e:	f000 f97d 	bl	8007f3c <__sinit>
 8007c42:	4b2e      	ldr	r3, [pc, #184]	; (8007cfc <__swsetup_r+0xd0>)
 8007c44:	429c      	cmp	r4, r3
 8007c46:	d10f      	bne.n	8007c68 <__swsetup_r+0x3c>
 8007c48:	686c      	ldr	r4, [r5, #4]
 8007c4a:	89a3      	ldrh	r3, [r4, #12]
 8007c4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007c50:	0719      	lsls	r1, r3, #28
 8007c52:	d42c      	bmi.n	8007cae <__swsetup_r+0x82>
 8007c54:	06dd      	lsls	r5, r3, #27
 8007c56:	d411      	bmi.n	8007c7c <__swsetup_r+0x50>
 8007c58:	2309      	movs	r3, #9
 8007c5a:	6033      	str	r3, [r6, #0]
 8007c5c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007c60:	81a3      	strh	r3, [r4, #12]
 8007c62:	f04f 30ff 	mov.w	r0, #4294967295
 8007c66:	e03e      	b.n	8007ce6 <__swsetup_r+0xba>
 8007c68:	4b25      	ldr	r3, [pc, #148]	; (8007d00 <__swsetup_r+0xd4>)
 8007c6a:	429c      	cmp	r4, r3
 8007c6c:	d101      	bne.n	8007c72 <__swsetup_r+0x46>
 8007c6e:	68ac      	ldr	r4, [r5, #8]
 8007c70:	e7eb      	b.n	8007c4a <__swsetup_r+0x1e>
 8007c72:	4b24      	ldr	r3, [pc, #144]	; (8007d04 <__swsetup_r+0xd8>)
 8007c74:	429c      	cmp	r4, r3
 8007c76:	bf08      	it	eq
 8007c78:	68ec      	ldreq	r4, [r5, #12]
 8007c7a:	e7e6      	b.n	8007c4a <__swsetup_r+0x1e>
 8007c7c:	0758      	lsls	r0, r3, #29
 8007c7e:	d512      	bpl.n	8007ca6 <__swsetup_r+0x7a>
 8007c80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c82:	b141      	cbz	r1, 8007c96 <__swsetup_r+0x6a>
 8007c84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c88:	4299      	cmp	r1, r3
 8007c8a:	d002      	beq.n	8007c92 <__swsetup_r+0x66>
 8007c8c:	4630      	mov	r0, r6
 8007c8e:	f000 fa5b 	bl	8008148 <_free_r>
 8007c92:	2300      	movs	r3, #0
 8007c94:	6363      	str	r3, [r4, #52]	; 0x34
 8007c96:	89a3      	ldrh	r3, [r4, #12]
 8007c98:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007c9c:	81a3      	strh	r3, [r4, #12]
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	6063      	str	r3, [r4, #4]
 8007ca2:	6923      	ldr	r3, [r4, #16]
 8007ca4:	6023      	str	r3, [r4, #0]
 8007ca6:	89a3      	ldrh	r3, [r4, #12]
 8007ca8:	f043 0308 	orr.w	r3, r3, #8
 8007cac:	81a3      	strh	r3, [r4, #12]
 8007cae:	6923      	ldr	r3, [r4, #16]
 8007cb0:	b94b      	cbnz	r3, 8007cc6 <__swsetup_r+0x9a>
 8007cb2:	89a3      	ldrh	r3, [r4, #12]
 8007cb4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007cb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cbc:	d003      	beq.n	8007cc6 <__swsetup_r+0x9a>
 8007cbe:	4621      	mov	r1, r4
 8007cc0:	4630      	mov	r0, r6
 8007cc2:	f000 fa01 	bl	80080c8 <__smakebuf_r>
 8007cc6:	89a0      	ldrh	r0, [r4, #12]
 8007cc8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007ccc:	f010 0301 	ands.w	r3, r0, #1
 8007cd0:	d00a      	beq.n	8007ce8 <__swsetup_r+0xbc>
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	60a3      	str	r3, [r4, #8]
 8007cd6:	6963      	ldr	r3, [r4, #20]
 8007cd8:	425b      	negs	r3, r3
 8007cda:	61a3      	str	r3, [r4, #24]
 8007cdc:	6923      	ldr	r3, [r4, #16]
 8007cde:	b943      	cbnz	r3, 8007cf2 <__swsetup_r+0xc6>
 8007ce0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007ce4:	d1ba      	bne.n	8007c5c <__swsetup_r+0x30>
 8007ce6:	bd70      	pop	{r4, r5, r6, pc}
 8007ce8:	0781      	lsls	r1, r0, #30
 8007cea:	bf58      	it	pl
 8007cec:	6963      	ldrpl	r3, [r4, #20]
 8007cee:	60a3      	str	r3, [r4, #8]
 8007cf0:	e7f4      	b.n	8007cdc <__swsetup_r+0xb0>
 8007cf2:	2000      	movs	r0, #0
 8007cf4:	e7f7      	b.n	8007ce6 <__swsetup_r+0xba>
 8007cf6:	bf00      	nop
 8007cf8:	20002788 	.word	0x20002788
 8007cfc:	08009010 	.word	0x08009010
 8007d00:	08009030 	.word	0x08009030
 8007d04:	08008ff0 	.word	0x08008ff0

08007d08 <__sflush_r>:
 8007d08:	898a      	ldrh	r2, [r1, #12]
 8007d0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d0e:	4605      	mov	r5, r0
 8007d10:	0710      	lsls	r0, r2, #28
 8007d12:	460c      	mov	r4, r1
 8007d14:	d458      	bmi.n	8007dc8 <__sflush_r+0xc0>
 8007d16:	684b      	ldr	r3, [r1, #4]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	dc05      	bgt.n	8007d28 <__sflush_r+0x20>
 8007d1c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	dc02      	bgt.n	8007d28 <__sflush_r+0x20>
 8007d22:	2000      	movs	r0, #0
 8007d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d2a:	2e00      	cmp	r6, #0
 8007d2c:	d0f9      	beq.n	8007d22 <__sflush_r+0x1a>
 8007d2e:	2300      	movs	r3, #0
 8007d30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007d34:	682f      	ldr	r7, [r5, #0]
 8007d36:	602b      	str	r3, [r5, #0]
 8007d38:	d032      	beq.n	8007da0 <__sflush_r+0x98>
 8007d3a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007d3c:	89a3      	ldrh	r3, [r4, #12]
 8007d3e:	075a      	lsls	r2, r3, #29
 8007d40:	d505      	bpl.n	8007d4e <__sflush_r+0x46>
 8007d42:	6863      	ldr	r3, [r4, #4]
 8007d44:	1ac0      	subs	r0, r0, r3
 8007d46:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007d48:	b10b      	cbz	r3, 8007d4e <__sflush_r+0x46>
 8007d4a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007d4c:	1ac0      	subs	r0, r0, r3
 8007d4e:	2300      	movs	r3, #0
 8007d50:	4602      	mov	r2, r0
 8007d52:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d54:	6a21      	ldr	r1, [r4, #32]
 8007d56:	4628      	mov	r0, r5
 8007d58:	47b0      	blx	r6
 8007d5a:	1c43      	adds	r3, r0, #1
 8007d5c:	89a3      	ldrh	r3, [r4, #12]
 8007d5e:	d106      	bne.n	8007d6e <__sflush_r+0x66>
 8007d60:	6829      	ldr	r1, [r5, #0]
 8007d62:	291d      	cmp	r1, #29
 8007d64:	d82c      	bhi.n	8007dc0 <__sflush_r+0xb8>
 8007d66:	4a2a      	ldr	r2, [pc, #168]	; (8007e10 <__sflush_r+0x108>)
 8007d68:	40ca      	lsrs	r2, r1
 8007d6a:	07d6      	lsls	r6, r2, #31
 8007d6c:	d528      	bpl.n	8007dc0 <__sflush_r+0xb8>
 8007d6e:	2200      	movs	r2, #0
 8007d70:	6062      	str	r2, [r4, #4]
 8007d72:	04d9      	lsls	r1, r3, #19
 8007d74:	6922      	ldr	r2, [r4, #16]
 8007d76:	6022      	str	r2, [r4, #0]
 8007d78:	d504      	bpl.n	8007d84 <__sflush_r+0x7c>
 8007d7a:	1c42      	adds	r2, r0, #1
 8007d7c:	d101      	bne.n	8007d82 <__sflush_r+0x7a>
 8007d7e:	682b      	ldr	r3, [r5, #0]
 8007d80:	b903      	cbnz	r3, 8007d84 <__sflush_r+0x7c>
 8007d82:	6560      	str	r0, [r4, #84]	; 0x54
 8007d84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d86:	602f      	str	r7, [r5, #0]
 8007d88:	2900      	cmp	r1, #0
 8007d8a:	d0ca      	beq.n	8007d22 <__sflush_r+0x1a>
 8007d8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d90:	4299      	cmp	r1, r3
 8007d92:	d002      	beq.n	8007d9a <__sflush_r+0x92>
 8007d94:	4628      	mov	r0, r5
 8007d96:	f000 f9d7 	bl	8008148 <_free_r>
 8007d9a:	2000      	movs	r0, #0
 8007d9c:	6360      	str	r0, [r4, #52]	; 0x34
 8007d9e:	e7c1      	b.n	8007d24 <__sflush_r+0x1c>
 8007da0:	6a21      	ldr	r1, [r4, #32]
 8007da2:	2301      	movs	r3, #1
 8007da4:	4628      	mov	r0, r5
 8007da6:	47b0      	blx	r6
 8007da8:	1c41      	adds	r1, r0, #1
 8007daa:	d1c7      	bne.n	8007d3c <__sflush_r+0x34>
 8007dac:	682b      	ldr	r3, [r5, #0]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d0c4      	beq.n	8007d3c <__sflush_r+0x34>
 8007db2:	2b1d      	cmp	r3, #29
 8007db4:	d001      	beq.n	8007dba <__sflush_r+0xb2>
 8007db6:	2b16      	cmp	r3, #22
 8007db8:	d101      	bne.n	8007dbe <__sflush_r+0xb6>
 8007dba:	602f      	str	r7, [r5, #0]
 8007dbc:	e7b1      	b.n	8007d22 <__sflush_r+0x1a>
 8007dbe:	89a3      	ldrh	r3, [r4, #12]
 8007dc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007dc4:	81a3      	strh	r3, [r4, #12]
 8007dc6:	e7ad      	b.n	8007d24 <__sflush_r+0x1c>
 8007dc8:	690f      	ldr	r7, [r1, #16]
 8007dca:	2f00      	cmp	r7, #0
 8007dcc:	d0a9      	beq.n	8007d22 <__sflush_r+0x1a>
 8007dce:	0793      	lsls	r3, r2, #30
 8007dd0:	680e      	ldr	r6, [r1, #0]
 8007dd2:	bf08      	it	eq
 8007dd4:	694b      	ldreq	r3, [r1, #20]
 8007dd6:	600f      	str	r7, [r1, #0]
 8007dd8:	bf18      	it	ne
 8007dda:	2300      	movne	r3, #0
 8007ddc:	eba6 0807 	sub.w	r8, r6, r7
 8007de0:	608b      	str	r3, [r1, #8]
 8007de2:	f1b8 0f00 	cmp.w	r8, #0
 8007de6:	dd9c      	ble.n	8007d22 <__sflush_r+0x1a>
 8007de8:	6a21      	ldr	r1, [r4, #32]
 8007dea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007dec:	4643      	mov	r3, r8
 8007dee:	463a      	mov	r2, r7
 8007df0:	4628      	mov	r0, r5
 8007df2:	47b0      	blx	r6
 8007df4:	2800      	cmp	r0, #0
 8007df6:	dc06      	bgt.n	8007e06 <__sflush_r+0xfe>
 8007df8:	89a3      	ldrh	r3, [r4, #12]
 8007dfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007dfe:	81a3      	strh	r3, [r4, #12]
 8007e00:	f04f 30ff 	mov.w	r0, #4294967295
 8007e04:	e78e      	b.n	8007d24 <__sflush_r+0x1c>
 8007e06:	4407      	add	r7, r0
 8007e08:	eba8 0800 	sub.w	r8, r8, r0
 8007e0c:	e7e9      	b.n	8007de2 <__sflush_r+0xda>
 8007e0e:	bf00      	nop
 8007e10:	20400001 	.word	0x20400001

08007e14 <_fflush_r>:
 8007e14:	b538      	push	{r3, r4, r5, lr}
 8007e16:	690b      	ldr	r3, [r1, #16]
 8007e18:	4605      	mov	r5, r0
 8007e1a:	460c      	mov	r4, r1
 8007e1c:	b913      	cbnz	r3, 8007e24 <_fflush_r+0x10>
 8007e1e:	2500      	movs	r5, #0
 8007e20:	4628      	mov	r0, r5
 8007e22:	bd38      	pop	{r3, r4, r5, pc}
 8007e24:	b118      	cbz	r0, 8007e2e <_fflush_r+0x1a>
 8007e26:	6983      	ldr	r3, [r0, #24]
 8007e28:	b90b      	cbnz	r3, 8007e2e <_fflush_r+0x1a>
 8007e2a:	f000 f887 	bl	8007f3c <__sinit>
 8007e2e:	4b14      	ldr	r3, [pc, #80]	; (8007e80 <_fflush_r+0x6c>)
 8007e30:	429c      	cmp	r4, r3
 8007e32:	d11b      	bne.n	8007e6c <_fflush_r+0x58>
 8007e34:	686c      	ldr	r4, [r5, #4]
 8007e36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d0ef      	beq.n	8007e1e <_fflush_r+0xa>
 8007e3e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007e40:	07d0      	lsls	r0, r2, #31
 8007e42:	d404      	bmi.n	8007e4e <_fflush_r+0x3a>
 8007e44:	0599      	lsls	r1, r3, #22
 8007e46:	d402      	bmi.n	8007e4e <_fflush_r+0x3a>
 8007e48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e4a:	f000 f915 	bl	8008078 <__retarget_lock_acquire_recursive>
 8007e4e:	4628      	mov	r0, r5
 8007e50:	4621      	mov	r1, r4
 8007e52:	f7ff ff59 	bl	8007d08 <__sflush_r>
 8007e56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e58:	07da      	lsls	r2, r3, #31
 8007e5a:	4605      	mov	r5, r0
 8007e5c:	d4e0      	bmi.n	8007e20 <_fflush_r+0xc>
 8007e5e:	89a3      	ldrh	r3, [r4, #12]
 8007e60:	059b      	lsls	r3, r3, #22
 8007e62:	d4dd      	bmi.n	8007e20 <_fflush_r+0xc>
 8007e64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e66:	f000 f908 	bl	800807a <__retarget_lock_release_recursive>
 8007e6a:	e7d9      	b.n	8007e20 <_fflush_r+0xc>
 8007e6c:	4b05      	ldr	r3, [pc, #20]	; (8007e84 <_fflush_r+0x70>)
 8007e6e:	429c      	cmp	r4, r3
 8007e70:	d101      	bne.n	8007e76 <_fflush_r+0x62>
 8007e72:	68ac      	ldr	r4, [r5, #8]
 8007e74:	e7df      	b.n	8007e36 <_fflush_r+0x22>
 8007e76:	4b04      	ldr	r3, [pc, #16]	; (8007e88 <_fflush_r+0x74>)
 8007e78:	429c      	cmp	r4, r3
 8007e7a:	bf08      	it	eq
 8007e7c:	68ec      	ldreq	r4, [r5, #12]
 8007e7e:	e7da      	b.n	8007e36 <_fflush_r+0x22>
 8007e80:	08009010 	.word	0x08009010
 8007e84:	08009030 	.word	0x08009030
 8007e88:	08008ff0 	.word	0x08008ff0

08007e8c <std>:
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	b510      	push	{r4, lr}
 8007e90:	4604      	mov	r4, r0
 8007e92:	e9c0 3300 	strd	r3, r3, [r0]
 8007e96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007e9a:	6083      	str	r3, [r0, #8]
 8007e9c:	8181      	strh	r1, [r0, #12]
 8007e9e:	6643      	str	r3, [r0, #100]	; 0x64
 8007ea0:	81c2      	strh	r2, [r0, #14]
 8007ea2:	6183      	str	r3, [r0, #24]
 8007ea4:	4619      	mov	r1, r3
 8007ea6:	2208      	movs	r2, #8
 8007ea8:	305c      	adds	r0, #92	; 0x5c
 8007eaa:	f7ff fdd7 	bl	8007a5c <memset>
 8007eae:	4b05      	ldr	r3, [pc, #20]	; (8007ec4 <std+0x38>)
 8007eb0:	6263      	str	r3, [r4, #36]	; 0x24
 8007eb2:	4b05      	ldr	r3, [pc, #20]	; (8007ec8 <std+0x3c>)
 8007eb4:	62a3      	str	r3, [r4, #40]	; 0x28
 8007eb6:	4b05      	ldr	r3, [pc, #20]	; (8007ecc <std+0x40>)
 8007eb8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007eba:	4b05      	ldr	r3, [pc, #20]	; (8007ed0 <std+0x44>)
 8007ebc:	6224      	str	r4, [r4, #32]
 8007ebe:	6323      	str	r3, [r4, #48]	; 0x30
 8007ec0:	bd10      	pop	{r4, pc}
 8007ec2:	bf00      	nop
 8007ec4:	08008905 	.word	0x08008905
 8007ec8:	08008927 	.word	0x08008927
 8007ecc:	0800895f 	.word	0x0800895f
 8007ed0:	08008983 	.word	0x08008983

08007ed4 <_cleanup_r>:
 8007ed4:	4901      	ldr	r1, [pc, #4]	; (8007edc <_cleanup_r+0x8>)
 8007ed6:	f000 b8af 	b.w	8008038 <_fwalk_reent>
 8007eda:	bf00      	nop
 8007edc:	08007e15 	.word	0x08007e15

08007ee0 <__sfmoreglue>:
 8007ee0:	b570      	push	{r4, r5, r6, lr}
 8007ee2:	2268      	movs	r2, #104	; 0x68
 8007ee4:	1e4d      	subs	r5, r1, #1
 8007ee6:	4355      	muls	r5, r2
 8007ee8:	460e      	mov	r6, r1
 8007eea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007eee:	f000 f997 	bl	8008220 <_malloc_r>
 8007ef2:	4604      	mov	r4, r0
 8007ef4:	b140      	cbz	r0, 8007f08 <__sfmoreglue+0x28>
 8007ef6:	2100      	movs	r1, #0
 8007ef8:	e9c0 1600 	strd	r1, r6, [r0]
 8007efc:	300c      	adds	r0, #12
 8007efe:	60a0      	str	r0, [r4, #8]
 8007f00:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007f04:	f7ff fdaa 	bl	8007a5c <memset>
 8007f08:	4620      	mov	r0, r4
 8007f0a:	bd70      	pop	{r4, r5, r6, pc}

08007f0c <__sfp_lock_acquire>:
 8007f0c:	4801      	ldr	r0, [pc, #4]	; (8007f14 <__sfp_lock_acquire+0x8>)
 8007f0e:	f000 b8b3 	b.w	8008078 <__retarget_lock_acquire_recursive>
 8007f12:	bf00      	nop
 8007f14:	20002e3d 	.word	0x20002e3d

08007f18 <__sfp_lock_release>:
 8007f18:	4801      	ldr	r0, [pc, #4]	; (8007f20 <__sfp_lock_release+0x8>)
 8007f1a:	f000 b8ae 	b.w	800807a <__retarget_lock_release_recursive>
 8007f1e:	bf00      	nop
 8007f20:	20002e3d 	.word	0x20002e3d

08007f24 <__sinit_lock_acquire>:
 8007f24:	4801      	ldr	r0, [pc, #4]	; (8007f2c <__sinit_lock_acquire+0x8>)
 8007f26:	f000 b8a7 	b.w	8008078 <__retarget_lock_acquire_recursive>
 8007f2a:	bf00      	nop
 8007f2c:	20002e3e 	.word	0x20002e3e

08007f30 <__sinit_lock_release>:
 8007f30:	4801      	ldr	r0, [pc, #4]	; (8007f38 <__sinit_lock_release+0x8>)
 8007f32:	f000 b8a2 	b.w	800807a <__retarget_lock_release_recursive>
 8007f36:	bf00      	nop
 8007f38:	20002e3e 	.word	0x20002e3e

08007f3c <__sinit>:
 8007f3c:	b510      	push	{r4, lr}
 8007f3e:	4604      	mov	r4, r0
 8007f40:	f7ff fff0 	bl	8007f24 <__sinit_lock_acquire>
 8007f44:	69a3      	ldr	r3, [r4, #24]
 8007f46:	b11b      	cbz	r3, 8007f50 <__sinit+0x14>
 8007f48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f4c:	f7ff bff0 	b.w	8007f30 <__sinit_lock_release>
 8007f50:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007f54:	6523      	str	r3, [r4, #80]	; 0x50
 8007f56:	4b13      	ldr	r3, [pc, #76]	; (8007fa4 <__sinit+0x68>)
 8007f58:	4a13      	ldr	r2, [pc, #76]	; (8007fa8 <__sinit+0x6c>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	62a2      	str	r2, [r4, #40]	; 0x28
 8007f5e:	42a3      	cmp	r3, r4
 8007f60:	bf04      	itt	eq
 8007f62:	2301      	moveq	r3, #1
 8007f64:	61a3      	streq	r3, [r4, #24]
 8007f66:	4620      	mov	r0, r4
 8007f68:	f000 f820 	bl	8007fac <__sfp>
 8007f6c:	6060      	str	r0, [r4, #4]
 8007f6e:	4620      	mov	r0, r4
 8007f70:	f000 f81c 	bl	8007fac <__sfp>
 8007f74:	60a0      	str	r0, [r4, #8]
 8007f76:	4620      	mov	r0, r4
 8007f78:	f000 f818 	bl	8007fac <__sfp>
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	60e0      	str	r0, [r4, #12]
 8007f80:	2104      	movs	r1, #4
 8007f82:	6860      	ldr	r0, [r4, #4]
 8007f84:	f7ff ff82 	bl	8007e8c <std>
 8007f88:	68a0      	ldr	r0, [r4, #8]
 8007f8a:	2201      	movs	r2, #1
 8007f8c:	2109      	movs	r1, #9
 8007f8e:	f7ff ff7d 	bl	8007e8c <std>
 8007f92:	68e0      	ldr	r0, [r4, #12]
 8007f94:	2202      	movs	r2, #2
 8007f96:	2112      	movs	r1, #18
 8007f98:	f7ff ff78 	bl	8007e8c <std>
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	61a3      	str	r3, [r4, #24]
 8007fa0:	e7d2      	b.n	8007f48 <__sinit+0xc>
 8007fa2:	bf00      	nop
 8007fa4:	08008fec 	.word	0x08008fec
 8007fa8:	08007ed5 	.word	0x08007ed5

08007fac <__sfp>:
 8007fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fae:	4607      	mov	r7, r0
 8007fb0:	f7ff ffac 	bl	8007f0c <__sfp_lock_acquire>
 8007fb4:	4b1e      	ldr	r3, [pc, #120]	; (8008030 <__sfp+0x84>)
 8007fb6:	681e      	ldr	r6, [r3, #0]
 8007fb8:	69b3      	ldr	r3, [r6, #24]
 8007fba:	b913      	cbnz	r3, 8007fc2 <__sfp+0x16>
 8007fbc:	4630      	mov	r0, r6
 8007fbe:	f7ff ffbd 	bl	8007f3c <__sinit>
 8007fc2:	3648      	adds	r6, #72	; 0x48
 8007fc4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007fc8:	3b01      	subs	r3, #1
 8007fca:	d503      	bpl.n	8007fd4 <__sfp+0x28>
 8007fcc:	6833      	ldr	r3, [r6, #0]
 8007fce:	b30b      	cbz	r3, 8008014 <__sfp+0x68>
 8007fd0:	6836      	ldr	r6, [r6, #0]
 8007fd2:	e7f7      	b.n	8007fc4 <__sfp+0x18>
 8007fd4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007fd8:	b9d5      	cbnz	r5, 8008010 <__sfp+0x64>
 8007fda:	4b16      	ldr	r3, [pc, #88]	; (8008034 <__sfp+0x88>)
 8007fdc:	60e3      	str	r3, [r4, #12]
 8007fde:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007fe2:	6665      	str	r5, [r4, #100]	; 0x64
 8007fe4:	f000 f847 	bl	8008076 <__retarget_lock_init_recursive>
 8007fe8:	f7ff ff96 	bl	8007f18 <__sfp_lock_release>
 8007fec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007ff0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007ff4:	6025      	str	r5, [r4, #0]
 8007ff6:	61a5      	str	r5, [r4, #24]
 8007ff8:	2208      	movs	r2, #8
 8007ffa:	4629      	mov	r1, r5
 8007ffc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008000:	f7ff fd2c 	bl	8007a5c <memset>
 8008004:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008008:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800800c:	4620      	mov	r0, r4
 800800e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008010:	3468      	adds	r4, #104	; 0x68
 8008012:	e7d9      	b.n	8007fc8 <__sfp+0x1c>
 8008014:	2104      	movs	r1, #4
 8008016:	4638      	mov	r0, r7
 8008018:	f7ff ff62 	bl	8007ee0 <__sfmoreglue>
 800801c:	4604      	mov	r4, r0
 800801e:	6030      	str	r0, [r6, #0]
 8008020:	2800      	cmp	r0, #0
 8008022:	d1d5      	bne.n	8007fd0 <__sfp+0x24>
 8008024:	f7ff ff78 	bl	8007f18 <__sfp_lock_release>
 8008028:	230c      	movs	r3, #12
 800802a:	603b      	str	r3, [r7, #0]
 800802c:	e7ee      	b.n	800800c <__sfp+0x60>
 800802e:	bf00      	nop
 8008030:	08008fec 	.word	0x08008fec
 8008034:	ffff0001 	.word	0xffff0001

08008038 <_fwalk_reent>:
 8008038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800803c:	4606      	mov	r6, r0
 800803e:	4688      	mov	r8, r1
 8008040:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008044:	2700      	movs	r7, #0
 8008046:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800804a:	f1b9 0901 	subs.w	r9, r9, #1
 800804e:	d505      	bpl.n	800805c <_fwalk_reent+0x24>
 8008050:	6824      	ldr	r4, [r4, #0]
 8008052:	2c00      	cmp	r4, #0
 8008054:	d1f7      	bne.n	8008046 <_fwalk_reent+0xe>
 8008056:	4638      	mov	r0, r7
 8008058:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800805c:	89ab      	ldrh	r3, [r5, #12]
 800805e:	2b01      	cmp	r3, #1
 8008060:	d907      	bls.n	8008072 <_fwalk_reent+0x3a>
 8008062:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008066:	3301      	adds	r3, #1
 8008068:	d003      	beq.n	8008072 <_fwalk_reent+0x3a>
 800806a:	4629      	mov	r1, r5
 800806c:	4630      	mov	r0, r6
 800806e:	47c0      	blx	r8
 8008070:	4307      	orrs	r7, r0
 8008072:	3568      	adds	r5, #104	; 0x68
 8008074:	e7e9      	b.n	800804a <_fwalk_reent+0x12>

08008076 <__retarget_lock_init_recursive>:
 8008076:	4770      	bx	lr

08008078 <__retarget_lock_acquire_recursive>:
 8008078:	4770      	bx	lr

0800807a <__retarget_lock_release_recursive>:
 800807a:	4770      	bx	lr

0800807c <__swhatbuf_r>:
 800807c:	b570      	push	{r4, r5, r6, lr}
 800807e:	460e      	mov	r6, r1
 8008080:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008084:	2900      	cmp	r1, #0
 8008086:	b096      	sub	sp, #88	; 0x58
 8008088:	4614      	mov	r4, r2
 800808a:	461d      	mov	r5, r3
 800808c:	da08      	bge.n	80080a0 <__swhatbuf_r+0x24>
 800808e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008092:	2200      	movs	r2, #0
 8008094:	602a      	str	r2, [r5, #0]
 8008096:	061a      	lsls	r2, r3, #24
 8008098:	d410      	bmi.n	80080bc <__swhatbuf_r+0x40>
 800809a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800809e:	e00e      	b.n	80080be <__swhatbuf_r+0x42>
 80080a0:	466a      	mov	r2, sp
 80080a2:	f000 fc95 	bl	80089d0 <_fstat_r>
 80080a6:	2800      	cmp	r0, #0
 80080a8:	dbf1      	blt.n	800808e <__swhatbuf_r+0x12>
 80080aa:	9a01      	ldr	r2, [sp, #4]
 80080ac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80080b0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80080b4:	425a      	negs	r2, r3
 80080b6:	415a      	adcs	r2, r3
 80080b8:	602a      	str	r2, [r5, #0]
 80080ba:	e7ee      	b.n	800809a <__swhatbuf_r+0x1e>
 80080bc:	2340      	movs	r3, #64	; 0x40
 80080be:	2000      	movs	r0, #0
 80080c0:	6023      	str	r3, [r4, #0]
 80080c2:	b016      	add	sp, #88	; 0x58
 80080c4:	bd70      	pop	{r4, r5, r6, pc}
	...

080080c8 <__smakebuf_r>:
 80080c8:	898b      	ldrh	r3, [r1, #12]
 80080ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80080cc:	079d      	lsls	r5, r3, #30
 80080ce:	4606      	mov	r6, r0
 80080d0:	460c      	mov	r4, r1
 80080d2:	d507      	bpl.n	80080e4 <__smakebuf_r+0x1c>
 80080d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80080d8:	6023      	str	r3, [r4, #0]
 80080da:	6123      	str	r3, [r4, #16]
 80080dc:	2301      	movs	r3, #1
 80080de:	6163      	str	r3, [r4, #20]
 80080e0:	b002      	add	sp, #8
 80080e2:	bd70      	pop	{r4, r5, r6, pc}
 80080e4:	ab01      	add	r3, sp, #4
 80080e6:	466a      	mov	r2, sp
 80080e8:	f7ff ffc8 	bl	800807c <__swhatbuf_r>
 80080ec:	9900      	ldr	r1, [sp, #0]
 80080ee:	4605      	mov	r5, r0
 80080f0:	4630      	mov	r0, r6
 80080f2:	f000 f895 	bl	8008220 <_malloc_r>
 80080f6:	b948      	cbnz	r0, 800810c <__smakebuf_r+0x44>
 80080f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080fc:	059a      	lsls	r2, r3, #22
 80080fe:	d4ef      	bmi.n	80080e0 <__smakebuf_r+0x18>
 8008100:	f023 0303 	bic.w	r3, r3, #3
 8008104:	f043 0302 	orr.w	r3, r3, #2
 8008108:	81a3      	strh	r3, [r4, #12]
 800810a:	e7e3      	b.n	80080d4 <__smakebuf_r+0xc>
 800810c:	4b0d      	ldr	r3, [pc, #52]	; (8008144 <__smakebuf_r+0x7c>)
 800810e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008110:	89a3      	ldrh	r3, [r4, #12]
 8008112:	6020      	str	r0, [r4, #0]
 8008114:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008118:	81a3      	strh	r3, [r4, #12]
 800811a:	9b00      	ldr	r3, [sp, #0]
 800811c:	6163      	str	r3, [r4, #20]
 800811e:	9b01      	ldr	r3, [sp, #4]
 8008120:	6120      	str	r0, [r4, #16]
 8008122:	b15b      	cbz	r3, 800813c <__smakebuf_r+0x74>
 8008124:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008128:	4630      	mov	r0, r6
 800812a:	f000 fc63 	bl	80089f4 <_isatty_r>
 800812e:	b128      	cbz	r0, 800813c <__smakebuf_r+0x74>
 8008130:	89a3      	ldrh	r3, [r4, #12]
 8008132:	f023 0303 	bic.w	r3, r3, #3
 8008136:	f043 0301 	orr.w	r3, r3, #1
 800813a:	81a3      	strh	r3, [r4, #12]
 800813c:	89a0      	ldrh	r0, [r4, #12]
 800813e:	4305      	orrs	r5, r0
 8008140:	81a5      	strh	r5, [r4, #12]
 8008142:	e7cd      	b.n	80080e0 <__smakebuf_r+0x18>
 8008144:	08007ed5 	.word	0x08007ed5

08008148 <_free_r>:
 8008148:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800814a:	2900      	cmp	r1, #0
 800814c:	d044      	beq.n	80081d8 <_free_r+0x90>
 800814e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008152:	9001      	str	r0, [sp, #4]
 8008154:	2b00      	cmp	r3, #0
 8008156:	f1a1 0404 	sub.w	r4, r1, #4
 800815a:	bfb8      	it	lt
 800815c:	18e4      	addlt	r4, r4, r3
 800815e:	f000 fc6b 	bl	8008a38 <__malloc_lock>
 8008162:	4a1e      	ldr	r2, [pc, #120]	; (80081dc <_free_r+0x94>)
 8008164:	9801      	ldr	r0, [sp, #4]
 8008166:	6813      	ldr	r3, [r2, #0]
 8008168:	b933      	cbnz	r3, 8008178 <_free_r+0x30>
 800816a:	6063      	str	r3, [r4, #4]
 800816c:	6014      	str	r4, [r2, #0]
 800816e:	b003      	add	sp, #12
 8008170:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008174:	f000 bc66 	b.w	8008a44 <__malloc_unlock>
 8008178:	42a3      	cmp	r3, r4
 800817a:	d908      	bls.n	800818e <_free_r+0x46>
 800817c:	6825      	ldr	r5, [r4, #0]
 800817e:	1961      	adds	r1, r4, r5
 8008180:	428b      	cmp	r3, r1
 8008182:	bf01      	itttt	eq
 8008184:	6819      	ldreq	r1, [r3, #0]
 8008186:	685b      	ldreq	r3, [r3, #4]
 8008188:	1949      	addeq	r1, r1, r5
 800818a:	6021      	streq	r1, [r4, #0]
 800818c:	e7ed      	b.n	800816a <_free_r+0x22>
 800818e:	461a      	mov	r2, r3
 8008190:	685b      	ldr	r3, [r3, #4]
 8008192:	b10b      	cbz	r3, 8008198 <_free_r+0x50>
 8008194:	42a3      	cmp	r3, r4
 8008196:	d9fa      	bls.n	800818e <_free_r+0x46>
 8008198:	6811      	ldr	r1, [r2, #0]
 800819a:	1855      	adds	r5, r2, r1
 800819c:	42a5      	cmp	r5, r4
 800819e:	d10b      	bne.n	80081b8 <_free_r+0x70>
 80081a0:	6824      	ldr	r4, [r4, #0]
 80081a2:	4421      	add	r1, r4
 80081a4:	1854      	adds	r4, r2, r1
 80081a6:	42a3      	cmp	r3, r4
 80081a8:	6011      	str	r1, [r2, #0]
 80081aa:	d1e0      	bne.n	800816e <_free_r+0x26>
 80081ac:	681c      	ldr	r4, [r3, #0]
 80081ae:	685b      	ldr	r3, [r3, #4]
 80081b0:	6053      	str	r3, [r2, #4]
 80081b2:	4421      	add	r1, r4
 80081b4:	6011      	str	r1, [r2, #0]
 80081b6:	e7da      	b.n	800816e <_free_r+0x26>
 80081b8:	d902      	bls.n	80081c0 <_free_r+0x78>
 80081ba:	230c      	movs	r3, #12
 80081bc:	6003      	str	r3, [r0, #0]
 80081be:	e7d6      	b.n	800816e <_free_r+0x26>
 80081c0:	6825      	ldr	r5, [r4, #0]
 80081c2:	1961      	adds	r1, r4, r5
 80081c4:	428b      	cmp	r3, r1
 80081c6:	bf04      	itt	eq
 80081c8:	6819      	ldreq	r1, [r3, #0]
 80081ca:	685b      	ldreq	r3, [r3, #4]
 80081cc:	6063      	str	r3, [r4, #4]
 80081ce:	bf04      	itt	eq
 80081d0:	1949      	addeq	r1, r1, r5
 80081d2:	6021      	streq	r1, [r4, #0]
 80081d4:	6054      	str	r4, [r2, #4]
 80081d6:	e7ca      	b.n	800816e <_free_r+0x26>
 80081d8:	b003      	add	sp, #12
 80081da:	bd30      	pop	{r4, r5, pc}
 80081dc:	20002e40 	.word	0x20002e40

080081e0 <sbrk_aligned>:
 80081e0:	b570      	push	{r4, r5, r6, lr}
 80081e2:	4e0e      	ldr	r6, [pc, #56]	; (800821c <sbrk_aligned+0x3c>)
 80081e4:	460c      	mov	r4, r1
 80081e6:	6831      	ldr	r1, [r6, #0]
 80081e8:	4605      	mov	r5, r0
 80081ea:	b911      	cbnz	r1, 80081f2 <sbrk_aligned+0x12>
 80081ec:	f000 fb7a 	bl	80088e4 <_sbrk_r>
 80081f0:	6030      	str	r0, [r6, #0]
 80081f2:	4621      	mov	r1, r4
 80081f4:	4628      	mov	r0, r5
 80081f6:	f000 fb75 	bl	80088e4 <_sbrk_r>
 80081fa:	1c43      	adds	r3, r0, #1
 80081fc:	d00a      	beq.n	8008214 <sbrk_aligned+0x34>
 80081fe:	1cc4      	adds	r4, r0, #3
 8008200:	f024 0403 	bic.w	r4, r4, #3
 8008204:	42a0      	cmp	r0, r4
 8008206:	d007      	beq.n	8008218 <sbrk_aligned+0x38>
 8008208:	1a21      	subs	r1, r4, r0
 800820a:	4628      	mov	r0, r5
 800820c:	f000 fb6a 	bl	80088e4 <_sbrk_r>
 8008210:	3001      	adds	r0, #1
 8008212:	d101      	bne.n	8008218 <sbrk_aligned+0x38>
 8008214:	f04f 34ff 	mov.w	r4, #4294967295
 8008218:	4620      	mov	r0, r4
 800821a:	bd70      	pop	{r4, r5, r6, pc}
 800821c:	20002e44 	.word	0x20002e44

08008220 <_malloc_r>:
 8008220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008224:	1ccd      	adds	r5, r1, #3
 8008226:	f025 0503 	bic.w	r5, r5, #3
 800822a:	3508      	adds	r5, #8
 800822c:	2d0c      	cmp	r5, #12
 800822e:	bf38      	it	cc
 8008230:	250c      	movcc	r5, #12
 8008232:	2d00      	cmp	r5, #0
 8008234:	4607      	mov	r7, r0
 8008236:	db01      	blt.n	800823c <_malloc_r+0x1c>
 8008238:	42a9      	cmp	r1, r5
 800823a:	d905      	bls.n	8008248 <_malloc_r+0x28>
 800823c:	230c      	movs	r3, #12
 800823e:	603b      	str	r3, [r7, #0]
 8008240:	2600      	movs	r6, #0
 8008242:	4630      	mov	r0, r6
 8008244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008248:	4e2e      	ldr	r6, [pc, #184]	; (8008304 <_malloc_r+0xe4>)
 800824a:	f000 fbf5 	bl	8008a38 <__malloc_lock>
 800824e:	6833      	ldr	r3, [r6, #0]
 8008250:	461c      	mov	r4, r3
 8008252:	bb34      	cbnz	r4, 80082a2 <_malloc_r+0x82>
 8008254:	4629      	mov	r1, r5
 8008256:	4638      	mov	r0, r7
 8008258:	f7ff ffc2 	bl	80081e0 <sbrk_aligned>
 800825c:	1c43      	adds	r3, r0, #1
 800825e:	4604      	mov	r4, r0
 8008260:	d14d      	bne.n	80082fe <_malloc_r+0xde>
 8008262:	6834      	ldr	r4, [r6, #0]
 8008264:	4626      	mov	r6, r4
 8008266:	2e00      	cmp	r6, #0
 8008268:	d140      	bne.n	80082ec <_malloc_r+0xcc>
 800826a:	6823      	ldr	r3, [r4, #0]
 800826c:	4631      	mov	r1, r6
 800826e:	4638      	mov	r0, r7
 8008270:	eb04 0803 	add.w	r8, r4, r3
 8008274:	f000 fb36 	bl	80088e4 <_sbrk_r>
 8008278:	4580      	cmp	r8, r0
 800827a:	d13a      	bne.n	80082f2 <_malloc_r+0xd2>
 800827c:	6821      	ldr	r1, [r4, #0]
 800827e:	3503      	adds	r5, #3
 8008280:	1a6d      	subs	r5, r5, r1
 8008282:	f025 0503 	bic.w	r5, r5, #3
 8008286:	3508      	adds	r5, #8
 8008288:	2d0c      	cmp	r5, #12
 800828a:	bf38      	it	cc
 800828c:	250c      	movcc	r5, #12
 800828e:	4629      	mov	r1, r5
 8008290:	4638      	mov	r0, r7
 8008292:	f7ff ffa5 	bl	80081e0 <sbrk_aligned>
 8008296:	3001      	adds	r0, #1
 8008298:	d02b      	beq.n	80082f2 <_malloc_r+0xd2>
 800829a:	6823      	ldr	r3, [r4, #0]
 800829c:	442b      	add	r3, r5
 800829e:	6023      	str	r3, [r4, #0]
 80082a0:	e00e      	b.n	80082c0 <_malloc_r+0xa0>
 80082a2:	6822      	ldr	r2, [r4, #0]
 80082a4:	1b52      	subs	r2, r2, r5
 80082a6:	d41e      	bmi.n	80082e6 <_malloc_r+0xc6>
 80082a8:	2a0b      	cmp	r2, #11
 80082aa:	d916      	bls.n	80082da <_malloc_r+0xba>
 80082ac:	1961      	adds	r1, r4, r5
 80082ae:	42a3      	cmp	r3, r4
 80082b0:	6025      	str	r5, [r4, #0]
 80082b2:	bf18      	it	ne
 80082b4:	6059      	strne	r1, [r3, #4]
 80082b6:	6863      	ldr	r3, [r4, #4]
 80082b8:	bf08      	it	eq
 80082ba:	6031      	streq	r1, [r6, #0]
 80082bc:	5162      	str	r2, [r4, r5]
 80082be:	604b      	str	r3, [r1, #4]
 80082c0:	4638      	mov	r0, r7
 80082c2:	f104 060b 	add.w	r6, r4, #11
 80082c6:	f000 fbbd 	bl	8008a44 <__malloc_unlock>
 80082ca:	f026 0607 	bic.w	r6, r6, #7
 80082ce:	1d23      	adds	r3, r4, #4
 80082d0:	1af2      	subs	r2, r6, r3
 80082d2:	d0b6      	beq.n	8008242 <_malloc_r+0x22>
 80082d4:	1b9b      	subs	r3, r3, r6
 80082d6:	50a3      	str	r3, [r4, r2]
 80082d8:	e7b3      	b.n	8008242 <_malloc_r+0x22>
 80082da:	6862      	ldr	r2, [r4, #4]
 80082dc:	42a3      	cmp	r3, r4
 80082de:	bf0c      	ite	eq
 80082e0:	6032      	streq	r2, [r6, #0]
 80082e2:	605a      	strne	r2, [r3, #4]
 80082e4:	e7ec      	b.n	80082c0 <_malloc_r+0xa0>
 80082e6:	4623      	mov	r3, r4
 80082e8:	6864      	ldr	r4, [r4, #4]
 80082ea:	e7b2      	b.n	8008252 <_malloc_r+0x32>
 80082ec:	4634      	mov	r4, r6
 80082ee:	6876      	ldr	r6, [r6, #4]
 80082f0:	e7b9      	b.n	8008266 <_malloc_r+0x46>
 80082f2:	230c      	movs	r3, #12
 80082f4:	603b      	str	r3, [r7, #0]
 80082f6:	4638      	mov	r0, r7
 80082f8:	f000 fba4 	bl	8008a44 <__malloc_unlock>
 80082fc:	e7a1      	b.n	8008242 <_malloc_r+0x22>
 80082fe:	6025      	str	r5, [r4, #0]
 8008300:	e7de      	b.n	80082c0 <_malloc_r+0xa0>
 8008302:	bf00      	nop
 8008304:	20002e40 	.word	0x20002e40

08008308 <__sfputc_r>:
 8008308:	6893      	ldr	r3, [r2, #8]
 800830a:	3b01      	subs	r3, #1
 800830c:	2b00      	cmp	r3, #0
 800830e:	b410      	push	{r4}
 8008310:	6093      	str	r3, [r2, #8]
 8008312:	da08      	bge.n	8008326 <__sfputc_r+0x1e>
 8008314:	6994      	ldr	r4, [r2, #24]
 8008316:	42a3      	cmp	r3, r4
 8008318:	db01      	blt.n	800831e <__sfputc_r+0x16>
 800831a:	290a      	cmp	r1, #10
 800831c:	d103      	bne.n	8008326 <__sfputc_r+0x1e>
 800831e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008322:	f7ff bc31 	b.w	8007b88 <__swbuf_r>
 8008326:	6813      	ldr	r3, [r2, #0]
 8008328:	1c58      	adds	r0, r3, #1
 800832a:	6010      	str	r0, [r2, #0]
 800832c:	7019      	strb	r1, [r3, #0]
 800832e:	4608      	mov	r0, r1
 8008330:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008334:	4770      	bx	lr

08008336 <__sfputs_r>:
 8008336:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008338:	4606      	mov	r6, r0
 800833a:	460f      	mov	r7, r1
 800833c:	4614      	mov	r4, r2
 800833e:	18d5      	adds	r5, r2, r3
 8008340:	42ac      	cmp	r4, r5
 8008342:	d101      	bne.n	8008348 <__sfputs_r+0x12>
 8008344:	2000      	movs	r0, #0
 8008346:	e007      	b.n	8008358 <__sfputs_r+0x22>
 8008348:	f814 1b01 	ldrb.w	r1, [r4], #1
 800834c:	463a      	mov	r2, r7
 800834e:	4630      	mov	r0, r6
 8008350:	f7ff ffda 	bl	8008308 <__sfputc_r>
 8008354:	1c43      	adds	r3, r0, #1
 8008356:	d1f3      	bne.n	8008340 <__sfputs_r+0xa>
 8008358:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800835c <_vfiprintf_r>:
 800835c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008360:	460d      	mov	r5, r1
 8008362:	b09d      	sub	sp, #116	; 0x74
 8008364:	4614      	mov	r4, r2
 8008366:	4698      	mov	r8, r3
 8008368:	4606      	mov	r6, r0
 800836a:	b118      	cbz	r0, 8008374 <_vfiprintf_r+0x18>
 800836c:	6983      	ldr	r3, [r0, #24]
 800836e:	b90b      	cbnz	r3, 8008374 <_vfiprintf_r+0x18>
 8008370:	f7ff fde4 	bl	8007f3c <__sinit>
 8008374:	4b89      	ldr	r3, [pc, #548]	; (800859c <_vfiprintf_r+0x240>)
 8008376:	429d      	cmp	r5, r3
 8008378:	d11b      	bne.n	80083b2 <_vfiprintf_r+0x56>
 800837a:	6875      	ldr	r5, [r6, #4]
 800837c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800837e:	07d9      	lsls	r1, r3, #31
 8008380:	d405      	bmi.n	800838e <_vfiprintf_r+0x32>
 8008382:	89ab      	ldrh	r3, [r5, #12]
 8008384:	059a      	lsls	r2, r3, #22
 8008386:	d402      	bmi.n	800838e <_vfiprintf_r+0x32>
 8008388:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800838a:	f7ff fe75 	bl	8008078 <__retarget_lock_acquire_recursive>
 800838e:	89ab      	ldrh	r3, [r5, #12]
 8008390:	071b      	lsls	r3, r3, #28
 8008392:	d501      	bpl.n	8008398 <_vfiprintf_r+0x3c>
 8008394:	692b      	ldr	r3, [r5, #16]
 8008396:	b9eb      	cbnz	r3, 80083d4 <_vfiprintf_r+0x78>
 8008398:	4629      	mov	r1, r5
 800839a:	4630      	mov	r0, r6
 800839c:	f7ff fc46 	bl	8007c2c <__swsetup_r>
 80083a0:	b1c0      	cbz	r0, 80083d4 <_vfiprintf_r+0x78>
 80083a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80083a4:	07dc      	lsls	r4, r3, #31
 80083a6:	d50e      	bpl.n	80083c6 <_vfiprintf_r+0x6a>
 80083a8:	f04f 30ff 	mov.w	r0, #4294967295
 80083ac:	b01d      	add	sp, #116	; 0x74
 80083ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083b2:	4b7b      	ldr	r3, [pc, #492]	; (80085a0 <_vfiprintf_r+0x244>)
 80083b4:	429d      	cmp	r5, r3
 80083b6:	d101      	bne.n	80083bc <_vfiprintf_r+0x60>
 80083b8:	68b5      	ldr	r5, [r6, #8]
 80083ba:	e7df      	b.n	800837c <_vfiprintf_r+0x20>
 80083bc:	4b79      	ldr	r3, [pc, #484]	; (80085a4 <_vfiprintf_r+0x248>)
 80083be:	429d      	cmp	r5, r3
 80083c0:	bf08      	it	eq
 80083c2:	68f5      	ldreq	r5, [r6, #12]
 80083c4:	e7da      	b.n	800837c <_vfiprintf_r+0x20>
 80083c6:	89ab      	ldrh	r3, [r5, #12]
 80083c8:	0598      	lsls	r0, r3, #22
 80083ca:	d4ed      	bmi.n	80083a8 <_vfiprintf_r+0x4c>
 80083cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80083ce:	f7ff fe54 	bl	800807a <__retarget_lock_release_recursive>
 80083d2:	e7e9      	b.n	80083a8 <_vfiprintf_r+0x4c>
 80083d4:	2300      	movs	r3, #0
 80083d6:	9309      	str	r3, [sp, #36]	; 0x24
 80083d8:	2320      	movs	r3, #32
 80083da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80083de:	f8cd 800c 	str.w	r8, [sp, #12]
 80083e2:	2330      	movs	r3, #48	; 0x30
 80083e4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80085a8 <_vfiprintf_r+0x24c>
 80083e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80083ec:	f04f 0901 	mov.w	r9, #1
 80083f0:	4623      	mov	r3, r4
 80083f2:	469a      	mov	sl, r3
 80083f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80083f8:	b10a      	cbz	r2, 80083fe <_vfiprintf_r+0xa2>
 80083fa:	2a25      	cmp	r2, #37	; 0x25
 80083fc:	d1f9      	bne.n	80083f2 <_vfiprintf_r+0x96>
 80083fe:	ebba 0b04 	subs.w	fp, sl, r4
 8008402:	d00b      	beq.n	800841c <_vfiprintf_r+0xc0>
 8008404:	465b      	mov	r3, fp
 8008406:	4622      	mov	r2, r4
 8008408:	4629      	mov	r1, r5
 800840a:	4630      	mov	r0, r6
 800840c:	f7ff ff93 	bl	8008336 <__sfputs_r>
 8008410:	3001      	adds	r0, #1
 8008412:	f000 80aa 	beq.w	800856a <_vfiprintf_r+0x20e>
 8008416:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008418:	445a      	add	r2, fp
 800841a:	9209      	str	r2, [sp, #36]	; 0x24
 800841c:	f89a 3000 	ldrb.w	r3, [sl]
 8008420:	2b00      	cmp	r3, #0
 8008422:	f000 80a2 	beq.w	800856a <_vfiprintf_r+0x20e>
 8008426:	2300      	movs	r3, #0
 8008428:	f04f 32ff 	mov.w	r2, #4294967295
 800842c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008430:	f10a 0a01 	add.w	sl, sl, #1
 8008434:	9304      	str	r3, [sp, #16]
 8008436:	9307      	str	r3, [sp, #28]
 8008438:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800843c:	931a      	str	r3, [sp, #104]	; 0x68
 800843e:	4654      	mov	r4, sl
 8008440:	2205      	movs	r2, #5
 8008442:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008446:	4858      	ldr	r0, [pc, #352]	; (80085a8 <_vfiprintf_r+0x24c>)
 8008448:	f7f7 fec2 	bl	80001d0 <memchr>
 800844c:	9a04      	ldr	r2, [sp, #16]
 800844e:	b9d8      	cbnz	r0, 8008488 <_vfiprintf_r+0x12c>
 8008450:	06d1      	lsls	r1, r2, #27
 8008452:	bf44      	itt	mi
 8008454:	2320      	movmi	r3, #32
 8008456:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800845a:	0713      	lsls	r3, r2, #28
 800845c:	bf44      	itt	mi
 800845e:	232b      	movmi	r3, #43	; 0x2b
 8008460:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008464:	f89a 3000 	ldrb.w	r3, [sl]
 8008468:	2b2a      	cmp	r3, #42	; 0x2a
 800846a:	d015      	beq.n	8008498 <_vfiprintf_r+0x13c>
 800846c:	9a07      	ldr	r2, [sp, #28]
 800846e:	4654      	mov	r4, sl
 8008470:	2000      	movs	r0, #0
 8008472:	f04f 0c0a 	mov.w	ip, #10
 8008476:	4621      	mov	r1, r4
 8008478:	f811 3b01 	ldrb.w	r3, [r1], #1
 800847c:	3b30      	subs	r3, #48	; 0x30
 800847e:	2b09      	cmp	r3, #9
 8008480:	d94e      	bls.n	8008520 <_vfiprintf_r+0x1c4>
 8008482:	b1b0      	cbz	r0, 80084b2 <_vfiprintf_r+0x156>
 8008484:	9207      	str	r2, [sp, #28]
 8008486:	e014      	b.n	80084b2 <_vfiprintf_r+0x156>
 8008488:	eba0 0308 	sub.w	r3, r0, r8
 800848c:	fa09 f303 	lsl.w	r3, r9, r3
 8008490:	4313      	orrs	r3, r2
 8008492:	9304      	str	r3, [sp, #16]
 8008494:	46a2      	mov	sl, r4
 8008496:	e7d2      	b.n	800843e <_vfiprintf_r+0xe2>
 8008498:	9b03      	ldr	r3, [sp, #12]
 800849a:	1d19      	adds	r1, r3, #4
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	9103      	str	r1, [sp, #12]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	bfbb      	ittet	lt
 80084a4:	425b      	neglt	r3, r3
 80084a6:	f042 0202 	orrlt.w	r2, r2, #2
 80084aa:	9307      	strge	r3, [sp, #28]
 80084ac:	9307      	strlt	r3, [sp, #28]
 80084ae:	bfb8      	it	lt
 80084b0:	9204      	strlt	r2, [sp, #16]
 80084b2:	7823      	ldrb	r3, [r4, #0]
 80084b4:	2b2e      	cmp	r3, #46	; 0x2e
 80084b6:	d10c      	bne.n	80084d2 <_vfiprintf_r+0x176>
 80084b8:	7863      	ldrb	r3, [r4, #1]
 80084ba:	2b2a      	cmp	r3, #42	; 0x2a
 80084bc:	d135      	bne.n	800852a <_vfiprintf_r+0x1ce>
 80084be:	9b03      	ldr	r3, [sp, #12]
 80084c0:	1d1a      	adds	r2, r3, #4
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	9203      	str	r2, [sp, #12]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	bfb8      	it	lt
 80084ca:	f04f 33ff 	movlt.w	r3, #4294967295
 80084ce:	3402      	adds	r4, #2
 80084d0:	9305      	str	r3, [sp, #20]
 80084d2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80085b8 <_vfiprintf_r+0x25c>
 80084d6:	7821      	ldrb	r1, [r4, #0]
 80084d8:	2203      	movs	r2, #3
 80084da:	4650      	mov	r0, sl
 80084dc:	f7f7 fe78 	bl	80001d0 <memchr>
 80084e0:	b140      	cbz	r0, 80084f4 <_vfiprintf_r+0x198>
 80084e2:	2340      	movs	r3, #64	; 0x40
 80084e4:	eba0 000a 	sub.w	r0, r0, sl
 80084e8:	fa03 f000 	lsl.w	r0, r3, r0
 80084ec:	9b04      	ldr	r3, [sp, #16]
 80084ee:	4303      	orrs	r3, r0
 80084f0:	3401      	adds	r4, #1
 80084f2:	9304      	str	r3, [sp, #16]
 80084f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084f8:	482c      	ldr	r0, [pc, #176]	; (80085ac <_vfiprintf_r+0x250>)
 80084fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80084fe:	2206      	movs	r2, #6
 8008500:	f7f7 fe66 	bl	80001d0 <memchr>
 8008504:	2800      	cmp	r0, #0
 8008506:	d03f      	beq.n	8008588 <_vfiprintf_r+0x22c>
 8008508:	4b29      	ldr	r3, [pc, #164]	; (80085b0 <_vfiprintf_r+0x254>)
 800850a:	bb1b      	cbnz	r3, 8008554 <_vfiprintf_r+0x1f8>
 800850c:	9b03      	ldr	r3, [sp, #12]
 800850e:	3307      	adds	r3, #7
 8008510:	f023 0307 	bic.w	r3, r3, #7
 8008514:	3308      	adds	r3, #8
 8008516:	9303      	str	r3, [sp, #12]
 8008518:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800851a:	443b      	add	r3, r7
 800851c:	9309      	str	r3, [sp, #36]	; 0x24
 800851e:	e767      	b.n	80083f0 <_vfiprintf_r+0x94>
 8008520:	fb0c 3202 	mla	r2, ip, r2, r3
 8008524:	460c      	mov	r4, r1
 8008526:	2001      	movs	r0, #1
 8008528:	e7a5      	b.n	8008476 <_vfiprintf_r+0x11a>
 800852a:	2300      	movs	r3, #0
 800852c:	3401      	adds	r4, #1
 800852e:	9305      	str	r3, [sp, #20]
 8008530:	4619      	mov	r1, r3
 8008532:	f04f 0c0a 	mov.w	ip, #10
 8008536:	4620      	mov	r0, r4
 8008538:	f810 2b01 	ldrb.w	r2, [r0], #1
 800853c:	3a30      	subs	r2, #48	; 0x30
 800853e:	2a09      	cmp	r2, #9
 8008540:	d903      	bls.n	800854a <_vfiprintf_r+0x1ee>
 8008542:	2b00      	cmp	r3, #0
 8008544:	d0c5      	beq.n	80084d2 <_vfiprintf_r+0x176>
 8008546:	9105      	str	r1, [sp, #20]
 8008548:	e7c3      	b.n	80084d2 <_vfiprintf_r+0x176>
 800854a:	fb0c 2101 	mla	r1, ip, r1, r2
 800854e:	4604      	mov	r4, r0
 8008550:	2301      	movs	r3, #1
 8008552:	e7f0      	b.n	8008536 <_vfiprintf_r+0x1da>
 8008554:	ab03      	add	r3, sp, #12
 8008556:	9300      	str	r3, [sp, #0]
 8008558:	462a      	mov	r2, r5
 800855a:	4b16      	ldr	r3, [pc, #88]	; (80085b4 <_vfiprintf_r+0x258>)
 800855c:	a904      	add	r1, sp, #16
 800855e:	4630      	mov	r0, r6
 8008560:	f3af 8000 	nop.w
 8008564:	4607      	mov	r7, r0
 8008566:	1c78      	adds	r0, r7, #1
 8008568:	d1d6      	bne.n	8008518 <_vfiprintf_r+0x1bc>
 800856a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800856c:	07d9      	lsls	r1, r3, #31
 800856e:	d405      	bmi.n	800857c <_vfiprintf_r+0x220>
 8008570:	89ab      	ldrh	r3, [r5, #12]
 8008572:	059a      	lsls	r2, r3, #22
 8008574:	d402      	bmi.n	800857c <_vfiprintf_r+0x220>
 8008576:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008578:	f7ff fd7f 	bl	800807a <__retarget_lock_release_recursive>
 800857c:	89ab      	ldrh	r3, [r5, #12]
 800857e:	065b      	lsls	r3, r3, #25
 8008580:	f53f af12 	bmi.w	80083a8 <_vfiprintf_r+0x4c>
 8008584:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008586:	e711      	b.n	80083ac <_vfiprintf_r+0x50>
 8008588:	ab03      	add	r3, sp, #12
 800858a:	9300      	str	r3, [sp, #0]
 800858c:	462a      	mov	r2, r5
 800858e:	4b09      	ldr	r3, [pc, #36]	; (80085b4 <_vfiprintf_r+0x258>)
 8008590:	a904      	add	r1, sp, #16
 8008592:	4630      	mov	r0, r6
 8008594:	f000 f880 	bl	8008698 <_printf_i>
 8008598:	e7e4      	b.n	8008564 <_vfiprintf_r+0x208>
 800859a:	bf00      	nop
 800859c:	08009010 	.word	0x08009010
 80085a0:	08009030 	.word	0x08009030
 80085a4:	08008ff0 	.word	0x08008ff0
 80085a8:	08009050 	.word	0x08009050
 80085ac:	0800905a 	.word	0x0800905a
 80085b0:	00000000 	.word	0x00000000
 80085b4:	08008337 	.word	0x08008337
 80085b8:	08009056 	.word	0x08009056

080085bc <_printf_common>:
 80085bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085c0:	4616      	mov	r6, r2
 80085c2:	4699      	mov	r9, r3
 80085c4:	688a      	ldr	r2, [r1, #8]
 80085c6:	690b      	ldr	r3, [r1, #16]
 80085c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80085cc:	4293      	cmp	r3, r2
 80085ce:	bfb8      	it	lt
 80085d0:	4613      	movlt	r3, r2
 80085d2:	6033      	str	r3, [r6, #0]
 80085d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80085d8:	4607      	mov	r7, r0
 80085da:	460c      	mov	r4, r1
 80085dc:	b10a      	cbz	r2, 80085e2 <_printf_common+0x26>
 80085de:	3301      	adds	r3, #1
 80085e0:	6033      	str	r3, [r6, #0]
 80085e2:	6823      	ldr	r3, [r4, #0]
 80085e4:	0699      	lsls	r1, r3, #26
 80085e6:	bf42      	ittt	mi
 80085e8:	6833      	ldrmi	r3, [r6, #0]
 80085ea:	3302      	addmi	r3, #2
 80085ec:	6033      	strmi	r3, [r6, #0]
 80085ee:	6825      	ldr	r5, [r4, #0]
 80085f0:	f015 0506 	ands.w	r5, r5, #6
 80085f4:	d106      	bne.n	8008604 <_printf_common+0x48>
 80085f6:	f104 0a19 	add.w	sl, r4, #25
 80085fa:	68e3      	ldr	r3, [r4, #12]
 80085fc:	6832      	ldr	r2, [r6, #0]
 80085fe:	1a9b      	subs	r3, r3, r2
 8008600:	42ab      	cmp	r3, r5
 8008602:	dc26      	bgt.n	8008652 <_printf_common+0x96>
 8008604:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008608:	1e13      	subs	r3, r2, #0
 800860a:	6822      	ldr	r2, [r4, #0]
 800860c:	bf18      	it	ne
 800860e:	2301      	movne	r3, #1
 8008610:	0692      	lsls	r2, r2, #26
 8008612:	d42b      	bmi.n	800866c <_printf_common+0xb0>
 8008614:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008618:	4649      	mov	r1, r9
 800861a:	4638      	mov	r0, r7
 800861c:	47c0      	blx	r8
 800861e:	3001      	adds	r0, #1
 8008620:	d01e      	beq.n	8008660 <_printf_common+0xa4>
 8008622:	6823      	ldr	r3, [r4, #0]
 8008624:	68e5      	ldr	r5, [r4, #12]
 8008626:	6832      	ldr	r2, [r6, #0]
 8008628:	f003 0306 	and.w	r3, r3, #6
 800862c:	2b04      	cmp	r3, #4
 800862e:	bf08      	it	eq
 8008630:	1aad      	subeq	r5, r5, r2
 8008632:	68a3      	ldr	r3, [r4, #8]
 8008634:	6922      	ldr	r2, [r4, #16]
 8008636:	bf0c      	ite	eq
 8008638:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800863c:	2500      	movne	r5, #0
 800863e:	4293      	cmp	r3, r2
 8008640:	bfc4      	itt	gt
 8008642:	1a9b      	subgt	r3, r3, r2
 8008644:	18ed      	addgt	r5, r5, r3
 8008646:	2600      	movs	r6, #0
 8008648:	341a      	adds	r4, #26
 800864a:	42b5      	cmp	r5, r6
 800864c:	d11a      	bne.n	8008684 <_printf_common+0xc8>
 800864e:	2000      	movs	r0, #0
 8008650:	e008      	b.n	8008664 <_printf_common+0xa8>
 8008652:	2301      	movs	r3, #1
 8008654:	4652      	mov	r2, sl
 8008656:	4649      	mov	r1, r9
 8008658:	4638      	mov	r0, r7
 800865a:	47c0      	blx	r8
 800865c:	3001      	adds	r0, #1
 800865e:	d103      	bne.n	8008668 <_printf_common+0xac>
 8008660:	f04f 30ff 	mov.w	r0, #4294967295
 8008664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008668:	3501      	adds	r5, #1
 800866a:	e7c6      	b.n	80085fa <_printf_common+0x3e>
 800866c:	18e1      	adds	r1, r4, r3
 800866e:	1c5a      	adds	r2, r3, #1
 8008670:	2030      	movs	r0, #48	; 0x30
 8008672:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008676:	4422      	add	r2, r4
 8008678:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800867c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008680:	3302      	adds	r3, #2
 8008682:	e7c7      	b.n	8008614 <_printf_common+0x58>
 8008684:	2301      	movs	r3, #1
 8008686:	4622      	mov	r2, r4
 8008688:	4649      	mov	r1, r9
 800868a:	4638      	mov	r0, r7
 800868c:	47c0      	blx	r8
 800868e:	3001      	adds	r0, #1
 8008690:	d0e6      	beq.n	8008660 <_printf_common+0xa4>
 8008692:	3601      	adds	r6, #1
 8008694:	e7d9      	b.n	800864a <_printf_common+0x8e>
	...

08008698 <_printf_i>:
 8008698:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800869c:	7e0f      	ldrb	r7, [r1, #24]
 800869e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80086a0:	2f78      	cmp	r7, #120	; 0x78
 80086a2:	4691      	mov	r9, r2
 80086a4:	4680      	mov	r8, r0
 80086a6:	460c      	mov	r4, r1
 80086a8:	469a      	mov	sl, r3
 80086aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80086ae:	d807      	bhi.n	80086c0 <_printf_i+0x28>
 80086b0:	2f62      	cmp	r7, #98	; 0x62
 80086b2:	d80a      	bhi.n	80086ca <_printf_i+0x32>
 80086b4:	2f00      	cmp	r7, #0
 80086b6:	f000 80d8 	beq.w	800886a <_printf_i+0x1d2>
 80086ba:	2f58      	cmp	r7, #88	; 0x58
 80086bc:	f000 80a3 	beq.w	8008806 <_printf_i+0x16e>
 80086c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80086c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80086c8:	e03a      	b.n	8008740 <_printf_i+0xa8>
 80086ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80086ce:	2b15      	cmp	r3, #21
 80086d0:	d8f6      	bhi.n	80086c0 <_printf_i+0x28>
 80086d2:	a101      	add	r1, pc, #4	; (adr r1, 80086d8 <_printf_i+0x40>)
 80086d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80086d8:	08008731 	.word	0x08008731
 80086dc:	08008745 	.word	0x08008745
 80086e0:	080086c1 	.word	0x080086c1
 80086e4:	080086c1 	.word	0x080086c1
 80086e8:	080086c1 	.word	0x080086c1
 80086ec:	080086c1 	.word	0x080086c1
 80086f0:	08008745 	.word	0x08008745
 80086f4:	080086c1 	.word	0x080086c1
 80086f8:	080086c1 	.word	0x080086c1
 80086fc:	080086c1 	.word	0x080086c1
 8008700:	080086c1 	.word	0x080086c1
 8008704:	08008851 	.word	0x08008851
 8008708:	08008775 	.word	0x08008775
 800870c:	08008833 	.word	0x08008833
 8008710:	080086c1 	.word	0x080086c1
 8008714:	080086c1 	.word	0x080086c1
 8008718:	08008873 	.word	0x08008873
 800871c:	080086c1 	.word	0x080086c1
 8008720:	08008775 	.word	0x08008775
 8008724:	080086c1 	.word	0x080086c1
 8008728:	080086c1 	.word	0x080086c1
 800872c:	0800883b 	.word	0x0800883b
 8008730:	682b      	ldr	r3, [r5, #0]
 8008732:	1d1a      	adds	r2, r3, #4
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	602a      	str	r2, [r5, #0]
 8008738:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800873c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008740:	2301      	movs	r3, #1
 8008742:	e0a3      	b.n	800888c <_printf_i+0x1f4>
 8008744:	6820      	ldr	r0, [r4, #0]
 8008746:	6829      	ldr	r1, [r5, #0]
 8008748:	0606      	lsls	r6, r0, #24
 800874a:	f101 0304 	add.w	r3, r1, #4
 800874e:	d50a      	bpl.n	8008766 <_printf_i+0xce>
 8008750:	680e      	ldr	r6, [r1, #0]
 8008752:	602b      	str	r3, [r5, #0]
 8008754:	2e00      	cmp	r6, #0
 8008756:	da03      	bge.n	8008760 <_printf_i+0xc8>
 8008758:	232d      	movs	r3, #45	; 0x2d
 800875a:	4276      	negs	r6, r6
 800875c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008760:	485e      	ldr	r0, [pc, #376]	; (80088dc <_printf_i+0x244>)
 8008762:	230a      	movs	r3, #10
 8008764:	e019      	b.n	800879a <_printf_i+0x102>
 8008766:	680e      	ldr	r6, [r1, #0]
 8008768:	602b      	str	r3, [r5, #0]
 800876a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800876e:	bf18      	it	ne
 8008770:	b236      	sxthne	r6, r6
 8008772:	e7ef      	b.n	8008754 <_printf_i+0xbc>
 8008774:	682b      	ldr	r3, [r5, #0]
 8008776:	6820      	ldr	r0, [r4, #0]
 8008778:	1d19      	adds	r1, r3, #4
 800877a:	6029      	str	r1, [r5, #0]
 800877c:	0601      	lsls	r1, r0, #24
 800877e:	d501      	bpl.n	8008784 <_printf_i+0xec>
 8008780:	681e      	ldr	r6, [r3, #0]
 8008782:	e002      	b.n	800878a <_printf_i+0xf2>
 8008784:	0646      	lsls	r6, r0, #25
 8008786:	d5fb      	bpl.n	8008780 <_printf_i+0xe8>
 8008788:	881e      	ldrh	r6, [r3, #0]
 800878a:	4854      	ldr	r0, [pc, #336]	; (80088dc <_printf_i+0x244>)
 800878c:	2f6f      	cmp	r7, #111	; 0x6f
 800878e:	bf0c      	ite	eq
 8008790:	2308      	moveq	r3, #8
 8008792:	230a      	movne	r3, #10
 8008794:	2100      	movs	r1, #0
 8008796:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800879a:	6865      	ldr	r5, [r4, #4]
 800879c:	60a5      	str	r5, [r4, #8]
 800879e:	2d00      	cmp	r5, #0
 80087a0:	bfa2      	ittt	ge
 80087a2:	6821      	ldrge	r1, [r4, #0]
 80087a4:	f021 0104 	bicge.w	r1, r1, #4
 80087a8:	6021      	strge	r1, [r4, #0]
 80087aa:	b90e      	cbnz	r6, 80087b0 <_printf_i+0x118>
 80087ac:	2d00      	cmp	r5, #0
 80087ae:	d04d      	beq.n	800884c <_printf_i+0x1b4>
 80087b0:	4615      	mov	r5, r2
 80087b2:	fbb6 f1f3 	udiv	r1, r6, r3
 80087b6:	fb03 6711 	mls	r7, r3, r1, r6
 80087ba:	5dc7      	ldrb	r7, [r0, r7]
 80087bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80087c0:	4637      	mov	r7, r6
 80087c2:	42bb      	cmp	r3, r7
 80087c4:	460e      	mov	r6, r1
 80087c6:	d9f4      	bls.n	80087b2 <_printf_i+0x11a>
 80087c8:	2b08      	cmp	r3, #8
 80087ca:	d10b      	bne.n	80087e4 <_printf_i+0x14c>
 80087cc:	6823      	ldr	r3, [r4, #0]
 80087ce:	07de      	lsls	r6, r3, #31
 80087d0:	d508      	bpl.n	80087e4 <_printf_i+0x14c>
 80087d2:	6923      	ldr	r3, [r4, #16]
 80087d4:	6861      	ldr	r1, [r4, #4]
 80087d6:	4299      	cmp	r1, r3
 80087d8:	bfde      	ittt	le
 80087da:	2330      	movle	r3, #48	; 0x30
 80087dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80087e0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80087e4:	1b52      	subs	r2, r2, r5
 80087e6:	6122      	str	r2, [r4, #16]
 80087e8:	f8cd a000 	str.w	sl, [sp]
 80087ec:	464b      	mov	r3, r9
 80087ee:	aa03      	add	r2, sp, #12
 80087f0:	4621      	mov	r1, r4
 80087f2:	4640      	mov	r0, r8
 80087f4:	f7ff fee2 	bl	80085bc <_printf_common>
 80087f8:	3001      	adds	r0, #1
 80087fa:	d14c      	bne.n	8008896 <_printf_i+0x1fe>
 80087fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008800:	b004      	add	sp, #16
 8008802:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008806:	4835      	ldr	r0, [pc, #212]	; (80088dc <_printf_i+0x244>)
 8008808:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800880c:	6829      	ldr	r1, [r5, #0]
 800880e:	6823      	ldr	r3, [r4, #0]
 8008810:	f851 6b04 	ldr.w	r6, [r1], #4
 8008814:	6029      	str	r1, [r5, #0]
 8008816:	061d      	lsls	r5, r3, #24
 8008818:	d514      	bpl.n	8008844 <_printf_i+0x1ac>
 800881a:	07df      	lsls	r7, r3, #31
 800881c:	bf44      	itt	mi
 800881e:	f043 0320 	orrmi.w	r3, r3, #32
 8008822:	6023      	strmi	r3, [r4, #0]
 8008824:	b91e      	cbnz	r6, 800882e <_printf_i+0x196>
 8008826:	6823      	ldr	r3, [r4, #0]
 8008828:	f023 0320 	bic.w	r3, r3, #32
 800882c:	6023      	str	r3, [r4, #0]
 800882e:	2310      	movs	r3, #16
 8008830:	e7b0      	b.n	8008794 <_printf_i+0xfc>
 8008832:	6823      	ldr	r3, [r4, #0]
 8008834:	f043 0320 	orr.w	r3, r3, #32
 8008838:	6023      	str	r3, [r4, #0]
 800883a:	2378      	movs	r3, #120	; 0x78
 800883c:	4828      	ldr	r0, [pc, #160]	; (80088e0 <_printf_i+0x248>)
 800883e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008842:	e7e3      	b.n	800880c <_printf_i+0x174>
 8008844:	0659      	lsls	r1, r3, #25
 8008846:	bf48      	it	mi
 8008848:	b2b6      	uxthmi	r6, r6
 800884a:	e7e6      	b.n	800881a <_printf_i+0x182>
 800884c:	4615      	mov	r5, r2
 800884e:	e7bb      	b.n	80087c8 <_printf_i+0x130>
 8008850:	682b      	ldr	r3, [r5, #0]
 8008852:	6826      	ldr	r6, [r4, #0]
 8008854:	6961      	ldr	r1, [r4, #20]
 8008856:	1d18      	adds	r0, r3, #4
 8008858:	6028      	str	r0, [r5, #0]
 800885a:	0635      	lsls	r5, r6, #24
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	d501      	bpl.n	8008864 <_printf_i+0x1cc>
 8008860:	6019      	str	r1, [r3, #0]
 8008862:	e002      	b.n	800886a <_printf_i+0x1d2>
 8008864:	0670      	lsls	r0, r6, #25
 8008866:	d5fb      	bpl.n	8008860 <_printf_i+0x1c8>
 8008868:	8019      	strh	r1, [r3, #0]
 800886a:	2300      	movs	r3, #0
 800886c:	6123      	str	r3, [r4, #16]
 800886e:	4615      	mov	r5, r2
 8008870:	e7ba      	b.n	80087e8 <_printf_i+0x150>
 8008872:	682b      	ldr	r3, [r5, #0]
 8008874:	1d1a      	adds	r2, r3, #4
 8008876:	602a      	str	r2, [r5, #0]
 8008878:	681d      	ldr	r5, [r3, #0]
 800887a:	6862      	ldr	r2, [r4, #4]
 800887c:	2100      	movs	r1, #0
 800887e:	4628      	mov	r0, r5
 8008880:	f7f7 fca6 	bl	80001d0 <memchr>
 8008884:	b108      	cbz	r0, 800888a <_printf_i+0x1f2>
 8008886:	1b40      	subs	r0, r0, r5
 8008888:	6060      	str	r0, [r4, #4]
 800888a:	6863      	ldr	r3, [r4, #4]
 800888c:	6123      	str	r3, [r4, #16]
 800888e:	2300      	movs	r3, #0
 8008890:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008894:	e7a8      	b.n	80087e8 <_printf_i+0x150>
 8008896:	6923      	ldr	r3, [r4, #16]
 8008898:	462a      	mov	r2, r5
 800889a:	4649      	mov	r1, r9
 800889c:	4640      	mov	r0, r8
 800889e:	47d0      	blx	sl
 80088a0:	3001      	adds	r0, #1
 80088a2:	d0ab      	beq.n	80087fc <_printf_i+0x164>
 80088a4:	6823      	ldr	r3, [r4, #0]
 80088a6:	079b      	lsls	r3, r3, #30
 80088a8:	d413      	bmi.n	80088d2 <_printf_i+0x23a>
 80088aa:	68e0      	ldr	r0, [r4, #12]
 80088ac:	9b03      	ldr	r3, [sp, #12]
 80088ae:	4298      	cmp	r0, r3
 80088b0:	bfb8      	it	lt
 80088b2:	4618      	movlt	r0, r3
 80088b4:	e7a4      	b.n	8008800 <_printf_i+0x168>
 80088b6:	2301      	movs	r3, #1
 80088b8:	4632      	mov	r2, r6
 80088ba:	4649      	mov	r1, r9
 80088bc:	4640      	mov	r0, r8
 80088be:	47d0      	blx	sl
 80088c0:	3001      	adds	r0, #1
 80088c2:	d09b      	beq.n	80087fc <_printf_i+0x164>
 80088c4:	3501      	adds	r5, #1
 80088c6:	68e3      	ldr	r3, [r4, #12]
 80088c8:	9903      	ldr	r1, [sp, #12]
 80088ca:	1a5b      	subs	r3, r3, r1
 80088cc:	42ab      	cmp	r3, r5
 80088ce:	dcf2      	bgt.n	80088b6 <_printf_i+0x21e>
 80088d0:	e7eb      	b.n	80088aa <_printf_i+0x212>
 80088d2:	2500      	movs	r5, #0
 80088d4:	f104 0619 	add.w	r6, r4, #25
 80088d8:	e7f5      	b.n	80088c6 <_printf_i+0x22e>
 80088da:	bf00      	nop
 80088dc:	08009061 	.word	0x08009061
 80088e0:	08009072 	.word	0x08009072

080088e4 <_sbrk_r>:
 80088e4:	b538      	push	{r3, r4, r5, lr}
 80088e6:	4d06      	ldr	r5, [pc, #24]	; (8008900 <_sbrk_r+0x1c>)
 80088e8:	2300      	movs	r3, #0
 80088ea:	4604      	mov	r4, r0
 80088ec:	4608      	mov	r0, r1
 80088ee:	602b      	str	r3, [r5, #0]
 80088f0:	f7f9 ff90 	bl	8002814 <_sbrk>
 80088f4:	1c43      	adds	r3, r0, #1
 80088f6:	d102      	bne.n	80088fe <_sbrk_r+0x1a>
 80088f8:	682b      	ldr	r3, [r5, #0]
 80088fa:	b103      	cbz	r3, 80088fe <_sbrk_r+0x1a>
 80088fc:	6023      	str	r3, [r4, #0]
 80088fe:	bd38      	pop	{r3, r4, r5, pc}
 8008900:	20002e48 	.word	0x20002e48

08008904 <__sread>:
 8008904:	b510      	push	{r4, lr}
 8008906:	460c      	mov	r4, r1
 8008908:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800890c:	f000 f8a0 	bl	8008a50 <_read_r>
 8008910:	2800      	cmp	r0, #0
 8008912:	bfab      	itete	ge
 8008914:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008916:	89a3      	ldrhlt	r3, [r4, #12]
 8008918:	181b      	addge	r3, r3, r0
 800891a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800891e:	bfac      	ite	ge
 8008920:	6563      	strge	r3, [r4, #84]	; 0x54
 8008922:	81a3      	strhlt	r3, [r4, #12]
 8008924:	bd10      	pop	{r4, pc}

08008926 <__swrite>:
 8008926:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800892a:	461f      	mov	r7, r3
 800892c:	898b      	ldrh	r3, [r1, #12]
 800892e:	05db      	lsls	r3, r3, #23
 8008930:	4605      	mov	r5, r0
 8008932:	460c      	mov	r4, r1
 8008934:	4616      	mov	r6, r2
 8008936:	d505      	bpl.n	8008944 <__swrite+0x1e>
 8008938:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800893c:	2302      	movs	r3, #2
 800893e:	2200      	movs	r2, #0
 8008940:	f000 f868 	bl	8008a14 <_lseek_r>
 8008944:	89a3      	ldrh	r3, [r4, #12]
 8008946:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800894a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800894e:	81a3      	strh	r3, [r4, #12]
 8008950:	4632      	mov	r2, r6
 8008952:	463b      	mov	r3, r7
 8008954:	4628      	mov	r0, r5
 8008956:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800895a:	f000 b817 	b.w	800898c <_write_r>

0800895e <__sseek>:
 800895e:	b510      	push	{r4, lr}
 8008960:	460c      	mov	r4, r1
 8008962:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008966:	f000 f855 	bl	8008a14 <_lseek_r>
 800896a:	1c43      	adds	r3, r0, #1
 800896c:	89a3      	ldrh	r3, [r4, #12]
 800896e:	bf15      	itete	ne
 8008970:	6560      	strne	r0, [r4, #84]	; 0x54
 8008972:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008976:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800897a:	81a3      	strheq	r3, [r4, #12]
 800897c:	bf18      	it	ne
 800897e:	81a3      	strhne	r3, [r4, #12]
 8008980:	bd10      	pop	{r4, pc}

08008982 <__sclose>:
 8008982:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008986:	f000 b813 	b.w	80089b0 <_close_r>
	...

0800898c <_write_r>:
 800898c:	b538      	push	{r3, r4, r5, lr}
 800898e:	4d07      	ldr	r5, [pc, #28]	; (80089ac <_write_r+0x20>)
 8008990:	4604      	mov	r4, r0
 8008992:	4608      	mov	r0, r1
 8008994:	4611      	mov	r1, r2
 8008996:	2200      	movs	r2, #0
 8008998:	602a      	str	r2, [r5, #0]
 800899a:	461a      	mov	r2, r3
 800899c:	f7f9 f996 	bl	8001ccc <_write>
 80089a0:	1c43      	adds	r3, r0, #1
 80089a2:	d102      	bne.n	80089aa <_write_r+0x1e>
 80089a4:	682b      	ldr	r3, [r5, #0]
 80089a6:	b103      	cbz	r3, 80089aa <_write_r+0x1e>
 80089a8:	6023      	str	r3, [r4, #0]
 80089aa:	bd38      	pop	{r3, r4, r5, pc}
 80089ac:	20002e48 	.word	0x20002e48

080089b0 <_close_r>:
 80089b0:	b538      	push	{r3, r4, r5, lr}
 80089b2:	4d06      	ldr	r5, [pc, #24]	; (80089cc <_close_r+0x1c>)
 80089b4:	2300      	movs	r3, #0
 80089b6:	4604      	mov	r4, r0
 80089b8:	4608      	mov	r0, r1
 80089ba:	602b      	str	r3, [r5, #0]
 80089bc:	f7f9 fef6 	bl	80027ac <_close>
 80089c0:	1c43      	adds	r3, r0, #1
 80089c2:	d102      	bne.n	80089ca <_close_r+0x1a>
 80089c4:	682b      	ldr	r3, [r5, #0]
 80089c6:	b103      	cbz	r3, 80089ca <_close_r+0x1a>
 80089c8:	6023      	str	r3, [r4, #0]
 80089ca:	bd38      	pop	{r3, r4, r5, pc}
 80089cc:	20002e48 	.word	0x20002e48

080089d0 <_fstat_r>:
 80089d0:	b538      	push	{r3, r4, r5, lr}
 80089d2:	4d07      	ldr	r5, [pc, #28]	; (80089f0 <_fstat_r+0x20>)
 80089d4:	2300      	movs	r3, #0
 80089d6:	4604      	mov	r4, r0
 80089d8:	4608      	mov	r0, r1
 80089da:	4611      	mov	r1, r2
 80089dc:	602b      	str	r3, [r5, #0]
 80089de:	f7f9 fef1 	bl	80027c4 <_fstat>
 80089e2:	1c43      	adds	r3, r0, #1
 80089e4:	d102      	bne.n	80089ec <_fstat_r+0x1c>
 80089e6:	682b      	ldr	r3, [r5, #0]
 80089e8:	b103      	cbz	r3, 80089ec <_fstat_r+0x1c>
 80089ea:	6023      	str	r3, [r4, #0]
 80089ec:	bd38      	pop	{r3, r4, r5, pc}
 80089ee:	bf00      	nop
 80089f0:	20002e48 	.word	0x20002e48

080089f4 <_isatty_r>:
 80089f4:	b538      	push	{r3, r4, r5, lr}
 80089f6:	4d06      	ldr	r5, [pc, #24]	; (8008a10 <_isatty_r+0x1c>)
 80089f8:	2300      	movs	r3, #0
 80089fa:	4604      	mov	r4, r0
 80089fc:	4608      	mov	r0, r1
 80089fe:	602b      	str	r3, [r5, #0]
 8008a00:	f7f9 fef0 	bl	80027e4 <_isatty>
 8008a04:	1c43      	adds	r3, r0, #1
 8008a06:	d102      	bne.n	8008a0e <_isatty_r+0x1a>
 8008a08:	682b      	ldr	r3, [r5, #0]
 8008a0a:	b103      	cbz	r3, 8008a0e <_isatty_r+0x1a>
 8008a0c:	6023      	str	r3, [r4, #0]
 8008a0e:	bd38      	pop	{r3, r4, r5, pc}
 8008a10:	20002e48 	.word	0x20002e48

08008a14 <_lseek_r>:
 8008a14:	b538      	push	{r3, r4, r5, lr}
 8008a16:	4d07      	ldr	r5, [pc, #28]	; (8008a34 <_lseek_r+0x20>)
 8008a18:	4604      	mov	r4, r0
 8008a1a:	4608      	mov	r0, r1
 8008a1c:	4611      	mov	r1, r2
 8008a1e:	2200      	movs	r2, #0
 8008a20:	602a      	str	r2, [r5, #0]
 8008a22:	461a      	mov	r2, r3
 8008a24:	f7f9 fee9 	bl	80027fa <_lseek>
 8008a28:	1c43      	adds	r3, r0, #1
 8008a2a:	d102      	bne.n	8008a32 <_lseek_r+0x1e>
 8008a2c:	682b      	ldr	r3, [r5, #0]
 8008a2e:	b103      	cbz	r3, 8008a32 <_lseek_r+0x1e>
 8008a30:	6023      	str	r3, [r4, #0]
 8008a32:	bd38      	pop	{r3, r4, r5, pc}
 8008a34:	20002e48 	.word	0x20002e48

08008a38 <__malloc_lock>:
 8008a38:	4801      	ldr	r0, [pc, #4]	; (8008a40 <__malloc_lock+0x8>)
 8008a3a:	f7ff bb1d 	b.w	8008078 <__retarget_lock_acquire_recursive>
 8008a3e:	bf00      	nop
 8008a40:	20002e3c 	.word	0x20002e3c

08008a44 <__malloc_unlock>:
 8008a44:	4801      	ldr	r0, [pc, #4]	; (8008a4c <__malloc_unlock+0x8>)
 8008a46:	f7ff bb18 	b.w	800807a <__retarget_lock_release_recursive>
 8008a4a:	bf00      	nop
 8008a4c:	20002e3c 	.word	0x20002e3c

08008a50 <_read_r>:
 8008a50:	b538      	push	{r3, r4, r5, lr}
 8008a52:	4d07      	ldr	r5, [pc, #28]	; (8008a70 <_read_r+0x20>)
 8008a54:	4604      	mov	r4, r0
 8008a56:	4608      	mov	r0, r1
 8008a58:	4611      	mov	r1, r2
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	602a      	str	r2, [r5, #0]
 8008a5e:	461a      	mov	r2, r3
 8008a60:	f7f9 fe87 	bl	8002772 <_read>
 8008a64:	1c43      	adds	r3, r0, #1
 8008a66:	d102      	bne.n	8008a6e <_read_r+0x1e>
 8008a68:	682b      	ldr	r3, [r5, #0]
 8008a6a:	b103      	cbz	r3, 8008a6e <_read_r+0x1e>
 8008a6c:	6023      	str	r3, [r4, #0]
 8008a6e:	bd38      	pop	{r3, r4, r5, pc}
 8008a70:	20002e48 	.word	0x20002e48

08008a74 <_init>:
 8008a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a76:	bf00      	nop
 8008a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a7a:	bc08      	pop	{r3}
 8008a7c:	469e      	mov	lr, r3
 8008a7e:	4770      	bx	lr

08008a80 <_fini>:
 8008a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a82:	bf00      	nop
 8008a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a86:	bc08      	pop	{r3}
 8008a88:	469e      	mov	lr, r3
 8008a8a:	4770      	bx	lr
